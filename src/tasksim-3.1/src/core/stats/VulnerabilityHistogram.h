/*
 * Copyright - Barcelona Supercomputing Center.
 * All rights reserved.
 *
 * Redistribution in source and binary forms, with or without
 * modification, is not permitted.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef STATS_VULNERABILITYHISTOGRAM_H
#define STATS_VULNERABILITYHISTOGRAM_H

#include <map>

#include "VulnerabilityStat.h"
#include "core/engine/types.h"
#include "core/logic/coherence/single/Message.h"

namespace sim {
namespace stats {

class VulnerabilityHistogram: public VulnerabilityStat {
protected:
    typedef typename VulnerabilityStat::average_t average_t;
    typedef typename VulnerabilityStat::address_stats_t address_stats_t;

    // time -> range, values -> occurences
    std::map<engine::addr_t, address_stats_t> memory_map_;
    std::vector< std::map<std::pair<unsigned,unsigned>, unsigned> > data_;
    std::vector<bool> worth_writing_;
    std::map<std::pair<unsigned,unsigned>, unsigned> data_initializer_;

    unsigned bins_, map_size_;

    std::string filename_;

    void aggregate(size_t, engine::cycles_t, engine::cycles_t, engine::cycles_t);
    void periodic_output(int, address_stats_t&, engine::cycles_t, bool);

public:
    template<typename T>
    VulnerabilityHistogram(const T&, const std::string&, unsigned, engine::cycles_t, engine::addr_t, const std::string&,
                                     unsigned bins = 100);
    ~VulnerabilityHistogram();

    void mem_access(engine::cycles_t, sim::logic::coherence::single::Request&);
    void finalize(engine::cycles_t);
};

}
}

#include "VulnerabilityHistogram-impl.h"

#endif // STATS_VULNERABILITYHISTOGRAM_H
