================== Step 4: Generate Burst trace ===============================

We call burst mode trace to a trace that only contains the paralellism
primitives and the duration of the computational phases between said
primitives. Thios allows us to later simulate in a very coarse and fast way
the benchmark to get a sense on how the application can perform. 


In order to generate a burst mode trace we use the script job_tracer.bash.
If we open it we can observed that it contains:

 - SLURM directives.
 - MUSA configuration options:
 - APPNAME: application binary name
 - ARGS: application arguments
 - RANKS: number of MPI ranks
 - MEMORY_MODE: boolean value that determines if the trace is in burst or memory modes
   - Memory mode variables (which we can ignore at the moment): 
     - TSMPI_MEM_PHASES_INIT: first OpenMP/OmpSs phase that will be traced in memory mode.
     - TSMPI_MEM_PHASES_NUM: number of OpenMP/OmpSs phases that will be traced in memory mode.
     - TSMPI_RANK_INIT: first MPI rank from which to stract memory mode information.
     - TSMPI_RANK_NUM: number of ranks from which to stract memory mode information.
 - TSMPI_SIM_CONFIG: TaskSim's simulator hardware configuration 
 - TSMPI_SIM_CORES: list with the number of cores per MPI rank to simulate.

The values are already the ones we need for the tutorial. To launch it on
MareNostrum4 run:

$> sbatch job_tracer.bash

(Remember that oyu can check the job status with squeue).

Once the job finishes, a folder TRACE_sp-mz.A.4_000004_BRST/ should be
generated as well as two log files. The stdout log should have the step by step
information of what has been done.

 + In TRACE_sp-mz.A.4_000004_BRST/LOGS/ there are logs for each step taken
   during the trace generation.
 + In TRACE_sp-mz.A.4_000004_BRST/TRACE/trace_prv there is a Paraver trace.
   It contains information about the behavior of the application during a
   native run. It can be visualized with Paraver:

   $> module load paraver
   $> wxparaver TRACE_sp-mz.A.4_000004_BRST/TRACE/trace_prv/trace_sp-mz.A.4.prv

   If you load the default view (top left icon), you can see the OpenMP/OmpSs 
   phases in blue. The different MPI events in red, and yellow lines denoting
   the comunication events.

   To view the behavior, load the MPI Call configuration located on:
   /apps/BSCTOOLS/wxparaver/latest/cfgs/mpi/views/MPI_call.cfg
   (In the menu: File -> Load Configuration)


 + In TRACE_sp-mz.A.4_000004_BRST/TRACE/trace_ts there are the TaskSim
   Burst-mode traces. These traces contain a set of traces per rank.
 + The trace files named ${APP}_proc_${RANK}.ts.mpiphases contain a plain text
   description of the mpi phases executed by the appllication.
   Each line corresponds to a different mpi_phases, and the values mean:

   - Index:MasterWorkDescriptorID:NanosCode?:InMemory?:MPI_ID:MPI_NAME

     - Index is just the mpi_phase index.
     - MasterWorkDescriptorID is the ID assigned to that mpi_phase master work
                  descriptor (Usefull for interna TaskSim purposes only).
     - NanosCode? A boolean that tells if that MPI phase contains
                  Nanos Code (Tasks).
     - InMemory? A boolean that tells if that MPI phase has been traced in
                  memory mode (only if NanosCode? is true/1).
     - MPI_ID Identifier of the MPI call that separates the current phase from
                  the next.
     - MPI_NAME The bane of said MPI call.
