/*
 * Copyright - Barcelona Supercomputing Center.
 * All rights reserved.
 *
 * Redistribution in source and binary forms, with or without
 * modification, is not permitted.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef STATS_VULNERABILITYSPACE_H_
#define STATS_VULNERABILITYSPACE_H_

#include <map>

#include "VulnerabilityStat.h"
#include "core/engine/types.h"
#include "core/logic/coherence/single/Message.h"

namespace sim {
namespace stats {

class VulnerabilityTime: public VulnerabilityStat {
protected:

    typedef enum {
        STORE = 0, OVERWRITE_FETCH, END_PROGRAM, MAX
    } safe_reason_t;

    typedef struct {
        engine::cycles_t last;
        engine::cycles_t duration[MAX];
    } address_stats_t;

    typedef struct {
        uint64_t nterms;
        double mean[MAX];
    } average_t;

    // time -> stat address -> stats
    std::vector< std::map<engine::addr_t, average_t> > data_;

    size_t map_size_;
    std::map<engine::addr_t, address_stats_t> memory_map_;
    engine::cycles_t cur_period_, start_period_, end_period_;

    void aggregate(engine::addr_t, engine::cycles_t, double[MAX]);
    void periodic_output(engine::addr_t, address_stats_t&, engine::cycles_t, bool, safe_reason_t);

public:
    template<typename T>
    VulnerabilityTime(const T&, const std::string&, unsigned, engine::cycles_t, engine::addr_t, const std::string&);
    ~VulnerabilityTime();

    void mem_access(engine::cycles_t, sim::logic::coherence::single::Request&);
    void finalize(engine::cycles_t);

};

}
}

#include "VulnerabilityTime-impl.h"

#endif // STATS_VULNERABILITYSPACE_H_
