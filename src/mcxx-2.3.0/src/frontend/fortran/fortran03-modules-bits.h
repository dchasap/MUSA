/* This file has been generated by gen-symbols-attrs.py. */
/* Do not modify it or you'll get what you deserve */
#ifndef FORTRAN03_MODULES_BITS_H
#define FORTRAN03_MODULES_BITS_H

static const char * attr_field_names = "result_var, alias_to, emission_template, anonymous_accessor, intent_kind, in_common, namelist, specific_intrinsic, access, template_parameter_nesting, template_parameter_position, class_type, from_module, from_module_name, in_module, cray_pointer, used_modules, procedure_decl_stmt_proc_interface, linkage_spec, noexception, bitfield_size, bitfield_offset, bitfield_first, bitfield_last, field_offset, simplify_function, bind_info, asm_specification";
static char * symbol_get_attribute_values(sqlite3* handle, scope_entry_t* sym)
{
    const char *format = "%llu, %llu, %llu, %llu, %d, %llu, %llu, %llu, %d, %d, %d, %llu, %llu, %Q, %llu, %llu, %llu, %llu, %Q, %llu, %llu, %llu, %d, %d, %llu, %d, %llu, %llu";

    insert_symbol(handle, symbol_entity_specs_get_result_var(sym));
    insert_symbol(handle, symbol_entity_specs_get_alias_to(sym));
    insert_symbol(handle, symbol_entity_specs_get_emission_template(sym));
    insert_nodecl(handle, symbol_entity_specs_get_anonymous_accessor(sym));
    insert_symbol(handle, symbol_entity_specs_get_in_common(sym));
    insert_symbol(handle, symbol_entity_specs_get_namelist(sym));
    insert_symbol(handle, symbol_entity_specs_get_specific_intrinsic(sym));
    insert_type(handle, symbol_entity_specs_get_class_type(sym));
    insert_symbol(handle, symbol_entity_specs_get_from_module(sym));
    insert_symbol(handle, symbol_entity_specs_get_in_module(sym));
    insert_symbol(handle, symbol_entity_specs_get_cray_pointer(sym));
    insert_symbol(handle, symbol_entity_specs_get_used_modules(sym));
    insert_symbol(handle, symbol_entity_specs_get_procedure_decl_stmt_proc_interface(sym));
    insert_nodecl(handle, symbol_entity_specs_get_noexception(sym));
    insert_nodecl(handle, symbol_entity_specs_get_bitfield_size(sym));
    insert_nodecl(handle, symbol_entity_specs_get_bind_info(sym));
    insert_nodecl(handle, symbol_entity_specs_get_asm_specification(sym));

    char * result = sqlite3_mprintf(format, P2ULL(symbol_entity_specs_get_result_var(sym)), P2ULL(symbol_entity_specs_get_alias_to(sym)), P2ULL(symbol_entity_specs_get_emission_template(sym)), P2ULL(nodecl_get_ast(symbol_entity_specs_get_anonymous_accessor(sym))), (int)symbol_entity_specs_get_intent_kind(sym), P2ULL(symbol_entity_specs_get_in_common(sym)), P2ULL(symbol_entity_specs_get_namelist(sym)), P2ULL(symbol_entity_specs_get_specific_intrinsic(sym)), (int)symbol_entity_specs_get_access(sym), symbol_entity_specs_get_template_parameter_nesting(sym), symbol_entity_specs_get_template_parameter_position(sym), P2ULL(symbol_entity_specs_get_class_type(sym)), P2ULL(symbol_entity_specs_get_from_module(sym)), symbol_entity_specs_get_from_module_name(sym), P2ULL(symbol_entity_specs_get_in_module(sym)), P2ULL(symbol_entity_specs_get_cray_pointer(sym)), P2ULL(symbol_entity_specs_get_used_modules(sym)), P2ULL(symbol_entity_specs_get_procedure_decl_stmt_proc_interface(sym)), symbol_entity_specs_get_linkage_spec(sym), P2ULL(nodecl_get_ast(symbol_entity_specs_get_noexception(sym))), P2ULL(nodecl_get_ast(symbol_entity_specs_get_bitfield_size(sym))), (unsigned long long)symbol_entity_specs_get_bitfield_offset(sym), symbol_entity_specs_get_bitfield_first(sym), symbol_entity_specs_get_bitfield_last(sym), (unsigned long long)symbol_entity_specs_get_field_offset(sym), fortran_simplify_function_get_id(symbol_entity_specs_get_simplify_function(sym)), P2ULL(nodecl_get_ast(symbol_entity_specs_get_bind_info(sym))), P2ULL(nodecl_get_ast(symbol_entity_specs_get_asm_specification(sym))));
    return result;
}
static void insert_extended_attributes(sqlite3* handle, scope_entry_t* sym)
{
{ int i; for (i = 0; i < symbol_entity_specs_get_num_related_symbols(sym); i++) {
insert_extra_attr_symbol(handle, sym, "related_symbols", symbol_entity_specs_get_related_symbols_num(sym, i));
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_friend_candidates(sym); i++) {
insert_extra_attr_symbol(handle, sym, "friend_candidates", symbol_entity_specs_get_friend_candidates_num(sym, i));
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_exceptions(sym); i++) {
insert_extra_attr_type(handle, sym, "exceptions", symbol_entity_specs_get_exceptions_num(sym, i));
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_function_parameter_info(sym); i++) {
function_parameter_info_t function_param = symbol_entity_specs_get_function_parameter_info_num(sym, i);
insert_extra_function_parameter_info(handle, sym, "function_parameter_info", &function_param);
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_parameters(sym); i++) {
{
default_argument_info_t* default_arg = symbol_entity_specs_get_default_argument_info_num(sym, i);
insert_extra_attr_data(handle, sym, "default_argument_info", default_arg, insert_default_argument_info_ptr);
}
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_gcc_attributes(sym); i++) {
{
gcc_attribute_t gcc_attr = symbol_entity_specs_get_gcc_attributes_num(sym, i);
insert_extra_gcc_attr(handle, sym, "gcc_attributes", &gcc_attr);
}
} }
{ int i; for (i = 0; i < symbol_entity_specs_get_num_ms_attributes(sym); i++) {
{
gcc_attribute_t gcc_attr = symbol_entity_specs_get_ms_attributes_num(sym, i);
insert_extra_gcc_attr(handle, sym, "ms_attributes", &gcc_attr);
}
} }
}

static void get_extra_attributes(sqlite3* handle, int ncols, char **values, char **names, sqlite3_uint64 sym_oid, scope_entry_t* sym)
{
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
}
{
int i;
if (query_contains_field(ncols, names, "result_var", &i))
{
   symbol_entity_specs_set_result_var(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "alias_to", &i))
{
   symbol_entity_specs_set_alias_to(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "emission_template", &i))
{
   symbol_entity_specs_set_emission_template(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "anonymous_accessor", &i))
{
   symbol_entity_specs_set_anonymous_accessor(sym, load_nodecl(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "intent_kind", &i))
{
   symbol_entity_specs_set_intent_kind(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "in_common", &i))
{
   symbol_entity_specs_set_in_common(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "namelist", &i))
{
   symbol_entity_specs_set_namelist(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
{
extra_syms_t extra_syms;
memset(&extra_syms, 0, sizeof(extra_syms));
extra_syms.handle = handle;
get_extended_attribute(handle, sym_oid, "related_symbols", &extra_syms, get_extra_syms);
int i;
for (i = 0; i < extra_syms.num_syms; i++)
{
symbol_entity_specs_append_related_symbols(sym, extra_syms.syms[i]);
}
}
}
{
{
extra_syms_t extra_syms;
memset(&extra_syms, 0, sizeof(extra_syms));
extra_syms.handle = handle;
get_extended_attribute(handle, sym_oid, "friend_candidates", &extra_syms, get_extra_syms);
int i;
for (i = 0; i < extra_syms.num_syms; i++)
{
symbol_entity_specs_append_friend_candidates(sym, extra_syms.syms[i]);
}
}
}
{
int i;
if (query_contains_field(ncols, names, "specific_intrinsic", &i))
{
   symbol_entity_specs_set_specific_intrinsic(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "access", &i))
{
   symbol_entity_specs_set_access(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "template_parameter_nesting", &i))
{
   symbol_entity_specs_set_template_parameter_nesting(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "template_parameter_position", &i))
{
   symbol_entity_specs_set_template_parameter_position(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "class_type", &i))
{
   symbol_entity_specs_set_class_type(sym, load_type(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "from_module", &i))
{
   symbol_entity_specs_set_from_module(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "from_module_name", &i))
{
   symbol_entity_specs_set_from_module_name(sym, uniquestr(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "in_module", &i))
{
   symbol_entity_specs_set_in_module(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "cray_pointer", &i))
{
   symbol_entity_specs_set_cray_pointer(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "used_modules", &i))
{
   symbol_entity_specs_set_used_modules(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "procedure_decl_stmt_proc_interface", &i))
{
   symbol_entity_specs_set_procedure_decl_stmt_proc_interface(sym, load_symbol(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "linkage_spec", &i))
{
   symbol_entity_specs_set_linkage_spec(sym, uniquestr(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "noexception", &i))
{
   symbol_entity_specs_set_noexception(sym, load_nodecl(handle, safe_atoull(values[i])));
}
}
{
{
extra_types_t extra_types;
memset(&extra_types, 0, sizeof(extra_types));
extra_types.handle = handle;
get_extended_attribute(handle, sym_oid, "exceptions", &extra_types, get_extra_types);
int i;
for (i = 0; i < extra_types.num_types; i++)
{
symbol_entity_specs_append_exceptions(sym, extra_types.types[i]);
}
}
}
{
{
extra_gcc_attrs_t extra_gcc_attrs;
memset(&extra_gcc_attrs, 0, sizeof(extra_gcc_attrs));
extra_gcc_attrs.handle = handle;
extra_gcc_attrs.symbol = sym;
get_extended_attribute(handle, sym_oid, "function_parameter_info", &extra_gcc_attrs, get_extra_function_parameter_info);
}
}
{
{
extra_default_argument_info_t extra_default_argument_info;
memset(&extra_default_argument_info, 0, sizeof(extra_default_argument_info_t));
extra_default_argument_info.handle = handle;
extra_default_argument_info.symbol = sym;
get_extended_attribute(handle, sym_oid, "default_argument_info", &extra_default_argument_info,                     get_extra_default_argument_info);
}
}
{
int i;
if (query_contains_field(ncols, names, "bitfield_size", &i))
{
   symbol_entity_specs_set_bitfield_size(sym, load_nodecl(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "bitfield_offset", &i))
{
   symbol_entity_specs_set_bitfield_offset(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "bitfield_first", &i))
{
   symbol_entity_specs_set_bitfield_first(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "bitfield_last", &i))
{
   symbol_entity_specs_set_bitfield_last(sym, safe_atoull(values[i]));
}
}
{
int i;
if (query_contains_field(ncols, names, "field_offset", &i))
{
   symbol_entity_specs_set_field_offset(sym, safe_atoull(values[i]));
}
}
{
{
extra_gcc_attrs_t extra_gcc_attrs;
memset(&extra_gcc_attrs, 0, sizeof(extra_gcc_attrs));
extra_gcc_attrs.handle = handle;
extra_gcc_attrs.symbol = sym;
get_extended_attribute(handle, sym_oid, "gcc_attributes", &extra_gcc_attrs, get_extra_gcc_attrs);
}
}
{
{
extra_gcc_attrs_t extra_gcc_attrs;
memset(&extra_gcc_attrs, 0, sizeof(extra_gcc_attrs));
extra_gcc_attrs.handle = handle;
extra_gcc_attrs.symbol = sym;
get_extended_attribute(handle, sym_oid, "ms_attributes", &extra_gcc_attrs, get_extra_gcc_attrs);
}
}
{
int i;
if (query_contains_field(ncols, names, "simplify_function", &i))
{
   int id = safe_atoull(values[i]);
   simplify_function_t fun = fortran_simplify_function_get_ptr(id);
   ERROR_CONDITION(fun == NULL && id != 0, "Invalid identifier %d for simplification function.\nYou may have to rebuild your Fortran modules", id);
   symbol_entity_specs_set_simplify_function(sym, fortran_simplify_function_get_ptr(safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "bind_info", &i))
{
   symbol_entity_specs_set_bind_info(sym, load_nodecl(handle, safe_atoull(values[i])));
}
}
{
int i;
if (query_contains_field(ncols, names, "asm_specification", &i))
{
   symbol_entity_specs_set_asm_specification(sym, load_nodecl(handle, safe_atoull(values[i])));
}
}
}
typedef struct module_packed_bits_tag
{
_Bool is_static:1;
_Bool is_register:1;
_Bool is_extern:1;
_Bool is_thread:1;
_Bool is_thread_local:1;
_Bool is_mutable:1;
_Bool is_export:1;
_Bool is_inline:1;
_Bool is_virtual:1;
_Bool is_pure:1;
_Bool is_builtin:1;
_Bool is_deleted:1;
_Bool is_defaulted:1;
_Bool is_conversion:1;
_Bool is_trivial:1;
_Bool is_constructor:1;
_Bool is_default_constructor:1;
_Bool is_copy_constructor:1;
_Bool is_move_constructor:1;
_Bool is_conversor_constructor:1;
_Bool is_copy_assignment_operator:1;
_Bool is_move_assignment_operator:1;
_Bool is_destructor:1;
_Bool is_explicit:1;
_Bool is_surrogate_function:1;
_Bool is_anonymous_union:1;
_Bool is_member_of_anonymous:1;
_Bool is_user_declared:1;
_Bool is_instantiable:1;
_Bool is_instantiated:1;
_Bool is_template_parameter:1;
_Bool is_member:1;
_Bool is_bitfield:1;
_Bool is_unnamed_bitfield:1;
_Bool is_friend_declared:1;
_Bool any_exception:1;
_Bool is_injected_class_name:1;
_Bool is_unnamed:1;
_Bool is_defined_inside_class_specifier:1;
_Bool is_nested_function:1;
_Bool is_saved_expression:1;
_Bool gcc_extension:1;
_Bool is_result_var:1;
_Bool is_constexpr:1;
_Bool is_override:1;
_Bool is_final:1;
_Bool is_hides_member:1;
_Bool is_global_hidden:1;
_Bool is_implicit_basic_type:1;
_Bool is_allocatable:1;
_Bool is_in_common:1;
_Bool is_in_namelist:1;
_Bool is_optional:1;
_Bool is_target:1;
_Bool is_elemental:1;
_Bool is_recursive:1;
_Bool is_stmt_function:1;
_Bool is_intrinsic_subroutine:1;
_Bool is_intrinsic_function:1;
_Bool is_module_procedure:1;
_Bool is_entry:1;
_Bool is_renamed:1;
_Bool is_cray_pointee:1;
_Bool is_cray_pointer:1;
_Bool is_saved_program_unit:1;
_Bool is_contiguous:1;
_Bool is_procedure_decl_stmt:1;
_Bool is_abstract:1;
} module_packed_bits_t;
static module_packed_bits_t synthesize_packed_bits(scope_entry_t* sym)
{
module_packed_bits_t result;
memset(&result, 0, sizeof(result));
result.is_static = symbol_entity_specs_get_is_static(sym);
result.is_register = symbol_entity_specs_get_is_register(sym);
result.is_extern = symbol_entity_specs_get_is_extern(sym);
result.is_thread = symbol_entity_specs_get_is_thread(sym);
result.is_thread_local = symbol_entity_specs_get_is_thread_local(sym);
result.is_mutable = symbol_entity_specs_get_is_mutable(sym);
result.is_export = symbol_entity_specs_get_is_export(sym);
result.is_inline = symbol_entity_specs_get_is_inline(sym);
result.is_virtual = symbol_entity_specs_get_is_virtual(sym);
result.is_pure = symbol_entity_specs_get_is_pure(sym);
result.is_builtin = symbol_entity_specs_get_is_builtin(sym);
result.is_deleted = symbol_entity_specs_get_is_deleted(sym);
result.is_defaulted = symbol_entity_specs_get_is_defaulted(sym);
result.is_conversion = symbol_entity_specs_get_is_conversion(sym);
result.is_trivial = symbol_entity_specs_get_is_trivial(sym);
result.is_constructor = symbol_entity_specs_get_is_constructor(sym);
result.is_default_constructor = symbol_entity_specs_get_is_default_constructor(sym);
result.is_copy_constructor = symbol_entity_specs_get_is_copy_constructor(sym);
result.is_move_constructor = symbol_entity_specs_get_is_move_constructor(sym);
result.is_conversor_constructor = symbol_entity_specs_get_is_conversor_constructor(sym);
result.is_copy_assignment_operator = symbol_entity_specs_get_is_copy_assignment_operator(sym);
result.is_move_assignment_operator = symbol_entity_specs_get_is_move_assignment_operator(sym);
result.is_destructor = symbol_entity_specs_get_is_destructor(sym);
result.is_explicit = symbol_entity_specs_get_is_explicit(sym);
result.is_surrogate_function = symbol_entity_specs_get_is_surrogate_function(sym);
result.is_anonymous_union = symbol_entity_specs_get_is_anonymous_union(sym);
result.is_member_of_anonymous = symbol_entity_specs_get_is_member_of_anonymous(sym);
result.is_user_declared = symbol_entity_specs_get_is_user_declared(sym);
result.is_instantiable = symbol_entity_specs_get_is_instantiable(sym);
result.is_instantiated = symbol_entity_specs_get_is_instantiated(sym);
result.is_template_parameter = symbol_entity_specs_get_is_template_parameter(sym);
result.is_member = symbol_entity_specs_get_is_member(sym);
result.is_bitfield = symbol_entity_specs_get_is_bitfield(sym);
result.is_unnamed_bitfield = symbol_entity_specs_get_is_unnamed_bitfield(sym);
result.is_friend_declared = symbol_entity_specs_get_is_friend_declared(sym);
result.any_exception = symbol_entity_specs_get_any_exception(sym);
result.is_injected_class_name = symbol_entity_specs_get_is_injected_class_name(sym);
result.is_unnamed = symbol_entity_specs_get_is_unnamed(sym);
result.is_defined_inside_class_specifier = symbol_entity_specs_get_is_defined_inside_class_specifier(sym);
result.is_nested_function = symbol_entity_specs_get_is_nested_function(sym);
result.is_saved_expression = symbol_entity_specs_get_is_saved_expression(sym);
result.gcc_extension = symbol_entity_specs_get_gcc_extension(sym);
result.is_result_var = symbol_entity_specs_get_is_result_var(sym);
result.is_constexpr = symbol_entity_specs_get_is_constexpr(sym);
result.is_override = symbol_entity_specs_get_is_override(sym);
result.is_final = symbol_entity_specs_get_is_final(sym);
result.is_hides_member = symbol_entity_specs_get_is_hides_member(sym);
result.is_global_hidden = symbol_entity_specs_get_is_global_hidden(sym);
result.is_implicit_basic_type = symbol_entity_specs_get_is_implicit_basic_type(sym);
result.is_allocatable = symbol_entity_specs_get_is_allocatable(sym);
result.is_in_common = symbol_entity_specs_get_is_in_common(sym);
result.is_in_namelist = symbol_entity_specs_get_is_in_namelist(sym);
result.is_optional = symbol_entity_specs_get_is_optional(sym);
result.is_target = symbol_entity_specs_get_is_target(sym);
result.is_elemental = symbol_entity_specs_get_is_elemental(sym);
result.is_recursive = symbol_entity_specs_get_is_recursive(sym);
result.is_stmt_function = symbol_entity_specs_get_is_stmt_function(sym);
result.is_intrinsic_subroutine = symbol_entity_specs_get_is_intrinsic_subroutine(sym);
result.is_intrinsic_function = symbol_entity_specs_get_is_intrinsic_function(sym);
result.is_module_procedure = symbol_entity_specs_get_is_module_procedure(sym);
result.is_entry = symbol_entity_specs_get_is_entry(sym);
result.is_renamed = symbol_entity_specs_get_is_renamed(sym);
result.is_cray_pointee = symbol_entity_specs_get_is_cray_pointee(sym);
result.is_cray_pointer = symbol_entity_specs_get_is_cray_pointer(sym);
result.is_saved_program_unit = symbol_entity_specs_get_is_saved_program_unit(sym);
result.is_contiguous = symbol_entity_specs_get_is_contiguous(sym);
result.is_procedure_decl_stmt = symbol_entity_specs_get_is_procedure_decl_stmt(sym);
result.is_abstract = symbol_entity_specs_get_is_abstract(sym);
return result;
}
static void unpack_bits(scope_entry_t *sym, module_packed_bits_t bitpack)
{
symbol_entity_specs_set_is_static(sym, bitpack.is_static);
symbol_entity_specs_set_is_register(sym, bitpack.is_register);
symbol_entity_specs_set_is_extern(sym, bitpack.is_extern);
symbol_entity_specs_set_is_thread(sym, bitpack.is_thread);
symbol_entity_specs_set_is_thread_local(sym, bitpack.is_thread_local);
symbol_entity_specs_set_is_mutable(sym, bitpack.is_mutable);
symbol_entity_specs_set_is_export(sym, bitpack.is_export);
symbol_entity_specs_set_is_inline(sym, bitpack.is_inline);
symbol_entity_specs_set_is_virtual(sym, bitpack.is_virtual);
symbol_entity_specs_set_is_pure(sym, bitpack.is_pure);
symbol_entity_specs_set_is_builtin(sym, bitpack.is_builtin);
symbol_entity_specs_set_is_deleted(sym, bitpack.is_deleted);
symbol_entity_specs_set_is_defaulted(sym, bitpack.is_defaulted);
symbol_entity_specs_set_is_conversion(sym, bitpack.is_conversion);
symbol_entity_specs_set_is_trivial(sym, bitpack.is_trivial);
symbol_entity_specs_set_is_constructor(sym, bitpack.is_constructor);
symbol_entity_specs_set_is_default_constructor(sym, bitpack.is_default_constructor);
symbol_entity_specs_set_is_copy_constructor(sym, bitpack.is_copy_constructor);
symbol_entity_specs_set_is_move_constructor(sym, bitpack.is_move_constructor);
symbol_entity_specs_set_is_conversor_constructor(sym, bitpack.is_conversor_constructor);
symbol_entity_specs_set_is_copy_assignment_operator(sym, bitpack.is_copy_assignment_operator);
symbol_entity_specs_set_is_move_assignment_operator(sym, bitpack.is_move_assignment_operator);
symbol_entity_specs_set_is_destructor(sym, bitpack.is_destructor);
symbol_entity_specs_set_is_explicit(sym, bitpack.is_explicit);
symbol_entity_specs_set_is_surrogate_function(sym, bitpack.is_surrogate_function);
symbol_entity_specs_set_is_anonymous_union(sym, bitpack.is_anonymous_union);
symbol_entity_specs_set_is_member_of_anonymous(sym, bitpack.is_member_of_anonymous);
symbol_entity_specs_set_is_user_declared(sym, bitpack.is_user_declared);
symbol_entity_specs_set_is_instantiable(sym, bitpack.is_instantiable);
symbol_entity_specs_set_is_instantiated(sym, bitpack.is_instantiated);
symbol_entity_specs_set_is_template_parameter(sym, bitpack.is_template_parameter);
symbol_entity_specs_set_is_member(sym, bitpack.is_member);
symbol_entity_specs_set_is_bitfield(sym, bitpack.is_bitfield);
symbol_entity_specs_set_is_unnamed_bitfield(sym, bitpack.is_unnamed_bitfield);
symbol_entity_specs_set_is_friend_declared(sym, bitpack.is_friend_declared);
symbol_entity_specs_set_any_exception(sym, bitpack.any_exception);
symbol_entity_specs_set_is_injected_class_name(sym, bitpack.is_injected_class_name);
symbol_entity_specs_set_is_unnamed(sym, bitpack.is_unnamed);
symbol_entity_specs_set_is_defined_inside_class_specifier(sym, bitpack.is_defined_inside_class_specifier);
symbol_entity_specs_set_is_nested_function(sym, bitpack.is_nested_function);
symbol_entity_specs_set_is_saved_expression(sym, bitpack.is_saved_expression);
symbol_entity_specs_set_gcc_extension(sym, bitpack.gcc_extension);
symbol_entity_specs_set_is_result_var(sym, bitpack.is_result_var);
symbol_entity_specs_set_is_constexpr(sym, bitpack.is_constexpr);
symbol_entity_specs_set_is_override(sym, bitpack.is_override);
symbol_entity_specs_set_is_final(sym, bitpack.is_final);
symbol_entity_specs_set_is_hides_member(sym, bitpack.is_hides_member);
symbol_entity_specs_set_is_global_hidden(sym, bitpack.is_global_hidden);
symbol_entity_specs_set_is_implicit_basic_type(sym, bitpack.is_implicit_basic_type);
symbol_entity_specs_set_is_allocatable(sym, bitpack.is_allocatable);
symbol_entity_specs_set_is_in_common(sym, bitpack.is_in_common);
symbol_entity_specs_set_is_in_namelist(sym, bitpack.is_in_namelist);
symbol_entity_specs_set_is_optional(sym, bitpack.is_optional);
symbol_entity_specs_set_is_target(sym, bitpack.is_target);
symbol_entity_specs_set_is_elemental(sym, bitpack.is_elemental);
symbol_entity_specs_set_is_recursive(sym, bitpack.is_recursive);
symbol_entity_specs_set_is_stmt_function(sym, bitpack.is_stmt_function);
symbol_entity_specs_set_is_intrinsic_subroutine(sym, bitpack.is_intrinsic_subroutine);
symbol_entity_specs_set_is_intrinsic_function(sym, bitpack.is_intrinsic_function);
symbol_entity_specs_set_is_module_procedure(sym, bitpack.is_module_procedure);
symbol_entity_specs_set_is_entry(sym, bitpack.is_entry);
symbol_entity_specs_set_is_renamed(sym, bitpack.is_renamed);
symbol_entity_specs_set_is_cray_pointee(sym, bitpack.is_cray_pointee);
symbol_entity_specs_set_is_cray_pointer(sym, bitpack.is_cray_pointer);
symbol_entity_specs_set_is_saved_program_unit(sym, bitpack.is_saved_program_unit);
symbol_entity_specs_set_is_contiguous(sym, bitpack.is_contiguous);
symbol_entity_specs_set_is_procedure_decl_stmt(sym, bitpack.is_procedure_decl_stmt);
symbol_entity_specs_set_is_abstract(sym, bitpack.is_abstract);
}
#endif // FORTRAN03_MODULES_BITS_H
