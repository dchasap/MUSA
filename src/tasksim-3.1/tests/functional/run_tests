#!/bin/bash

# Setup functions:

define_colors()
{
    if [ "$use_color" = "yes" ]; then
        GREEN="\033[1;32m"
        RED="\033[1;31m"
        BLUE="\033[1;34m"
        YELLOW="\033[1;33m"
        NORMAL="\033[0m"
    else
        GREEN=
        RED=
        BLUE=
        YELLOW=
        NORMAL=
    fi
}

#global counters
pass=0
fail=0
faulty=0


message ()
{
    local n
    if [ "$1" = "-n" ]; then
        shift; n=-n
        buffer="$buffer $*"
    else
        echo -e $buffer "$*" 
        buffer=""
    fi
}

# Run:

check_results() {
    expected_results=$1
    log_file=$2
  
    if [ ! -f $expected_results ]; then
        echo "Expected results $expected_results not found."
        let faulty=$faulty+1
        return 0
    fi
    good=0
    bad=0
  
    while read line; do
        # We do not check comments:
        if [[ $line == "#*" ]] || [[ -z $line ]] ; then
            continue
        fi
        n_seps=$(echo $line | tr -cd : | wc -c)
        let n_items=$n_seps+1
        if [ $n_items -eq 2 ]; then
            # Total cycles : value
            tag=${line%:*}
            expected_value=${line#*:}
            log_line=$(grep "$tag" $log_file)
            log_value=${log_line#*:}
        elif [ $n_items -eq 4 ]; then
            # Value : Counter name : Module name : Module ID
            tag=${line#*:}
            expected_value=${line%%:*}
            log_line=$(grep "$tag" $log_file)
            log_value=${log_line%%:*}
        else
            tag="N/A"
            expected_value=0
            log_value=0
        fi
        if [ $expected_value -eq $log_value ]; then
            let good=$good+1
        else
            let bad=$bad+1
            message "${YELLOW}$tag has wrong value $log_value and $expected_value was expected.${NORMAL}"
        fi
    done <$expected_results
  
    if [ $bad -ne 0 ]; then
        message "${RED}$bad results were erroneous.${NORMAL}"
        return 1
    else
        message "${GREEN}Results check out.${NORMAL}"
        return 0
    fi
}

run_tasksim() {
    current=${PWD##*/}
    configure_file=$1
    echo "Testing ${PWD##*/} with ${configure_file##*/}"
    trace=$(ls *.streaminfo)
    trace_base=${trace%.streaminfo}
    log_file=execution_log_${configure_file#./}.txt
    expected_file=expected_results_${configure_file#./}.txt
    testing_binary=$build_path/src/simulators/tasksim/testing
    $testing_binary $configure_file $trace_base &>$log_file
    result=$?

    if [ $result -eq 0 ]; then
        message "Execution finished without problems, checking results:"
        check_results $expected_file $log_file
        result=$?
        if [ $result -eq 0 ]; then
            let pass=$pass+1
        else 
            let fail=$fail+1
            #let faulty=$faulty+1
        fi
    else 
        message "${RED}Test $current failed.${NORMAL}"
        let fail=$fail+1
    fi
    # Clean the paraver traces
    find . -name "*.prv" -exec rm {} \;
    find . -name "*.pcf" -exec rm {} \;
    find . -name "*.row" -exec rm {} \;
    # Clean the output log
    #rm $log_file
}

run_instrument()
{
    instr_binary=$1
    noninstr_binary=${instr_binary%_instr}
    echo "Runing tracing test for binary ${noninstr_binary##*/}"
    trace_root=${noninstr_binary}.ts.
    tracing_binary=$build_path/src/core/tools/ompss
    ompss_lib=$install_path/lib64/libompss-trace.so
    pin_path=${xed_binary%extras/*}
    params=
    if [ -e params.txt ]; then
        params=$(cat params.txt)
    fi
    if [ ! -e $ompss_lib ]; then
        message "${RED}Could not find the instrumentation library (is creating uppon executing make install).${NORMAL}"
        let faulty=$faulty+1
        return 
    fi

    rm ${trace_root}*
    if [ -z $pin_path ]; then
        echo "pin_path not provided, runing without PIN instrumentation."
        $tracing_binary $noninstr_binary $params &>trace_creation_log.txt
    else 
        PIN_PATH=$pin_path/pin PINTOOL_PATH=$ompss_lib  $tracing_binary $noninstr_binary $params &>trace_creation_log.txt
    fi
    result=$?
    if [  $result -eq 0 ]; then
        let pass=$pass+1
        message "${GREEN}Results check out.${NORMAL}"
    else
        message "${RED}Execution finished with some error.${NORMAL}"
        let fail=$fail+1
    fi
}

run_file()
{
    local file=$1
    case $file in 
        *.ts.conf)
            run_tasksim $file
            ;;
#        *.bs.conf)
#            run_burstsim $file
#            ;;
#        *.sttm.conf)
#            run_sttmramsim $file
#            ;;
#        *.front.conf)
#            run_frontendsim $file
#            ;;
#        *.fast.conf)
#            run_fastmemsim $file
#            ;;
        *_instr)
            run_instrument $file
            ;;
    esac
}

run_dir()
{
    local base=$1

#message "===Entering directory $base==="

    #test subdirs
    local dirs=$(find . -maxdepth 1 -type d -path "./*" | cut -c3- | sort)
    for d in $dirs; do
        cd $d
        run_dir $base/$d
        cd ..
    done

    #run test
    for file in $(find . -maxdepth 1 -type f | sort ); do
        run_file $file
    done
}

# Auxiliar functions

do_help ()
{
   cat <<EOF
$0 [options] [tests]

Options:
-h                  Print this help
-o logfile          Redirect run output to logfile (default=test.log)
-run                run tests (default) 

EOF
   return 0
}

do_run ()
{
    #startup
    declare -r tmpdir=$(mktemp -d)
    export TMPDIR=$tmpdir
    declare -r tmpfile=$(mktemp)
    local old_dir=""

    message "===Running tests==="
   
    #run tests
    if [ "$#" -ge 1 ]; then
        for t in $*; do
            if [ -d $t ]; then
                old_dir=$(pwd)
                cd $t
                run_dir $t
                cd "$old_dir" 
            fi
            if [ -f $t ]; then
                old_dir=$(pwd)
                cd $(dirname $t)
                run_file $(basename $t)
                cd "$old_dir"
            fi
        done
    else
        run_dir .
    fi
   
    #clean-up
    rm -fr $tmpdir

    if [ $fail -eq 0 -a $pass -eq 0 -a $faulty -eq 0 ]; then
        message "No test run. Any files in here? :-)"
    else
        message
        message "===Summary==="
        if [ $fail -eq 0 -a $faulty -eq 0 ]; then
            message "${GREEN}ALL $pass tests passed! Congratulations! :-)${NORMAL}"
        elif [ $fail -eq 0 -a $faulty -ne 0 ]; then
            message "No tests failed, but there are faulty ones :-/"
            message "${GREEN}Pass tests: $pass${NORMAL}"
            message "${YELLOW}Faulty tests: $faulty${NORMAL}"
        else
            message "Some tests failed! :("
            message "${GREEN}Pass tests: $pass${NORMAL}"
            message "${YELLOW}Faulty tests: $faulty${NORMAL}"
            message "${RED}Failed tests: $fail${NORMAL}"
        fi
        message
    fi
    return $fail
}


# ""MAIN""
#default values

declare -r basedir=$(pwd)
export basedir
echo $basedir
logfile="test.log"
mode=run
use_color=yes

#read options

done=
while [ -z $done ]; do
case $1 in
    -h)
        mode=help; shift
        ;;
    -build_path)
        shift
        build_path=$1
        #echo "Build path = $build_path"
        shift
        ;;
    -install_path)
        shift
        install_path=$1
        shift
        ;;
    -xed_binary)
        shift
        xed_binary=$1
        shift
        ;;
    -o)
        shift
        logfile=$1;
        shift
        ;;
    -run) 
        mode=run; shift
        ;;
    *) done=true;;
esac
done

define_colors
do_$mode $*
#env
