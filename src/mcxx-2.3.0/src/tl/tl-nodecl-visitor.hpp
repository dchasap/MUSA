/* Autogenerated file. DO NOT MODIFY. */
/* Changes in nodecl-generator.py or cxx-nodecl.def will overwrite this file */
#ifndef TL_NODECL_VISITOR_HPP
#define TL_NODECL_VISITOR_HPP

#include <tl-objectlist.hpp>
#include <tl-nodecl.hpp>
#include "cxx-utils.h"
#include "mem.h"

namespace Nodecl {

template <typename _Ret>
class BaseNodeclVisitor;
template <>
class BaseNodeclVisitor<void>;

template <typename _Ret>
class BaseNodeclVisitor
{
   public:
     typedef _Ret Ret;
     Ret walk(const NodeclBase&); /* If you override this member function you will be fired */
     virtual Ret visit(const Nodecl::CxxNoexcept &) = 0;
     virtual Ret visit(const Nodecl::CxxEqualInitializer &) = 0;
     virtual Ret visit(const Nodecl::Preincrement &) = 0;
     virtual Ret visit(const Nodecl::ClassMemberAccess &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepInout &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPrefix &) = 0;
     virtual Ret visit(const Nodecl::CxxDef &) = 0;
     virtual Ret visit(const Nodecl::Analysis::InductionVarExpr &) = 0;
     virtual Ret visit(const Nodecl::FunctionCode &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalAnd &) = 0;
     virtual Ret visit(const Nodecl::VectorGreaterThan &) = 0;
     virtual Ret visit(const Nodecl::VectorFmadd &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Phi &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TaskIsTaskwait &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueParenthesized &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueCompoundLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Nontemporal &) = 0;
     virtual Ret visit(const Nodecl::RangeLoopControl &) = 0;
     virtual Ret visit(const Nodecl::VectorDifferent &) = 0;
     virtual Ret visit(const Nodecl::GxxTrait &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd2Not &) = 0;
     virtual Ret visit(const Nodecl::CxxArrowPtrMember &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Overlap &) = 0;
     virtual Ret visit(const Nodecl::ContinueStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxDepFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseShr &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepInPrivate &) = 0;
     virtual Ret visit(const Nodecl::FortranReadStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Distribute &) = 0;
     virtual Ret visit(const Nodecl::IfElseStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ParallelSimdFor &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::For &) = 0;
     virtual Ret visit(const Nodecl::CompoundExpression &) = 0;
     virtual Ret visit(const Nodecl::Power &) = 0;
     virtual Ret visit(const Nodecl::NoexceptImplicitTrue &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskOr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushAtExit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MotionFrom &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::SharedAndAlloca &) = 0;
     virtual Ret visit(const Nodecl::MemberInit &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalNot &) = 0;
     virtual Ret visit(const Nodecl::PragmaClauseArg &) = 0;
     virtual Ret visit(const Nodecl::GccAsmOperand &) = 0;
     virtual Ret visit(const Nodecl::CaseStatement &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomDirective &) = 0;
     virtual Ret visit(const Nodecl::VectorFmminus &) = 0;
     virtual Ret visit(const Nodecl::CxxInitializer &) = 0;
     virtual Ret visit(const Nodecl::Analysis::PlusInfinity &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Private &) = 0;
     virtual Ret visit(const Nodecl::LowerThan &) = 0;
     virtual Ret visit(const Nodecl::CxxMemberInit &) = 0;
     virtual Ret visit(const Nodecl::IntelAssume &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Sections &) = 0;
     virtual Ret visit(const Nodecl::GccBuiltinVaArg &) = 0;
     virtual Ret visit(const Nodecl::FortranForall &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDef &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Implements &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakOut &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Id &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::Dead &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameConversion &) = 0;
     virtual Ret visit(const Nodecl::VectorPrefetch &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdFunction &) = 0;
     virtual Ret visit(const Nodecl::VectorFunctionCode &) = 0;
     virtual Ret visit(const Nodecl::PseudoDestructorName &) = 0;
     virtual Ret visit(const Nodecl::PointerToMember &) = 0;
     virtual Ret visit(const Nodecl::VectorSincos &) = 0;
     virtual Ret visit(const Nodecl::FieldDesignator &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Alloca &) = 0;
     virtual Ret visit(const Nodecl::FortranNotPresent &) = 0;
     virtual Ret visit(const Nodecl::Conversion &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionMinus &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MotionTo &) = 0;
     virtual Ret visit(const Nodecl::Div &) = 0;
     virtual Ret visit(const Nodecl::Minus &) = 0;
     virtual Ret visit(const Nodecl::CxxLambda &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Shutdown &) = 0;
     virtual Ret visit(const Nodecl::ForStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeUnion &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Private &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Unroll &) = 0;
     virtual Ret visit(const Nodecl::Analysis::LiveOut &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierWait &) = 0;
     virtual Ret visit(const Nodecl::Symbol &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionMul &) = 0;
     virtual Ret visit(const Nodecl::Verbatim &) = 0;
     virtual Ret visit(const Nodecl::VectorLoop &) = 0;
     virtual Ret visit(const Nodecl::DoStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushAtEntry &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::If &) = 0;
     virtual Ret visit(const Nodecl::ParenthesizedExpression &) = 0;
     virtual Ret visit(const Nodecl::ErrStatement &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskIsLoop &) = 0;
     virtual Ret visit(const Nodecl::Dummy &) = 0;
     virtual Ret visit(const Nodecl::InPlaceFlag &) = 0;
     virtual Ret visit(const Nodecl::CxxCaptureReference &) = 0;
     virtual Ret visit(const Nodecl::AlignedFlag &) = 0;
     virtual Ret visit(const Nodecl::CxxDepDecltype &) = 0;
     virtual Ret visit(const Nodecl::BitwiseOr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ForAppendix &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomLine &) = 0;
     virtual Ret visit(const Nodecl::BitwiseNot &) = 0;
     virtual Ret visit(const Nodecl::BooleanLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapAlloc &) = 0;
     virtual Ret visit(const Nodecl::MulAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetTaskUndeferred &) = 0;
     virtual Ret visit(const Nodecl::Neg &) = 0;
     virtual Ret visit(const Nodecl::CxxCaptureCopy &) = 0;
     virtual Ret visit(const Nodecl::PreprocessorLine &) = 0;
     virtual Ret visit(const Nodecl::FortranNullifyStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameNested &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TaskReduction &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::Race &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Master &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Unregister &) = 0;
     virtual Ret visit(const Nodecl::VectorSqrt &) = 0;
     virtual Ret visit(const Nodecl::FortranAlternateReturnStatement &) = 0;
     virtual Ret visit(const Nodecl::AddAssignment &) = 0;
     virtual Ret visit(const Nodecl::Analysis::LiveIn &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Shared &) = 0;
     virtual Ret visit(const Nodecl::VectorFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::If &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Wait &) = 0;
     virtual Ret visit(const Nodecl::Analysis::MinusInfinity &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Simd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskwait &) = 0;
     virtual Ret visit(const Nodecl::LogicalNot &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNew &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::VectorLength &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomClause &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Teams &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Defined &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::ShMem &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormImplicit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Atomic &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AssertDecl &) = 0;
     virtual Ret visit(const Nodecl::FortranHollerith &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::PrivateInit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Linear &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepConcurrent &) = 0;
     virtual Ret visit(const Nodecl::FortranOpenStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapFrom &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Chunksize &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::InReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Untied &) = 0;
     virtual Ret visit(const Nodecl::FortranBindC &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitTypeCast &) = 0;
     virtual Ret visit(const Nodecl::VectorSubscript &) = 0;
     virtual Ret visit(const Nodecl::ArithmeticShrAssignment &) = 0;
     virtual Ret visit(const Nodecl::Context &) = 0;
     virtual Ret visit(const Nodecl::VectorAdd &) = 0;
     virtual Ret visit(const Nodecl::GccAsmSpec &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseAnd &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyOut &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentFp &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepCommutative &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ThreadLimit &) = 0;
     virtual Ret visit(const Nodecl::PragmaContext &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskXor &) = 0;
     virtual Ret visit(const Nodecl::EvictFlag &) = 0;
     virtual Ret visit(const Nodecl::FunctionCall &) = 0;
     virtual Ret visit(const Nodecl::ArraySubscript &) = 0;
     virtual Ret visit(const Nodecl::DeleteArray &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseShl &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseOr &) = 0;
     virtual Ret visit(const Nodecl::CxxUsingDecl &) = 0;
     virtual Ret visit(const Nodecl::MultiExpressionIterator &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Threadprivate &) = 0;
     virtual Ret visit(const Nodecl::Plus &) = 0;
     virtual Ret visit(const Nodecl::RelaxedFlag &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdFor &) = 0;
     virtual Ret visit(const Nodecl::ReturnStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInitBraced &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Minimum &) = 0;
     virtual Ret visit(const Nodecl::CxxUsingNamespace &) = 0;
     virtual Ret visit(const Nodecl::CxxAlignas &) = 0;
     virtual Ret visit(const Nodecl::GreaterOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::FortranData &) = 0;
     virtual Ret visit(const Nodecl::VectorRsqrt &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskExpression &) = 0;
     virtual Ret visit(const Nodecl::VectorRcp &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::CombinedWithParallel &) = 0;
     virtual Ret visit(const Nodecl::VectorMinus &) = 0;
     virtual Ret visit(const Nodecl::RangeDiscrete &) = 0;
     virtual Ret visit(const Nodecl::FortranComputedGotoStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOutPointed &) = 0;
     virtual Ret visit(const Nodecl::UnboundedLoopControl &) = 0;
     virtual Ret visit(const Nodecl::TryBlock &) = 0;
     virtual Ret visit(const Nodecl::VectorDiv &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Device &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskIsTaskCall &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Level &) = 0;
     virtual Ret visit(const Nodecl::New &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoMask &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepIn &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Single &) = 0;
     virtual Ret visit(const Nodecl::FortranActualArgument &) = 0;
     virtual Ret visit(const Nodecl::CxxDepTemplateId &) = 0;
     virtual Ret visit(const Nodecl::BitwiseOrAssignment &) = 0;
     virtual Ret visit(const Nodecl::VectorPromotion &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeIntersection &) = 0;
     virtual Ret visit(const Nodecl::VlaWildcard &) = 0;
     virtual Ret visit(const Nodecl::VectorLaneId &) = 0;
     virtual Ret visit(const Nodecl::Concat &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Init &) = 0;
     virtual Ret visit(const Nodecl::CxxClassMemberAccess &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Prefetch &) = 0;
     virtual Ret visit(const Nodecl::ArithmeticShr &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Loop &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormTemplateId &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueBracedImplicit &) = 0;
     virtual Ret visit(const Nodecl::Comma &) = 0;
     virtual Ret visit(const Nodecl::Typeid &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Firstprivate &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd &) = 0;
     virtual Ret visit(const Nodecl::Shaping &) = 0;
     virtual Ret visit(const Nodecl::ObjectInit &) = 0;
     virtual Ret visit(const Nodecl::ModAssignment &) = 0;
     virtual Ret visit(const Nodecl::Equal &) = 0;
     virtual Ret visit(const Nodecl::Offsetof &) = 0;
     virtual Ret visit(const Nodecl::Delete &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::VectorLengthFor &) = 0;
     virtual Ret visit(const Nodecl::CxxPostfixInitializer &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakInout &) = 0;
     virtual Ret visit(const Nodecl::Mod &) = 0;
     virtual Ret visit(const Nodecl::FortranAlternateReturnArgument &) = 0;
     virtual Ret visit(const Nodecl::VectorCast &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::CriticalName &) = 0;
     virtual Ret visit(const Nodecl::Analysis::UpperExposed &) = 0;
     virtual Ret visit(const Nodecl::CxxDepGlobalNameNested &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Kind &) = 0;
     virtual Ret visit(const Nodecl::BitwiseAndAssignment &) = 0;
     virtual Ret visit(const Nodecl::Offset &) = 0;
     virtual Ret visit(const Nodecl::CxxCast &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Undefined &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::NDRange &) = 0;
     virtual Ret visit(const Nodecl::IntegerLiteral &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakCommutative &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionOut &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAssignment &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseXor &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueFortranTypespecArrayConstructor &) = 0;
     virtual Ret visit(const Nodecl::GreaterThan &) = 0;
     virtual Ret visit(const Nodecl::GccAsmDefinition &) = 0;
     virtual Ret visit(const Nodecl::C99FieldDesignator &) = 0;
     virtual Ret visit(const Nodecl::FortranDeallocateStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Auto &) = 0;
     virtual Ret visit(const Nodecl::BitwiseAnd &) = 0;
     virtual Ret visit(const Nodecl::IntelAssumeAligned &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Shared &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseNot &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NumTasks &) = 0;
     virtual Ret visit(const Nodecl::Assignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Workshare &) = 0;
     virtual Ret visit(const Nodecl::VectorConditionalExpression &) = 0;
     virtual Ret visit(const Nodecl::SwitchStatement &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionAdd &) = 0;
     virtual Ret visit(const Nodecl::FortranUse &) = 0;
     virtual Ret visit(const Nodecl::FloatingLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Reduction &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Release &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DeclareTarget &) = 0;
     virtual Ret visit(const Nodecl::Analysis::InductionVariable &) = 0;
     virtual Ret visit(const Nodecl::VectorNeg &) = 0;
     virtual Ret visit(const Nodecl::StringLiteral &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueBracedTypecast &) = 0;
     virtual Ret visit(const Nodecl::FortranStopStatement &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Comm &) = 0;
     virtual Ret visit(const Nodecl::CxxSizeof &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Name &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Mergeable &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Firstprivate &) = 0;
     virtual Ret visit(const Nodecl::VectorLoad &) = 0;
     virtual Ret visit(const Nodecl::LoopControl &) = 0;
     virtual Ret visit(const Nodecl::LogicalAnd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Section &) = 0;
     virtual Ret visit(const Nodecl::CxxAlignof &) = 0;
     virtual Ret visit(const Nodecl::VectorFabs &) = 0;
     virtual Ret visit(const Nodecl::GotoStatement &) = 0;
     virtual Ret visit(const Nodecl::Postdecrement &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalOr &) = 0;
     virtual Ret visit(const Nodecl::FortranBozLiteral &) = 0;
     virtual Ret visit(const Nodecl::CudaKernelCall &) = 0;
     virtual Ret visit(const Nodecl::Analysis::EmptyRange &) = 0;
     virtual Ret visit(const Nodecl::DefaultArgument &) = 0;
     virtual Ret visit(const Nodecl::FortranWriteStatement &) = 0;
     virtual Ret visit(const Nodecl::VectorMul &) = 0;
     virtual Ret visit(const Nodecl::CxxArrow &) = 0;
     virtual Ret visit(const Nodecl::VectorLowerThan &) = 0;
     virtual Ret visit(const Nodecl::VectorConversion &) = 0;
     virtual Ret visit(const Nodecl::VectorAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FunctionTaskParsingContext &) = 0;
     virtual Ret visit(const Nodecl::VectorMod &) = 0;
     virtual Ret visit(const Nodecl::VectorAlignRight &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Schedule &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Register &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd1Not &) = 0;
     virtual Ret visit(const Nodecl::DefaultStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ReductionItem &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeSub &) = 0;
     virtual Ret visit(const Nodecl::FortranLabelAssignStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierFull &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Priority &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TargetDeclaration &) = 0;
     virtual Ret visit(const Nodecl::AlignmentInfo &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskgroup &) = 0;
     virtual Ret visit(const Nodecl::FortranCloseStatement &) = 0;
     virtual Ret visit(const Nodecl::IteratorLoopControl &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentP &) = 0;
     virtual Ret visit(const Nodecl::Sizeof &) = 0;
     virtual Ret visit(const Nodecl::UpcSyncStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Grainsize &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapTo &) = 0;
     virtual Ret visit(const Nodecl::VectorEqual &) = 0;
     virtual Ret visit(const Nodecl::UnknownPragma &) = 0;
     virtual Ret visit(const Nodecl::C99IndexDesignator &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Data &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetUpdate &) = 0;
     virtual Ret visit(const Nodecl::CxxValuePack &) = 0;
     virtual Ret visit(const Nodecl::ComplexLiteral &) = 0;
     virtual Ret visit(const Nodecl::LabeledStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranImpliedDo &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NumTeams &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Range &) = 0;
     virtual Ret visit(const Nodecl::Alignof &) = 0;
     virtual Ret visit(const Nodecl::VectorLowerOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Final &) = 0;
     virtual Ret visit(const Nodecl::Add &) = 0;
     virtual Ret visit(const Nodecl::VectorArithmeticShr &) = 0;
     virtual Ret visit(const Nodecl::FortranIoStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOut &) = 0;
     virtual Ret visit(const Nodecl::RealPart &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::File &) = 0;
     virtual Ret visit(const Nodecl::ExpressionStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxForRanged &) = 0;
     virtual Ret visit(const Nodecl::Different &) = 0;
     virtual Ret visit(const Nodecl::NontemporalFlag &) = 0;
     virtual Ret visit(const Nodecl::FortranArithmeticIfStatement &) = 0;
     virtual Ret visit(const Nodecl::GxxBuiltinAddressof &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Cost &) = 0;
     virtual Ret visit(const Nodecl::CxxParseLater &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierAtEnd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FirstLastprivate &) = 0;
     virtual Ret visit(const Nodecl::Unknown &) = 0;
     virtual Ret visit(const Nodecl::VectorGreaterOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyIn &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Critical &) = 0;
     virtual Ret visit(const Nodecl::VirtualFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::FortranEntryStatement &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskCall &) = 0;
     virtual Ret visit(const Nodecl::Text &) = 0;
     virtual Ret visit(const Nodecl::Throw &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDecl &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Assert &) = 0;
     virtual Ret visit(const Nodecl::FortranAllocateStatement &) = 0;
     virtual Ret visit(const Nodecl::OnTopFlag &) = 0;
     virtual Ret visit(const Nodecl::BitwiseXor &) = 0;
     virtual Ret visit(const Nodecl::FortranAssignedGotoStatement &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomDeclaration &) = 0;
     virtual Ret visit(const Nodecl::CxxSizeofPack &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepOut &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachDefExpr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapToFrom &) = 0;
     virtual Ret visit(const Nodecl::Predecrement &) = 0;
     virtual Ret visit(const Nodecl::VectorLiteral &) = 0;
     virtual Ret visit(const Nodecl::FortranPrintStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPostfix &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Store &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShr &) = 0;
     virtual Ret visit(const Nodecl::Type &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskConversion &) = 0;
     virtual Ret visit(const Nodecl::CatchHandler &) = 0;
     virtual Ret visit(const Nodecl::CxxParenthesizedInitializer &) = 0;
     virtual Ret visit(const Nodecl::Postincrement &) = 0;
     virtual Ret visit(const Nodecl::ConditionalExpression &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::WeakReduction &) = 0;
     virtual Ret visit(const Nodecl::CxxValuePackExpanded &) = 0;
     virtual Ret visit(const Nodecl::Reference &) = 0;
     virtual Ret visit(const Nodecl::LowerOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakIn &) = 0;
     virtual Ret visit(const Nodecl::CxxDotPtrMember &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskloop &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Maximum &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameSimple &) = 0;
     virtual Ret visit(const Nodecl::CompoundStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranPauseStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranUseOnly &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Aligned &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Mask &) = 0;
     virtual Ret visit(const Nodecl::BreakStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierSignal &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoPrefetch &) = 0;
     virtual Ret visit(const Nodecl::CxxBracedInitializer &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetData &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Suitable &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Uniform &) = 0;
     virtual Ret visit(const Nodecl::FortranEquivalence &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Onto &) = 0;
     virtual Ret visit(const Nodecl::AsmDefinition &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Target &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Dead &) = 0;
     virtual Ret visit(const Nodecl::CxxDecl &) = 0;
     virtual Ret visit(const Nodecl::ImagPart &) = 0;
     virtual Ret visit(const Nodecl::ImplicitMemberInit &) = 0;
     virtual Ret visit(const Nodecl::FortranIoSpec &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskNot &) = 0;
     virtual Ret visit(const Nodecl::MultiExpression &) = 0;
     virtual Ret visit(const Nodecl::LogicalOr &) = 0;
     virtual Ret visit(const Nodecl::TopLevel &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentIn &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShl &) = 0;
     virtual Ret visit(const Nodecl::TemplateFunctionCode &) = 0;
     virtual Ret visit(const Nodecl::FortranWhere &) = 0;
     virtual Ret visit(const Nodecl::CxxStaticAssert &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Lastprivate &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::UnrollAndJam &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskLabel &) = 0;
     virtual Ret visit(const Nodecl::VectorGather &) = 0;
     virtual Ret visit(const Nodecl::FortranWherePair &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentInPointed &) = 0;
     virtual Ret visit(const Nodecl::Dereference &) = 0;
     virtual Ret visit(const Nodecl::VectorScatter &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DistSchedule &) = 0;
     virtual Ret visit(const Nodecl::WhileStatement &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShrAssignment &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormBinaryInfix &) = 0;
     virtual Ret visit(const Nodecl::ErrExpr &) = 0;
     virtual Ret visit(const Nodecl::Range &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Parallel &) = 0;
     virtual Ret visit(const Nodecl::Mul &) = 0;
     virtual Ret visit(const Nodecl::CxxImplicitInstantiation &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionIn &) = 0;
     virtual Ret visit(const Nodecl::C99DesignatedInitializer &) = 0;
     virtual Ret visit(const Nodecl::SourceComment &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShlAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskyield &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepReduction &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyInout &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::AutoStorage &) = 0;
     virtual Ret visit(const Nodecl::HasBeenDefinedFlag &) = 0;
     virtual Ret visit(const Nodecl::EmptyStatement &) = 0;
     virtual Ret visit(const Nodecl::StructuredValue &) = 0;
     virtual Ret visit(const Nodecl::VectorStore &) = 0;
     virtual Ret visit(const Nodecl::MaskLiteral &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Load &) = 0;
     virtual Ret visit(const Nodecl::BitwiseXorAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoFlush &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Target &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushMemory &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Task &) = 0;
     virtual Ret visit(const Nodecl::DivAssignment &) = 0;
     virtual Ret visit(const Nodecl::MinusAssignment &) = 0;
     virtual Ret visit(const Nodecl::IndexDesignator &) = 0;
   virtual _Ret join_list(TL::ObjectList<_Ret> &) = 0;
   virtual ~BaseNodeclVisitor() { }
};
template <>
class BaseNodeclVisitor<void>
{
   public:
     typedef void Ret;
     Ret walk(const NodeclBase&); /* If you override this member function you will be fired */
     virtual Ret visit(const Nodecl::CxxNoexcept &) = 0;
     virtual Ret visit(const Nodecl::CxxEqualInitializer &) = 0;
     virtual Ret visit(const Nodecl::Preincrement &) = 0;
     virtual Ret visit(const Nodecl::ClassMemberAccess &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepInout &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPrefix &) = 0;
     virtual Ret visit(const Nodecl::CxxDef &) = 0;
     virtual Ret visit(const Nodecl::Analysis::InductionVarExpr &) = 0;
     virtual Ret visit(const Nodecl::FunctionCode &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalAnd &) = 0;
     virtual Ret visit(const Nodecl::VectorGreaterThan &) = 0;
     virtual Ret visit(const Nodecl::VectorFmadd &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Phi &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TaskIsTaskwait &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueParenthesized &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueCompoundLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Nontemporal &) = 0;
     virtual Ret visit(const Nodecl::RangeLoopControl &) = 0;
     virtual Ret visit(const Nodecl::VectorDifferent &) = 0;
     virtual Ret visit(const Nodecl::GxxTrait &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd2Not &) = 0;
     virtual Ret visit(const Nodecl::CxxArrowPtrMember &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Overlap &) = 0;
     virtual Ret visit(const Nodecl::ContinueStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxDepFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseShr &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepInPrivate &) = 0;
     virtual Ret visit(const Nodecl::FortranReadStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Distribute &) = 0;
     virtual Ret visit(const Nodecl::IfElseStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ParallelSimdFor &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::For &) = 0;
     virtual Ret visit(const Nodecl::CompoundExpression &) = 0;
     virtual Ret visit(const Nodecl::Power &) = 0;
     virtual Ret visit(const Nodecl::NoexceptImplicitTrue &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskOr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushAtExit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MotionFrom &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::SharedAndAlloca &) = 0;
     virtual Ret visit(const Nodecl::MemberInit &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalNot &) = 0;
     virtual Ret visit(const Nodecl::PragmaClauseArg &) = 0;
     virtual Ret visit(const Nodecl::GccAsmOperand &) = 0;
     virtual Ret visit(const Nodecl::CaseStatement &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomDirective &) = 0;
     virtual Ret visit(const Nodecl::VectorFmminus &) = 0;
     virtual Ret visit(const Nodecl::CxxInitializer &) = 0;
     virtual Ret visit(const Nodecl::Analysis::PlusInfinity &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Private &) = 0;
     virtual Ret visit(const Nodecl::LowerThan &) = 0;
     virtual Ret visit(const Nodecl::CxxMemberInit &) = 0;
     virtual Ret visit(const Nodecl::IntelAssume &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Sections &) = 0;
     virtual Ret visit(const Nodecl::GccBuiltinVaArg &) = 0;
     virtual Ret visit(const Nodecl::FortranForall &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDef &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Implements &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakOut &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Id &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::Dead &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameConversion &) = 0;
     virtual Ret visit(const Nodecl::VectorPrefetch &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdFunction &) = 0;
     virtual Ret visit(const Nodecl::VectorFunctionCode &) = 0;
     virtual Ret visit(const Nodecl::PseudoDestructorName &) = 0;
     virtual Ret visit(const Nodecl::PointerToMember &) = 0;
     virtual Ret visit(const Nodecl::VectorSincos &) = 0;
     virtual Ret visit(const Nodecl::FieldDesignator &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Alloca &) = 0;
     virtual Ret visit(const Nodecl::FortranNotPresent &) = 0;
     virtual Ret visit(const Nodecl::Conversion &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionMinus &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MotionTo &) = 0;
     virtual Ret visit(const Nodecl::Div &) = 0;
     virtual Ret visit(const Nodecl::Minus &) = 0;
     virtual Ret visit(const Nodecl::CxxLambda &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Shutdown &) = 0;
     virtual Ret visit(const Nodecl::ForStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeUnion &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Private &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Unroll &) = 0;
     virtual Ret visit(const Nodecl::Analysis::LiveOut &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierWait &) = 0;
     virtual Ret visit(const Nodecl::Symbol &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionMul &) = 0;
     virtual Ret visit(const Nodecl::Verbatim &) = 0;
     virtual Ret visit(const Nodecl::VectorLoop &) = 0;
     virtual Ret visit(const Nodecl::DoStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushAtEntry &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::If &) = 0;
     virtual Ret visit(const Nodecl::ParenthesizedExpression &) = 0;
     virtual Ret visit(const Nodecl::ErrStatement &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskIsLoop &) = 0;
     virtual Ret visit(const Nodecl::Dummy &) = 0;
     virtual Ret visit(const Nodecl::InPlaceFlag &) = 0;
     virtual Ret visit(const Nodecl::CxxCaptureReference &) = 0;
     virtual Ret visit(const Nodecl::AlignedFlag &) = 0;
     virtual Ret visit(const Nodecl::CxxDepDecltype &) = 0;
     virtual Ret visit(const Nodecl::BitwiseOr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ForAppendix &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomLine &) = 0;
     virtual Ret visit(const Nodecl::BitwiseNot &) = 0;
     virtual Ret visit(const Nodecl::BooleanLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapAlloc &) = 0;
     virtual Ret visit(const Nodecl::MulAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetTaskUndeferred &) = 0;
     virtual Ret visit(const Nodecl::Neg &) = 0;
     virtual Ret visit(const Nodecl::CxxCaptureCopy &) = 0;
     virtual Ret visit(const Nodecl::PreprocessorLine &) = 0;
     virtual Ret visit(const Nodecl::FortranNullifyStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameNested &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TaskReduction &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::Race &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Master &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Unregister &) = 0;
     virtual Ret visit(const Nodecl::VectorSqrt &) = 0;
     virtual Ret visit(const Nodecl::FortranAlternateReturnStatement &) = 0;
     virtual Ret visit(const Nodecl::AddAssignment &) = 0;
     virtual Ret visit(const Nodecl::Analysis::LiveIn &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Shared &) = 0;
     virtual Ret visit(const Nodecl::VectorFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::If &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Wait &) = 0;
     virtual Ret visit(const Nodecl::Analysis::MinusInfinity &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Simd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskwait &) = 0;
     virtual Ret visit(const Nodecl::LogicalNot &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNew &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::VectorLength &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomClause &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Teams &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Defined &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::ShMem &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormImplicit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Atomic &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AssertDecl &) = 0;
     virtual Ret visit(const Nodecl::FortranHollerith &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::PrivateInit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Linear &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepConcurrent &) = 0;
     virtual Ret visit(const Nodecl::FortranOpenStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapFrom &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Chunksize &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::InReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Untied &) = 0;
     virtual Ret visit(const Nodecl::FortranBindC &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitTypeCast &) = 0;
     virtual Ret visit(const Nodecl::VectorSubscript &) = 0;
     virtual Ret visit(const Nodecl::ArithmeticShrAssignment &) = 0;
     virtual Ret visit(const Nodecl::Context &) = 0;
     virtual Ret visit(const Nodecl::VectorAdd &) = 0;
     virtual Ret visit(const Nodecl::GccAsmSpec &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseAnd &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyOut &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentFp &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepCommutative &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ThreadLimit &) = 0;
     virtual Ret visit(const Nodecl::PragmaContext &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskXor &) = 0;
     virtual Ret visit(const Nodecl::EvictFlag &) = 0;
     virtual Ret visit(const Nodecl::FunctionCall &) = 0;
     virtual Ret visit(const Nodecl::ArraySubscript &) = 0;
     virtual Ret visit(const Nodecl::DeleteArray &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseShl &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseOr &) = 0;
     virtual Ret visit(const Nodecl::CxxUsingDecl &) = 0;
     virtual Ret visit(const Nodecl::MultiExpressionIterator &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Threadprivate &) = 0;
     virtual Ret visit(const Nodecl::Plus &) = 0;
     virtual Ret visit(const Nodecl::RelaxedFlag &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdFor &) = 0;
     virtual Ret visit(const Nodecl::ReturnStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInitBraced &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Minimum &) = 0;
     virtual Ret visit(const Nodecl::CxxUsingNamespace &) = 0;
     virtual Ret visit(const Nodecl::CxxAlignas &) = 0;
     virtual Ret visit(const Nodecl::GreaterOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::FortranData &) = 0;
     virtual Ret visit(const Nodecl::VectorRsqrt &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskExpression &) = 0;
     virtual Ret visit(const Nodecl::VectorRcp &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::CombinedWithParallel &) = 0;
     virtual Ret visit(const Nodecl::VectorMinus &) = 0;
     virtual Ret visit(const Nodecl::RangeDiscrete &) = 0;
     virtual Ret visit(const Nodecl::FortranComputedGotoStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOutPointed &) = 0;
     virtual Ret visit(const Nodecl::UnboundedLoopControl &) = 0;
     virtual Ret visit(const Nodecl::TryBlock &) = 0;
     virtual Ret visit(const Nodecl::VectorDiv &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Device &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskIsTaskCall &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Level &) = 0;
     virtual Ret visit(const Nodecl::New &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoMask &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepIn &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Single &) = 0;
     virtual Ret visit(const Nodecl::FortranActualArgument &) = 0;
     virtual Ret visit(const Nodecl::CxxDepTemplateId &) = 0;
     virtual Ret visit(const Nodecl::BitwiseOrAssignment &) = 0;
     virtual Ret visit(const Nodecl::VectorPromotion &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeIntersection &) = 0;
     virtual Ret visit(const Nodecl::VlaWildcard &) = 0;
     virtual Ret visit(const Nodecl::VectorLaneId &) = 0;
     virtual Ret visit(const Nodecl::Concat &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Init &) = 0;
     virtual Ret visit(const Nodecl::CxxClassMemberAccess &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Prefetch &) = 0;
     virtual Ret visit(const Nodecl::ArithmeticShr &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Loop &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormTemplateId &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueBracedImplicit &) = 0;
     virtual Ret visit(const Nodecl::Comma &) = 0;
     virtual Ret visit(const Nodecl::Typeid &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Firstprivate &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd &) = 0;
     virtual Ret visit(const Nodecl::Shaping &) = 0;
     virtual Ret visit(const Nodecl::ObjectInit &) = 0;
     virtual Ret visit(const Nodecl::ModAssignment &) = 0;
     virtual Ret visit(const Nodecl::Equal &) = 0;
     virtual Ret visit(const Nodecl::Offsetof &) = 0;
     virtual Ret visit(const Nodecl::Delete &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::VectorLengthFor &) = 0;
     virtual Ret visit(const Nodecl::CxxPostfixInitializer &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakInout &) = 0;
     virtual Ret visit(const Nodecl::Mod &) = 0;
     virtual Ret visit(const Nodecl::FortranAlternateReturnArgument &) = 0;
     virtual Ret visit(const Nodecl::VectorCast &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::CriticalName &) = 0;
     virtual Ret visit(const Nodecl::Analysis::UpperExposed &) = 0;
     virtual Ret visit(const Nodecl::CxxDepGlobalNameNested &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Kind &) = 0;
     virtual Ret visit(const Nodecl::BitwiseAndAssignment &) = 0;
     virtual Ret visit(const Nodecl::Offset &) = 0;
     virtual Ret visit(const Nodecl::CxxCast &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Undefined &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::NDRange &) = 0;
     virtual Ret visit(const Nodecl::IntegerLiteral &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakCommutative &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionOut &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAssignment &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseXor &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueFortranTypespecArrayConstructor &) = 0;
     virtual Ret visit(const Nodecl::GreaterThan &) = 0;
     virtual Ret visit(const Nodecl::GccAsmDefinition &) = 0;
     virtual Ret visit(const Nodecl::C99FieldDesignator &) = 0;
     virtual Ret visit(const Nodecl::FortranDeallocateStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Auto &) = 0;
     virtual Ret visit(const Nodecl::BitwiseAnd &) = 0;
     virtual Ret visit(const Nodecl::IntelAssumeAligned &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Shared &) = 0;
     virtual Ret visit(const Nodecl::VectorBitwiseNot &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NumTasks &) = 0;
     virtual Ret visit(const Nodecl::Assignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Workshare &) = 0;
     virtual Ret visit(const Nodecl::VectorConditionalExpression &) = 0;
     virtual Ret visit(const Nodecl::SwitchStatement &) = 0;
     virtual Ret visit(const Nodecl::VectorReductionAdd &) = 0;
     virtual Ret visit(const Nodecl::FortranUse &) = 0;
     virtual Ret visit(const Nodecl::FloatingLiteral &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Reduction &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Release &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DeclareTarget &) = 0;
     virtual Ret visit(const Nodecl::Analysis::InductionVariable &) = 0;
     virtual Ret visit(const Nodecl::VectorNeg &) = 0;
     virtual Ret visit(const Nodecl::StringLiteral &) = 0;
     virtual Ret visit(const Nodecl::StructuredValueBracedTypecast &) = 0;
     virtual Ret visit(const Nodecl::FortranStopStatement &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Comm &) = 0;
     virtual Ret visit(const Nodecl::CxxSizeof &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Name &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Mergeable &) = 0;
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Firstprivate &) = 0;
     virtual Ret visit(const Nodecl::VectorLoad &) = 0;
     virtual Ret visit(const Nodecl::LoopControl &) = 0;
     virtual Ret visit(const Nodecl::LogicalAnd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Section &) = 0;
     virtual Ret visit(const Nodecl::CxxAlignof &) = 0;
     virtual Ret visit(const Nodecl::VectorFabs &) = 0;
     virtual Ret visit(const Nodecl::GotoStatement &) = 0;
     virtual Ret visit(const Nodecl::Postdecrement &) = 0;
     virtual Ret visit(const Nodecl::VectorLogicalOr &) = 0;
     virtual Ret visit(const Nodecl::FortranBozLiteral &) = 0;
     virtual Ret visit(const Nodecl::CudaKernelCall &) = 0;
     virtual Ret visit(const Nodecl::Analysis::EmptyRange &) = 0;
     virtual Ret visit(const Nodecl::DefaultArgument &) = 0;
     virtual Ret visit(const Nodecl::FortranWriteStatement &) = 0;
     virtual Ret visit(const Nodecl::VectorMul &) = 0;
     virtual Ret visit(const Nodecl::CxxArrow &) = 0;
     virtual Ret visit(const Nodecl::VectorLowerThan &) = 0;
     virtual Ret visit(const Nodecl::VectorConversion &) = 0;
     virtual Ret visit(const Nodecl::VectorAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FunctionTaskParsingContext &) = 0;
     virtual Ret visit(const Nodecl::VectorMod &) = 0;
     virtual Ret visit(const Nodecl::VectorAlignRight &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Schedule &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Register &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskAnd1Not &) = 0;
     virtual Ret visit(const Nodecl::DefaultStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::ReductionItem &) = 0;
     virtual Ret visit(const Nodecl::Analysis::RangeSub &) = 0;
     virtual Ret visit(const Nodecl::FortranLabelAssignStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierFull &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInit &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Priority &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TargetDeclaration &) = 0;
     virtual Ret visit(const Nodecl::AlignmentInfo &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::SimdReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskgroup &) = 0;
     virtual Ret visit(const Nodecl::FortranCloseStatement &) = 0;
     virtual Ret visit(const Nodecl::IteratorLoopControl &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentP &) = 0;
     virtual Ret visit(const Nodecl::Sizeof &) = 0;
     virtual Ret visit(const Nodecl::UpcSyncStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Grainsize &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapTo &) = 0;
     virtual Ret visit(const Nodecl::VectorEqual &) = 0;
     virtual Ret visit(const Nodecl::UnknownPragma &) = 0;
     virtual Ret visit(const Nodecl::C99IndexDesignator &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Data &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetUpdate &) = 0;
     virtual Ret visit(const Nodecl::CxxValuePack &) = 0;
     virtual Ret visit(const Nodecl::ComplexLiteral &) = 0;
     virtual Ret visit(const Nodecl::LabeledStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranImpliedDo &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakReduction &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NumTeams &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Range &) = 0;
     virtual Ret visit(const Nodecl::Alignof &) = 0;
     virtual Ret visit(const Nodecl::VectorLowerOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Final &) = 0;
     virtual Ret visit(const Nodecl::Add &) = 0;
     virtual Ret visit(const Nodecl::VectorArithmeticShr &) = 0;
     virtual Ret visit(const Nodecl::FortranIoStatement &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOut &) = 0;
     virtual Ret visit(const Nodecl::RealPart &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::File &) = 0;
     virtual Ret visit(const Nodecl::ExpressionStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxForRanged &) = 0;
     virtual Ret visit(const Nodecl::Different &) = 0;
     virtual Ret visit(const Nodecl::NontemporalFlag &) = 0;
     virtual Ret visit(const Nodecl::FortranArithmeticIfStatement &) = 0;
     virtual Ret visit(const Nodecl::GxxBuiltinAddressof &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Cost &) = 0;
     virtual Ret visit(const Nodecl::CxxParseLater &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierAtEnd &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FirstLastprivate &) = 0;
     virtual Ret visit(const Nodecl::Unknown &) = 0;
     virtual Ret visit(const Nodecl::VectorGreaterOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyIn &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Critical &) = 0;
     virtual Ret visit(const Nodecl::VirtualFunctionCall &) = 0;
     virtual Ret visit(const Nodecl::FortranEntryStatement &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskCall &) = 0;
     virtual Ret visit(const Nodecl::Text &) = 0;
     virtual Ret visit(const Nodecl::Throw &) = 0;
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDecl &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Assert &) = 0;
     virtual Ret visit(const Nodecl::FortranAllocateStatement &) = 0;
     virtual Ret visit(const Nodecl::OnTopFlag &) = 0;
     virtual Ret visit(const Nodecl::BitwiseXor &) = 0;
     virtual Ret visit(const Nodecl::FortranAssignedGotoStatement &) = 0;
     virtual Ret visit(const Nodecl::PragmaCustomDeclaration &) = 0;
     virtual Ret visit(const Nodecl::CxxSizeofPack &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DepOut &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachDefExpr &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::MapToFrom &) = 0;
     virtual Ret visit(const Nodecl::Predecrement &) = 0;
     virtual Ret visit(const Nodecl::VectorLiteral &) = 0;
     virtual Ret visit(const Nodecl::FortranPrintStatement &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPostfix &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Store &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShr &) = 0;
     virtual Ret visit(const Nodecl::Type &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskConversion &) = 0;
     virtual Ret visit(const Nodecl::CatchHandler &) = 0;
     virtual Ret visit(const Nodecl::CxxParenthesizedInitializer &) = 0;
     virtual Ret visit(const Nodecl::Postincrement &) = 0;
     virtual Ret visit(const Nodecl::ConditionalExpression &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::WeakReduction &) = 0;
     virtual Ret visit(const Nodecl::CxxValuePackExpanded &) = 0;
     virtual Ret visit(const Nodecl::Reference &) = 0;
     virtual Ret visit(const Nodecl::LowerOrEqualThan &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepWeakIn &) = 0;
     virtual Ret visit(const Nodecl::CxxDotPtrMember &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskloop &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Maximum &) = 0;
     virtual Ret visit(const Nodecl::CxxDepNameSimple &) = 0;
     virtual Ret visit(const Nodecl::CompoundStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranPauseStatement &) = 0;
     virtual Ret visit(const Nodecl::FortranUseOnly &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Aligned &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Mask &) = 0;
     virtual Ret visit(const Nodecl::BreakStatement &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::BarrierSignal &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoPrefetch &) = 0;
     virtual Ret visit(const Nodecl::CxxBracedInitializer &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::TargetData &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Suitable &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Uniform &) = 0;
     virtual Ret visit(const Nodecl::FortranEquivalence &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Onto &) = 0;
     virtual Ret visit(const Nodecl::AsmDefinition &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Target &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Dead &) = 0;
     virtual Ret visit(const Nodecl::CxxDecl &) = 0;
     virtual Ret visit(const Nodecl::ImagPart &) = 0;
     virtual Ret visit(const Nodecl::ImplicitMemberInit &) = 0;
     virtual Ret visit(const Nodecl::FortranIoSpec &) = 0;
     virtual Ret visit(const Nodecl::VectorMaskNot &) = 0;
     virtual Ret visit(const Nodecl::MultiExpression &) = 0;
     virtual Ret visit(const Nodecl::LogicalOr &) = 0;
     virtual Ret visit(const Nodecl::TopLevel &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentIn &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShl &) = 0;
     virtual Ret visit(const Nodecl::TemplateFunctionCode &) = 0;
     virtual Ret visit(const Nodecl::FortranWhere &) = 0;
     virtual Ret visit(const Nodecl::CxxStaticAssert &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Lastprivate &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::UnrollAndJam &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::TaskLabel &) = 0;
     virtual Ret visit(const Nodecl::VectorGather &) = 0;
     virtual Ret visit(const Nodecl::FortranWherePair &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentInPointed &) = 0;
     virtual Ret visit(const Nodecl::Dereference &) = 0;
     virtual Ret visit(const Nodecl::VectorScatter &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::DistSchedule &) = 0;
     virtual Ret visit(const Nodecl::WhileStatement &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShrAssignment &) = 0;
     virtual Ret visit(const Nodecl::CxxFunctionFormBinaryInfix &) = 0;
     virtual Ret visit(const Nodecl::ErrExpr &) = 0;
     virtual Ret visit(const Nodecl::Range &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Parallel &) = 0;
     virtual Ret visit(const Nodecl::Mul &) = 0;
     virtual Ret visit(const Nodecl::CxxImplicitInstantiation &) = 0;
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionIn &) = 0;
     virtual Ret visit(const Nodecl::C99DesignatedInitializer &) = 0;
     virtual Ret visit(const Nodecl::SourceComment &) = 0;
     virtual Ret visit(const Nodecl::BitwiseShlAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Taskyield &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::DepReduction &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::CopyInout &) = 0;
     virtual Ret visit(const Nodecl::Analysis::Correctness::AutoStorage &) = 0;
     virtual Ret visit(const Nodecl::HasBeenDefinedFlag &) = 0;
     virtual Ret visit(const Nodecl::EmptyStatement &) = 0;
     virtual Ret visit(const Nodecl::StructuredValue &) = 0;
     virtual Ret visit(const Nodecl::VectorStore &) = 0;
     virtual Ret visit(const Nodecl::MaskLiteral &) = 0;
     virtual Ret visit(const Nodecl::Checkpoint::Load &) = 0;
     virtual Ret visit(const Nodecl::BitwiseXorAssignment &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::NoFlush &) = 0;
     virtual Ret visit(const Nodecl::OmpSs::Target &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::FlushMemory &) = 0;
     virtual Ret visit(const Nodecl::OpenMP::Task &) = 0;
     virtual Ret visit(const Nodecl::DivAssignment &) = 0;
     virtual Ret visit(const Nodecl::MinusAssignment &) = 0;
     virtual Ret visit(const Nodecl::IndexDesignator &) = 0;
   virtual ~BaseNodeclVisitor() { }
};
template <typename _Ret>
class UnhandledNodeclVisitor : public BaseNodeclVisitor<_Ret>
{
   public:
     typedef typename BaseNodeclVisitor<_Ret>::Ret Ret;
   virtual Ret unhandled_node(const Nodecl::NodeclBase &) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxNoexcept & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxEqualInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Preincrement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ClassMemberAccess & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::DepInout & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPrefix & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDef & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::InductionVarExpr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FunctionCode & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLogicalAnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorGreaterThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorFmadd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Phi & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::TaskIsTaskwait & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValueParenthesized & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValueCompoundLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Nontemporal & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::RangeLoopControl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorDifferent & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GxxTrait & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskAnd2Not & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxArrowPtrMember & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Overlap & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ContinueStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepFunctionCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseShr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepInPrivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranReadStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Distribute & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IfElseStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::ParallelSimdFor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::For & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CompoundExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Power & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::NoexceptImplicitTrue & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskOr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtExit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MotionFrom & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::SharedAndAlloca & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MemberInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLogicalNot & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaClauseArg & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GccAsmOperand & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CaseStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaCustomDirective & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorFmminus & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::PlusInfinity & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Private & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LowerThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxMemberInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IntelAssume & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Sections & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GccBuiltinVaArg & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranForall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDef & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Implements & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Id & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Dead & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepNameConversion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorPrefetch & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::SimdFunction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorFunctionCode & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PseudoDestructorName & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PointerToMember & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorSincos & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FieldDesignator & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Alloca & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranNotPresent & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Conversion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorReductionMinus & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MotionTo & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Div & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Minus & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxLambda & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Shutdown & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ForStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::RangeUnion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Private & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Unroll & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::LiveOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierWait & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Symbol & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorReductionMul & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Verbatim & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLoop & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::DoStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtEntry & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::If & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ParenthesizedExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ErrStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsLoop & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Dummy & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::InPlaceFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxCaptureReference & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::AlignedFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepDecltype & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseOr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::ForAppendix & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaCustomLine & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseNot & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BooleanLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MapAlloc & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MulAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::TargetTaskUndeferred & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Neg & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxCaptureCopy & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PreprocessorLine & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranNullifyStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepNameNested & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::TaskReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Race & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Master & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Unregister & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorSqrt & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranAlternateReturnStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::AddAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::LiveIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Shared & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorFunctionCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::If & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Wait & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::MinusInfinity & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Simd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Taskwait & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LogicalNot & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepNew & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::VectorLength & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaCustomClause & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Teams & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Defined & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::ShMem & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormImplicit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Atomic & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::AssertDecl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranHollerith & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::PrivateInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Linear & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepConcurrent & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranOpenStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MapFrom & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Chunksize & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::InReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Untied & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranBindC & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxExplicitTypeCast & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorSubscript & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ArithmeticShrAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Context & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorAdd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GccAsmSpec & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseAnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::CopyOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentFp & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepCommutative & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::ThreadLimit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaContext & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskXor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::EvictFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FunctionCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ArraySubscript & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::DeleteArray & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseShl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseOr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxUsingDecl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MultiExpressionIterator & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Threadprivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Plus & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::RelaxedFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::SimdFor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ReturnStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInitBraced & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Minimum & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxUsingNamespace & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxAlignas & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GreaterOrEqualThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranData & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorRsqrt & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TaskExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorRcp & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::CombinedWithParallel & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMinus & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::RangeDiscrete & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranComputedGotoStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::UnboundedLoopControl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::TryBlock & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorDiv & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Device & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsTaskCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Level & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::New & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::NoMask & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::DepIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Single & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranActualArgument & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepTemplateId & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseOrAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorPromotion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::RangeIntersection & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VlaWildcard & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLaneId & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Concat & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Init & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxClassMemberAccess & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Prefetch & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ArithmeticShr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Loop & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormTemplateId & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValueBracedImplicit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Comma & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Typeid & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Firstprivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskAnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Shaping & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ObjectInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ModAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Equal & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Offsetof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Delete & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::VectorLengthFor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxPostfixInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakInout & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Mod & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranAlternateReturnArgument & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorCast & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::CriticalName & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::UpperExposed & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepGlobalNameNested & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Kind & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseAndAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Offset & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxCast & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Undefined & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::NDRange & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IntegerLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakCommutative & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseXor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GreaterThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GccAsmDefinition & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::C99FieldDesignator & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranDeallocateStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Auto & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseAnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IntelAssumeAligned & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Shared & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorBitwiseNot & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::NumTasks & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Assignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Workshare & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorConditionalExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::SwitchStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorReductionAdd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranUse & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FloatingLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Reduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Release & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::DeclareTarget & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::InductionVariable & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorNeg & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StringLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValueBracedTypecast & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranStopStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Comm & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxSizeof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Name & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Mergeable & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Firstprivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLoad & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LoopControl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LogicalAnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Section & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxAlignof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorFabs & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GotoStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Postdecrement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLogicalOr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranBozLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CudaKernelCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::EmptyRange & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::DefaultArgument & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranWriteStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMul & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxArrow & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLowerThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorConversion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::FunctionTaskParsingContext & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMod & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorAlignRight & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Schedule & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Register & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskAnd1Not & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::DefaultStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::ReductionItem & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::RangeSub & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranLabelAssignStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierFull & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Priority & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TargetDeclaration & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::AlignmentInfo & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::SimdReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Taskgroup & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranCloseStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IteratorLoopControl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentP & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Sizeof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::UpcSyncStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Grainsize & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaCustomStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MapTo & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorEqual & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::UnknownPragma & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::C99IndexDesignator & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Data & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::TargetUpdate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxValuePack & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ComplexLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LabeledStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranImpliedDo & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::NumTeams & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Range & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Alignof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLowerOrEqualThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Final & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Add & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorArithmeticShr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranIoStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::RealPart & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::File & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ExpressionStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxForRanged & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Different & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::NontemporalFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranArithmeticIfStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::GxxBuiltinAddressof & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Cost & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxParseLater & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierAtEnd & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::FirstLastprivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Unknown & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorGreaterOrEqualThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::CopyIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Critical & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VirtualFunctionCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranEntryStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TaskCall & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Text & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Throw & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDecl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Assert & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranAllocateStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OnTopFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseXor & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranAssignedGotoStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::PragmaCustomDeclaration & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxSizeofPack & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::DepOut & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::ReachDefExpr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::MapToFrom & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Predecrement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranPrintStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPostfix & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Store & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseShr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Type & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskConversion & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CatchHandler & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxParenthesizedInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Postincrement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ConditionalExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::WeakReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxValuePackExpanded & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Reference & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LowerOrEqualThan & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDotPtrMember & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Taskloop & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Maximum & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDepNameSimple & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CompoundStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranPauseStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranUseOnly & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Aligned & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Mask & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BreakStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierSignal & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::NoPrefetch & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxBracedInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::TargetData & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Suitable & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Uniform & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranEquivalence & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Onto & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::AsmDefinition & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Target & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Dead & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxDecl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ImagPart & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ImplicitMemberInit & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranIoSpec & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorMaskNot & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MultiExpression & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::LogicalOr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::TopLevel & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseShl & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::TemplateFunctionCode & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranWhere & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxStaticAssert & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Lastprivate & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::UnrollAndJam & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::TaskLabel & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorGather & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::FortranWherePair & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentInPointed & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Dereference & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorScatter & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::DistSchedule & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::WhileStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseShrAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxFunctionFormBinaryInfix & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::ErrExpr & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Range & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Parallel & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Mul & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::CxxImplicitInstantiation & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionIn & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::C99DesignatedInitializer & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::SourceComment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseShlAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Taskyield & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::DepReduction & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::CopyInout & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::AutoStorage & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::HasBeenDefinedFlag & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::EmptyStatement & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::StructuredValue & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::VectorStore & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MaskLiteral & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::Checkpoint::Load & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::BitwiseXorAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::NoFlush & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OmpSs::Target & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::FlushMemory & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::OpenMP::Task & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::DivAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::MinusAssignment & n) { return this->unhandled_node(n); }
     virtual Ret visit(const Nodecl::IndexDesignator & n) { return this->unhandled_node(n); }
   virtual ~UnhandledNodeclVisitor() { }
};
template <typename _Ret>
class NodeclVisitor : public UnhandledNodeclVisitor<_Ret>
{
   public:
     typedef typename UnhandledNodeclVisitor<_Ret>::Ret Ret;
};
template <typename _Ret>
class NodeclVisitor<TL::ObjectList<_Ret> > : public UnhandledNodeclVisitor<TL::ObjectList<_Ret> >
{
   public:
     typedef typename UnhandledNodeclVisitor<TL::ObjectList<_Ret> >::Ret Ret;
     TL::ObjectList<_Ret> join_list(TL::ObjectList<TL::ObjectList<_Ret> > &list)
     {
TL::ObjectList<_Ret> result;
for (typename TL::ObjectList<TL::ObjectList<_Ret> >::iterator it = list.begin(); it != list.end(); it++)
{
TL::ObjectList<_Ret> &o_list(*it);
result.append(o_list);
}
return result;
     }
};
template <>
class NodeclVisitor<Nodecl::NodeclBase> : public UnhandledNodeclVisitor<Nodecl::NodeclBase>
{
   public:
     // Only GCC 4.6 can compile this typedef
     // typedef typename UnhandledNodeclVisitor<Nodecl::NodeclBase>::Ret Ret;
     virtual Nodecl::NodeclBase join_list(TL::ObjectList<Nodecl::NodeclBase> &list)
     {
         return Nodecl::List::make(list);
     }
};
template <typename _Ret>
class ExhaustiveVisitor : public NodeclVisitor<_Ret>
{
public:
     typedef typename NodeclVisitor<_Ret>::Ret Ret;
     virtual Ret visit_pre(const Nodecl::StructuredValueParenthesized & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValueParenthesized & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValueParenthesized & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueBracedTypecast & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValueBracedTypecast & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValueBracedTypecast & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueBracedImplicit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValueBracedImplicit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValueBracedImplicit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueCompoundLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValueCompoundLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValueCompoundLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepTemplateId & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepTemplateId & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepTemplateId & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameConversion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepNameConversion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepNameConversion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->walk(n.get_conversion_type()));
        values.append(this->walk(n.get_literal_conversion()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepDecltype & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepDecltype & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepDecltype & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Text & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Text & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Text & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CudaKernelCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CudaKernelCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CudaKernelCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_kernel_config()));
        values.append(this->walk(n.get_function_call()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomDirective & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaCustomDirective & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaCustomDirective & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pragma_line()));
        values.append(this->walk(n.get_context_of_decl()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaContext & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaContext & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaContext & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Range & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Range & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Range & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lower()));
        values.append(this->walk(n.get_upper()));
        values.append(this->walk(n.get_stride()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Sections & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Sections & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Sections & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_sections()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Master & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Master & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Master & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomLine & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaCustomLine & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaCustomLine & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_parameters()));
        values.append(this->walk(n.get_clauses()));
        values.append(this->walk(n.get_end_clauses()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GccBuiltinVaArg & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GccBuiltinVaArg & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GccBuiltinVaArg & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->walk(n.get_va_type()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Critical & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Critical & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Critical & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaCustomStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaCustomStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pragma_line()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Loop & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Loop & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Loop & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_loop()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::TopLevel & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::TopLevel & n) { return Ret(); }
     virtual Ret visit(const Nodecl::TopLevel & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_top_level()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IntelAssumeAligned & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IntelAssumeAligned & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IntelAssumeAligned & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pointer()));
        values.append(this->walk(n.get_alignment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IntelAssume & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IntelAssume & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IntelAssume & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_assumed()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Register & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Register & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Register & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_registered_set()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Unregister & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Unregister & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Unregister & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_unregistered_set()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdFor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdFor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::SimdFor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_openmp_for()));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Phi & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Phi & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Phi & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeUnion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::RangeUnion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::RangeUnion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeIntersection & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::RangeIntersection & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::RangeIntersection & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeSub & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::RangeSub & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::RangeSub & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::EmptyRange & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::EmptyRange & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::EmptyRange & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::MinusInfinity & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::MinusInfinity & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::MinusInfinity & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::PlusInfinity & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::PlusInfinity & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::PlusInfinity & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Minimum & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Minimum & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Minimum & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Maximum & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Maximum & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Maximum & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StringLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StringLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StringLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Schedule & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Schedule & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Schedule & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_chunk()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DistSchedule & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::DistSchedule & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::DistSchedule & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_chunk()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TargetDeclaration & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TargetDeclaration & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TargetDeclaration & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_devices()));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmDefinition & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GccAsmDefinition & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GccAsmDefinition & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_operands0()));
        values.append(this->walk(n.get_operands1()));
        values.append(this->walk(n.get_operands2()));
        values.append(this->walk(n.get_specs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskwait & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskwait & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Taskwait & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskgroup & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskgroup & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Taskgroup & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushMemory & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushMemory & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::FlushMemory & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierFull & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierFull & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierFull & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierSignal & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierSignal & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierSignal & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierWait & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierWait & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierWait & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ParallelSimdFor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::ParallelSimdFor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::ParallelSimdFor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomDeclaration & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaCustomDeclaration & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaCustomDeclaration & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pragma_line()));
        values.append(this->walk(n.get_nested_pragma()));
        values.append(this->walk(n.get_context_of_decl()));
        values.append(this->walk(n.get_context_of_parameters()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LoopControl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LoopControl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LoopControl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->walk(n.get_cond()));
        values.append(this->walk(n.get_next()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::UnboundedLoopControl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::UnboundedLoopControl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::UnboundedLoopControl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Symbol & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Symbol & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Symbol & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranIoSpec & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranIoSpec & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranIoSpec & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_value()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Single & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Single & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Single & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::AlignedFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::AlignedFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::AlignedFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::AlignmentInfo & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::AlignmentInfo & n) { return Ret(); }
     virtual Ret visit(const Nodecl::AlignmentInfo & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::InPlaceFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::InPlaceFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::InPlaceFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OnTopFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OnTopFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OnTopFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::EvictFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::EvictFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::EvictFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::RelaxedFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::RelaxedFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::RelaxedFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::NontemporalFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::NontemporalFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::NontemporalFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::HasBeenDefinedFlag & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::HasBeenDefinedFlag & n) { return Ret(); }
     virtual Ret visit(const Nodecl::HasBeenDefinedFlag & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FunctionCode & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FunctionCode & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FunctionCode & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->walk(n.get_initializers()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TaskCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_call()));
        values.append(this->walk(n.get_site_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskyield & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskyield & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Taskyield & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Workshare & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Workshare & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Workshare & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaClauseArg & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaClauseArg & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaClauseArg & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdFunction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdFunction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::SimdFunction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MemberInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MemberInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MemberInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ImplicitMemberInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ImplicitMemberInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ImplicitMemberInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Atomic & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Atomic & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Atomic & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxClassMemberAccess & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxClassMemberAccess & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxClassMemberAccess & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_member()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxArrow & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxArrow & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxArrow & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_member()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDotPtrMember & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDotPtrMember & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDotPtrMember & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_ptr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxArrowPtrMember & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxArrowPtrMember & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxArrowPtrMember & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_ptr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxSizeof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxSizeof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxSizeof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxSizeofPack & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxSizeofPack & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxSizeofPack & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxAlignof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxAlignof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxAlignof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxPostfixInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxPostfixInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxPostfixInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_postfix()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxCast & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxCast & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxCast & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitTypeCast & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxExplicitTypeCast & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxExplicitTypeCast & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init_list()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepFunctionCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepFunctionCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepFunctionCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_called()));
        values.append(this->walk(n.get_arguments()));
        values.append(this->walk(n.get_alternate_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNew & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepNew & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepNew & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->walk(n.get_init_real_type()));
        values.append(this->walk(n.get_placement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxNoexcept & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxNoexcept & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxNoexcept & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxLambda & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxLambda & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxLambda & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_explicit_captures()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxAlignas & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxAlignas & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxAlignas & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_values()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValue & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::StructuredValue & n) { return Ret(); }
     virtual Ret visit(const Nodecl::StructuredValue & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->walk(n.get_form()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranData & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranData & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranData & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_objects()));
        values.append(this->walk(n.get_values()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranEquivalence & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranEquivalence & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranEquivalence & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_first()));
        values.append(this->walk(n.get_second()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranBozLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranBozLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranBozLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranBindC & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranBindC & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranBindC & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranHollerith & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranHollerith & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranHollerith & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranUse & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranUse & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranUse & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_module()));
        values.append(this->walk(n.get_renamed_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranUseOnly & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranUseOnly & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranUseOnly & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_module()));
        values.append(this->walk(n.get_only_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Simd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Simd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Simd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranActualArgument & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranActualArgument & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranActualArgument & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_argument()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranNotPresent & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranNotPresent & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranNotPresent & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushAtEntry & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushAtEntry & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtEntry & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushAtExit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushAtExit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtExit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoFlush & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::NoFlush & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::NoFlush & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::DefaultArgument & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::DefaultArgument & n) { return Ret(); }
     virtual Ret visit(const Nodecl::DefaultArgument & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_argument()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxMemberInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxMemberInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxMemberInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->walk(n.get_initializer()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MultiExpressionIterator & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MultiExpressionIterator & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MultiExpressionIterator & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_range()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Section & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Section & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Section & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CompoundStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CompoundStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CompoundStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->walk(n.get_finally()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::EmptyStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::EmptyStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::EmptyStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ExpressionStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ExpressionStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ExpressionStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::DoStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::DoStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::DoStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_condition()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::WhileStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::WhileStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::WhileStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_loop_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ForStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ForStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ForStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_loop_header()));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_loop_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IfElseStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IfElseStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IfElseStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->walk(n.get_then()));
        values.append(this->walk(n.get_else()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LabeledStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LabeledStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LabeledStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::SwitchStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::SwitchStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::SwitchStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_switch()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::DefaultStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::DefaultStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::DefaultStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CaseStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CaseStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CaseStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_case()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BreakStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BreakStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BreakStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_construct_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ContinueStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ContinueStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ContinueStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_construct_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GotoStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GotoStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GotoStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ReturnStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ReturnStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ReturnStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_value()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ErrStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ErrStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ErrStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ObjectInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ObjectInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ObjectInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmSpec & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GccAsmSpec & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GccAsmSpec & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Context & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Context & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Context & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_in_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Parallel & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Parallel & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Parallel & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_num_replicas()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FunctionCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FunctionCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FunctionCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_called()));
        values.append(this->walk(n.get_arguments()));
        values.append(this->walk(n.get_alternate_name()));
        values.append(this->walk(n.get_function_form()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ArraySubscript & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ArraySubscript & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ArraySubscript & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_subscripted()));
        values.append(this->walk(n.get_subscripts()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ClassMemberAccess & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ClassMemberAccess & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ClassMemberAccess & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_member()));
        values.append(this->walk(n.get_member_literal()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Plus & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Plus & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Plus & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Neg & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Neg & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Neg & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Mul & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Mul & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Mul & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Power & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Power & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Power & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Div & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Div & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Div & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Mod & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Mod & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Mod & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Add & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Add & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Add & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Minus & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Minus & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Minus & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Concat & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Concat & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Concat & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Equal & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Equal & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Equal & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Different & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Different & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Different & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LowerThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LowerThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LowerThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LowerOrEqualThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LowerOrEqualThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LowerOrEqualThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GreaterThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GreaterThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GreaterThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GreaterOrEqualThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GreaterOrEqualThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GreaterOrEqualThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LogicalNot & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LogicalNot & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LogicalNot & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LogicalAnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LogicalAnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LogicalAnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::LogicalOr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::LogicalOr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::LogicalOr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseNot & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseNot & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseNot & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseAnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseAnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseAnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseOr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseOr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseOr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseXor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseXor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseXor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseShl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseShl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ArithmeticShr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ArithmeticShr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ArithmeticShr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseShr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseShr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Assignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Assignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Assignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ParenthesizedExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ParenthesizedExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ParenthesizedExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Dereference & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Dereference & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Dereference & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CompoundExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CompoundExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CompoundExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorSubscript & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorSubscript & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorSubscript & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_subscripted()));
        values.append(this->walk(n.get_subscript()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorAdd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorAdd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorAdd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorFmadd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorFmadd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorFmadd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_first_op()));
        values.append(this->walk(n.get_second_op()));
        values.append(this->walk(n.get_third_op()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMinus & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMinus & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMinus & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorFmminus & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorFmminus & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorFmminus & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_first_mul_op()));
        values.append(this->walk(n.get_second_mul_op()));
        values.append(this->walk(n.get_minus_op()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMul & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMul & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMul & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorDiv & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorDiv & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorDiv & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorRcp & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorRcp & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorRcp & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMod & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMod & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMod & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorNeg & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorNeg & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorNeg & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorSqrt & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorSqrt & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorSqrt & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorRsqrt & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorRsqrt & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorRsqrt & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionAdd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorReductionAdd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorReductionAdd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_vector_src()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionMinus & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorReductionMinus & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorReductionMinus & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_vector_src()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionMul & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorReductionMul & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorReductionMul & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_vector_src()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorEqual & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorEqual & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorEqual & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorDifferent & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorDifferent & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorDifferent & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLowerThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLowerThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLowerThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLowerOrEqualThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLowerOrEqualThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLowerOrEqualThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorGreaterThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorGreaterThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorGreaterThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorGreaterOrEqualThan & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorGreaterOrEqualThan & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorGreaterOrEqualThan & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalNot & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLogicalNot & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLogicalNot & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalAnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLogicalAnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLogicalAnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalOr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLogicalOr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLogicalOr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseNot & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseNot & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseNot & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseAnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseAnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseAnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseOr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseOr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseOr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseXor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseXor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseXor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseShl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseShl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseShl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorArithmeticShr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorArithmeticShr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorArithmeticShr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseShr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorBitwiseShr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorBitwiseShr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorAlignRight & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorAlignRight & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorAlignRight & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_left_vector()));
        values.append(this->walk(n.get_right_vector()));
        values.append(this->walk(n.get_num_elements()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->walk(n.get_has_been_defined()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorStore & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorStore & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorStore & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->walk(n.get_flags()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorScatter & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorScatter & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorScatter & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_base()));
        values.append(this->walk(n.get_strides()));
        values.append(this->walk(n.get_source()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLoad & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLoad & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLoad & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->walk(n.get_flags()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorGather & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorGather & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorGather & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_base()));
        values.append(this->walk(n.get_strides()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorPromotion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorPromotion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorPromotion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorPrefetch & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorPrefetch & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorPrefetch & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_address()));
        values.append(this->walk(n.get_prefetch_kind()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_scalar_values()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLaneId & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLaneId & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLaneId & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorConversion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorConversion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorConversion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorCast & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorCast & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorCast & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorFunctionCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorFunctionCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorFunctionCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_function_call()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorFabs & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorFabs & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorFabs & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_argument()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorSincos & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorSincos & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorSincos & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_source()));
        values.append(this->walk(n.get_sin_pointer()));
        values.append(this->walk(n.get_cos_pointer()));
        values.append(this->walk(n.get_mask()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskConversion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskConversion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskConversion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskNot & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskNot & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskNot & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskAnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskOr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskOr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskOr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskXor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskXor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskXor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd1Not & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd1Not & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskAnd1Not & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd2Not & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd2Not & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorMaskAnd2Not & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorLoop & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorLoop & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorLoop & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_peeling()));
        values.append(this->walk(n.get_main_loop()));
        values.append(this->walk(n.get_epilog()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::NoexceptImplicitTrue & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::NoexceptImplicitTrue & n) { return Ret(); }
     virtual Ret visit(const Nodecl::NoexceptImplicitTrue & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ErrExpr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ErrExpr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ErrExpr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Conversion & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Conversion & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Conversion & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nest()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Dummy & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Dummy & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Dummy & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MultiExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MultiExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MultiExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_iterators()));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Unknown & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Unknown & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Unknown & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranAlternateReturnArgument & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranAlternateReturnArgument & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranAlternateReturnArgument & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::RangeDiscrete & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::RangeDiscrete & n) { return Ret(); }
     virtual Ret visit(const Nodecl::RangeDiscrete & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_discrete_seq()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranWherePair & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranWherePair & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranWherePair & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_mask()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GxxTrait & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GxxTrait & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GxxTrait & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::InductionVarExpr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::InductionVarExpr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::InductionVarExpr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_variable()));
        values.append(this->walk(n.get_lower()));
        values.append(this->walk(n.get_upper()));
        values.append(this->walk(n.get_stride()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::CombinedWithParallel & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::CombinedWithParallel & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::CombinedWithParallel & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FunctionTaskParsingContext & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::FunctionTaskParsingContext & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::FunctionTaskParsingContext & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TaskExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_join_task()));
        values.append(this->walk(n.get_task_calls()));
        values.append(this->walk(n.get_sequential_code()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NumTasks & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::NumTasks & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::NumTasks & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_num_tasks()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Grainsize & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Grainsize & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Grainsize & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_grainsize()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Chunksize & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Chunksize & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Chunksize & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_chunksize()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ConditionalExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ConditionalExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ConditionalExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->walk(n.get_true()));
        values.append(this->walk(n.get_false()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Reference & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Reference & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Reference & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Comma & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Comma & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Comma & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Throw & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Throw & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Throw & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VirtualFunctionCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VirtualFunctionCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VirtualFunctionCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_called()));
        values.append(this->walk(n.get_arguments()));
        values.append(this->walk(n.get_function_form()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MulAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MulAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MulAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::DivAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::DivAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::DivAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::AddAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::AddAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::AddAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MinusAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MinusAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MinusAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShlAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseShlAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseShlAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShrAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseShrAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseShrAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ArithmeticShrAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ArithmeticShrAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ArithmeticShrAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseAndAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseAndAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseAndAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseOrAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseOrAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseOrAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseXorAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BitwiseXorAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BitwiseXorAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ModAssignment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ModAssignment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ModAssignment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_lhs()));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Preincrement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Preincrement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Preincrement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Postincrement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Postincrement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Postincrement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Predecrement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Predecrement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Predecrement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Postdecrement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Postdecrement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Postdecrement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Sizeof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Sizeof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Sizeof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_size_type()));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Alignof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Alignof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Alignof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_align_type()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Offset & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Offset & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Offset & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_base()));
        values.append(this->walk(n.get_offset()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Typeid & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Typeid & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Typeid & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_arg()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::New & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::New & n) { return Ret(); }
     virtual Ret visit(const Nodecl::New & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->walk(n.get_init_real_type()));
        values.append(this->walk(n.get_placement()));
        values.append(this->walk(n.get_alloc_func()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Delete & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Delete & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Delete & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::DeleteArray & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::DeleteArray & n) { return Ret(); }
     virtual Ret visit(const Nodecl::DeleteArray & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PointerToMember & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PointerToMember & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PointerToMember & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::RealPart & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::RealPart & n) { return Ret(); }
     virtual Ret visit(const Nodecl::RealPart & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ImagPart & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ImagPart & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ImagPart & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_rhs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Offsetof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Offsetof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Offsetof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_offset_type()));
        values.append(this->walk(n.get_designator()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Shaping & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Shaping & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Shaping & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_postfix()));
        values.append(this->walk(n.get_shape()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PseudoDestructorName & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PseudoDestructorName & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PseudoDestructorName & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_accessed()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorConditionalExpression & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorConditionalExpression & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorConditionalExpression & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->walk(n.get_true()));
        values.append(this->walk(n.get_false()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VlaWildcard & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VlaWildcard & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VlaWildcard & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GxxBuiltinAddressof & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GxxBuiltinAddressof & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GxxBuiltinAddressof & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmOperand & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::GccAsmOperand & n) { return Ret(); }
     virtual Ret visit(const Nodecl::GccAsmOperand & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_identifier()));
        values.append(this->walk(n.get_constraint()));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Assert & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Assert & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Assert & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IntegerLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IntegerLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IntegerLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FloatingLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FloatingLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FloatingLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::ComplexLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::ComplexLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::ComplexLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::BooleanLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::BooleanLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::BooleanLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::DepIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::DepIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::DepOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::DepOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepInout & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::DepInout & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::DepInout & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepConcurrent & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepConcurrent & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepConcurrent & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepCommutative & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepCommutative & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepCommutative & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepInPrivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepInPrivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepInPrivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakInout & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakInout & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakInout & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakCommutative & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakCommutative & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakCommutative & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Type & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Type & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Type & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomClause & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PragmaCustomClause & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PragmaCustomClause & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_arguments()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDecl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDecl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDecl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDef & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDef & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDef & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitInstantiationDef & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxExplicitInstantiationDef & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDef & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_declarator_name()));
        values.append(this->walk(n.get_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitInstantiationDecl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxExplicitInstantiationDecl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDecl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_declarator_name()));
        values.append(this->walk(n.get_context()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxUsingNamespace & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxUsingNamespace & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxUsingNamespace & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->walk(n.get_used_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxUsingDecl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxUsingDecl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxUsingDecl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_context()));
        values.append(this->walk(n.get_used_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxParseLater & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxParseLater & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxParseLater & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxImplicitInstantiation & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxImplicitInstantiation & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxImplicitInstantiation & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::TemplateFunctionCode & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::TemplateFunctionCode & n) { return Ret(); }
     virtual Ret visit(const Nodecl::TemplateFunctionCode & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statements()));
        values.append(this->walk(n.get_initializers()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Verbatim & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Verbatim & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Verbatim & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranImpliedDo & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranImpliedDo & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranImpliedDo & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->walk(n.get_range()));
        values.append(this->walk(n.get_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Alloca & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Alloca & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Alloca & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::SharedAndAlloca & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::SharedAndAlloca & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::SharedAndAlloca & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::WeakReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::WeakReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::WeakReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Cost & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Cost & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Cost & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_cost()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskLabel & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskLabel & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TaskLabel & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::TryBlock & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::TryBlock & n) { return Ret(); }
     virtual Ret visit(const Nodecl::TryBlock & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_statement()));
        values.append(this->walk(n.get_catch_handlers()));
        values.append(this->walk(n.get_any()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxForRanged & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxForRanged & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxForRanged & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_range()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CatchHandler & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CatchHandler & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CatchHandler & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxStaticAssert & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxStaticAssert & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxStaticAssert & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_predicate()));
        values.append(this->walk(n.get_message()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Aligned & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Aligned & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Aligned & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_aligned_expressions()));
        values.append(this->walk(n.get_alignment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::VectorLength & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::VectorLength & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::VectorLength & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_vector_length()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::VectorLengthFor & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::VectorLengthFor & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::VectorLengthFor & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Uniform & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Uniform & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Uniform & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_uniform_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Linear & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Linear & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Linear & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_linear_expressions()));
        values.append(this->walk(n.get_step()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Suitable & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Suitable & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Suitable & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_suitable_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Overlap & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Overlap & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Overlap & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_overlap_expressions()));
        values.append(this->walk(n.get_min_group_loads()));
        values.append(this->walk(n.get_max_group_registers()));
        values.append(this->walk(n.get_max_groups()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Unroll & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Unroll & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Unroll & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_unroll_factor()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::UnrollAndJam & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::UnrollAndJam & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::UnrollAndJam & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_unroll_factor()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Nontemporal & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Nontemporal & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Nontemporal & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_nontemporal_expressions()));
        values.append(this->walk(n.get_flags()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Prefetch & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Prefetch & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Prefetch & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_distances()));
        values.append(this->walk(n.get_strategy()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoPrefetch & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::NoPrefetch & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::NoPrefetch & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Mask & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Mask & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Mask & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoMask & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::NoMask & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::NoMask & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::SimdReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AssertDecl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::AssertDecl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::AssertDecl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxCaptureCopy & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxCaptureCopy & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxCaptureCopy & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxCaptureReference & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxCaptureReference & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxCaptureReference & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormTemplateId & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormTemplateId & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormTemplateId & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormImplicit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormImplicit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormImplicit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormBinaryInfix & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormBinaryInfix & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormBinaryInfix & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormUnaryPrefix & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormUnaryPrefix & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPrefix & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormUnaryPostfix & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormUnaryPostfix & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPostfix & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormDefaultInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormDefaultInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormDefaultInitBraced & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormDefaultInitBraced & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInitBraced & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::For & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::For & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::For & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_loop()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ForAppendix & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::ForAppendix & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::ForAppendix & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_loop()));
        values.append(this->walk(n.get_prependix()));
        values.append(this->walk(n.get_appendix()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::AsmDefinition & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::AsmDefinition & n) { return Ret(); }
     virtual Ret visit(const Nodecl::AsmDefinition & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_asm_text()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DeclareTarget & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::DeclareTarget & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::DeclareTarget & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_declarations()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskloop & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskloop & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Taskloop & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_loop()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Release & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Release & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Release & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TaskIsTaskwait & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::TaskIsTaskwait & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::TaskIsTaskwait & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskIsLoop & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskIsLoop & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsLoop & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskIsTaskCall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskIsTaskCall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsTaskCall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Task & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Task & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Task & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachDefExpr & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::ReachDefExpr & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::ReachDefExpr & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expression()));
        values.append(this->walk(n.get_value()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierAtEnd & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierAtEnd & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::BarrierAtEnd & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Device & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Device & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Device & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_device_id()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapTo & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MapTo & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MapTo & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_to()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapFrom & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MapFrom & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MapFrom & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_from()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapToFrom & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MapToFrom & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MapToFrom & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_tofrom()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapAlloc & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MapAlloc & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MapAlloc & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_alloc()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MotionTo & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MotionTo & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MotionTo & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_to()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MotionFrom & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::MotionFrom & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::MotionFrom & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_map_from()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NumTeams & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::NumTeams & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::NumTeams & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_num_teams()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ThreadLimit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::ThreadLimit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::ThreadLimit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_thread_limit()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetTaskUndeferred & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetTaskUndeferred & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::TargetTaskUndeferred & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Firstprivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Firstprivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Firstprivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Lastprivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Lastprivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Lastprivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FirstLastprivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::FirstLastprivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::FirstLastprivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Shared & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Shared & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Shared & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Threadprivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Threadprivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Threadprivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Private & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Private & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Private & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Auto & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Auto & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Auto & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_symbols()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Reduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Reduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Reduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TaskReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::TaskReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::TaskReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::InReduction & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::InReduction & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::InReduction & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::PrivateInit & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::PrivateInit & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::PrivateInit & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_value()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranAllocateStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranAllocateStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranAllocateStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->walk(n.get_options()));
        values.append(this->walk(n.get_allocate_type()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranArithmeticIfStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranArithmeticIfStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranArithmeticIfStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->walk(n.get_lower()));
        values.append(this->walk(n.get_equal()));
        values.append(this->walk(n.get_upper()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranAssignedGotoStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranAssignedGotoStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranAssignedGotoStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_index()));
        values.append(this->walk(n.get_label_seq()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranOpenStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranOpenStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranOpenStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranCloseStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranCloseStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranCloseStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranComputedGotoStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranComputedGotoStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranComputedGotoStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_label_seq()));
        values.append(this->walk(n.get_index()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranAlternateReturnStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranAlternateReturnStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranAlternateReturnStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_index()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranDeallocateStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranDeallocateStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranDeallocateStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->walk(n.get_options()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranIoStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranIoStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranIoStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_io_spec_list()));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranLabelAssignStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranLabelAssignStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranLabelAssignStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_value()));
        values.append(this->walk(n.get_label_var()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranNullifyStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranNullifyStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranNullifyStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranPrintStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranPrintStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranPrintStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_format()));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranReadStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranReadStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranReadStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_io_spec_list()));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranWriteStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranWriteStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranWriteStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_io_spec_list()));
        values.append(this->walk(n.get_io_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranStopStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranStopStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranStopStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_stop_code()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranPauseStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranPauseStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranPauseStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pause_code()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranEntryStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranEntryStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranEntryStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranWhere & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranWhere & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranWhere & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_where_set()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FortranForall & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FortranForall & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FortranForall & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_loop_control()));
        values.append(this->walk(n.get_mask()));
        values.append(this->walk(n.get_statement()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetData & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetData & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::TargetData & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Target & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Target & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Target & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetUpdate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetUpdate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::TargetUpdate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Teams & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Teams & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Teams & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_statements()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Distribute & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Distribute & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Distribute & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->walk(n.get_loop()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::MaskLiteral & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::MaskLiteral & n) { return Ret(); }
     virtual Ret visit(const Nodecl::MaskLiteral & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Store & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Store & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Store & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Load & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Load & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Load & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Init & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Init & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Init & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_environment()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Shutdown & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Shutdown & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Shutdown & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Data & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Data & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Data & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Level & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Level & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Level & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Id & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Id & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Id & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Comm & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Comm & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Comm & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::If & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::If & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::If & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Kind & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Checkpoint::Kind & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Checkpoint::Kind & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::SourceComment & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::SourceComment & n) { return Ret(); }
     virtual Ret visit(const Nodecl::SourceComment & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Target & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Target & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Target & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_devices()));
        values.append(this->walk(n.get_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::RangeLoopControl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::RangeLoopControl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::RangeLoopControl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_induction_variable()));
        values.append(this->walk(n.get_lower()));
        values.append(this->walk(n.get_upper()));
        values.append(this->walk(n.get_step()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IteratorLoopControl & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IteratorLoopControl & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IteratorLoopControl & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_range_iterator()));
        values.append(this->walk(n.get_initializer()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::CriticalName & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::CriticalName & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::CriticalName & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameSimple & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepNameSimple & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepNameSimple & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::UpperExposed & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::UpperExposed & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::UpperExposed & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_upper_exposed_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Defined & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Defined & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Defined & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_defined_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Undefined & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Undefined & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Undefined & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_undefined_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::LiveIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::LiveIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::LiveIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_live_in_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::LiveOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::LiveOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::LiveOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_live_out_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Dead & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Dead & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Dead & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_dead_exprs()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachingDefinitionIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::ReachingDefinitionIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reaching_definitions_in()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachingDefinitionOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::ReachingDefinitionOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reaching_definitions_out()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::InductionVariable & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::InductionVariable & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::InductionVariable & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_induction_variables()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Firstprivate & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Firstprivate & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Firstprivate & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_scoped_variables()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Private & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Private & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Private & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_scoped_variables()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Shared & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Shared & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Shared & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_scoped_variables()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Range & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Range & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Range & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_range_variables()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::AutoStorage & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::AutoStorage & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::AutoStorage & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::Dead & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::Dead & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Dead & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentFp & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentFp & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentFp & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentP & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentP & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentP & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentInPointed & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentInPointed & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentInPointed & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::Race & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::Race & n) { return Ret(); }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Race & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_correctness_vars()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::VectorFunctionCode & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::VectorFunctionCode & n) { return Ret(); }
     virtual Ret visit(const Nodecl::VectorFunctionCode & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_function_code()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::UpcSyncStatement & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::UpcSyncStatement & n) { return Ret(); }
     virtual Ret visit(const Nodecl::UpcSyncStatement & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepGlobalNameNested & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepGlobalNameNested & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepGlobalNameNested & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameNested & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxDepNameNested & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxDepNameNested & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_items()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::UnknownPragma & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::UnknownPragma & n) { return Ret(); }
     virtual Ret visit(const Nodecl::UnknownPragma & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::FieldDesignator & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::FieldDesignator & n) { return Ret(); }
     virtual Ret visit(const Nodecl::FieldDesignator & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_field()));
        values.append(this->walk(n.get_next()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::IndexDesignator & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::IndexDesignator & n) { return Ret(); }
     virtual Ret visit(const Nodecl::IndexDesignator & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_index()));
        values.append(this->walk(n.get_next()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::PreprocessorLine & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::PreprocessorLine & n) { return Ret(); }
     virtual Ret visit(const Nodecl::PreprocessorLine & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxBracedInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxBracedInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxBracedInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxEqualInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxEqualInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxEqualInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxParenthesizedInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxParenthesizedInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxParenthesizedInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::C99DesignatedInitializer & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::C99DesignatedInitializer & n) { return Ret(); }
     virtual Ret visit(const Nodecl::C99DesignatedInitializer & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_designation()));
        values.append(this->walk(n.get_init()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::C99FieldDesignator & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::C99FieldDesignator & n) { return Ret(); }
     virtual Ret visit(const Nodecl::C99FieldDesignator & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::C99IndexDesignator & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::C99IndexDesignator & n) { return Ret(); }
     virtual Ret visit(const Nodecl::C99IndexDesignator & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_expr()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxValuePack & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxValuePack & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxValuePack & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_pack()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::CxxValuePackExpanded & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::CxxValuePackExpanded & n) { return Ret(); }
     virtual Ret visit(const Nodecl::CxxValuePackExpanded & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_values()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::If & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::If & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::If & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Final & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Final & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Final & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_condition()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Priority & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Priority & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Priority & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_priority()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Mergeable & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Mergeable & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Mergeable & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Untied & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::Untied & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::Untied & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Wait & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Wait & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Wait & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ReductionItem & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OpenMP::ReductionItem & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OpenMP::ReductionItem & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_reductor()));
        values.append(this->walk(n.get_reduced_symbol()));
        values.append(this->walk(n.get_reduction_type()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyIn & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyIn & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::CopyIn & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_input_copies()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyOut & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyOut & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::CopyOut & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_output_copies()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyInout & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyInout & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::CopyInout & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_inout_copies()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::NDRange & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::NDRange & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::NDRange & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_ndrange_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::ShMem & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::ShMem & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::ShMem & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_shmem_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::File & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::File & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::File & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_filename()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Name & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Name & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Name & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Onto & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Onto & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Onto & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_onto_expressions()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Implements & n) { return Ret(); }
     virtual Ret visit_post(const Nodecl::OmpSs::Implements & n) { return Ret(); }
     virtual Ret visit(const Nodecl::OmpSs::Implements & n)
     {
        TL::ObjectList<Ret> values;
        values.append(this->visit_pre(n));
        values.append(this->walk(n.get_device()));
        values.append(this->walk(n.get_function_name()));
        values.append(this->visit_post(n));
        return this->join_list(values);
     }
};
template <>
class ExhaustiveVisitor<void> : public NodeclVisitor<void>
{
public:
     typedef NodeclVisitor<void>::Ret Ret;
     virtual Ret visit_pre(const Nodecl::StructuredValueParenthesized & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValueParenthesized & n) { }
     virtual Ret visit(const Nodecl::StructuredValueParenthesized & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueBracedTypecast & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValueBracedTypecast & n) { }
     virtual Ret visit(const Nodecl::StructuredValueBracedTypecast & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueBracedImplicit & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValueBracedImplicit & n) { }
     virtual Ret visit(const Nodecl::StructuredValueBracedImplicit & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueCompoundLiteral & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValueCompoundLiteral & n) { }
     virtual Ret visit(const Nodecl::StructuredValueCompoundLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n) { }
     virtual Ret visit(const Nodecl::StructuredValueFortranTypespecArrayConstructor & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepTemplateId & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepTemplateId & n) { }
     virtual Ret visit(const Nodecl::CxxDepTemplateId & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameConversion & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepNameConversion & n) { }
     virtual Ret visit(const Nodecl::CxxDepNameConversion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->walk(n.get_conversion_type());
        this->walk(n.get_literal_conversion());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepDecltype & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepDecltype & n) { }
     virtual Ret visit(const Nodecl::CxxDepDecltype & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Text & n) { }
     virtual Ret visit_post(const Nodecl::Text & n) { }
     virtual Ret visit(const Nodecl::Text & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CudaKernelCall & n) { }
     virtual Ret visit_post(const Nodecl::CudaKernelCall & n) { }
     virtual Ret visit(const Nodecl::CudaKernelCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_kernel_config());
        this->walk(n.get_function_call());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomDirective & n) { }
     virtual Ret visit_post(const Nodecl::PragmaCustomDirective & n) { }
     virtual Ret visit(const Nodecl::PragmaCustomDirective & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pragma_line());
        this->walk(n.get_context_of_decl());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaContext & n) { }
     virtual Ret visit_post(const Nodecl::PragmaContext & n) { }
     virtual Ret visit(const Nodecl::PragmaContext & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Range & n) { }
     virtual Ret visit_post(const Nodecl::Range & n) { }
     virtual Ret visit(const Nodecl::Range & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lower());
        this->walk(n.get_upper());
        this->walk(n.get_stride());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Sections & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Sections & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Sections & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_sections());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Master & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Master & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Master & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomLine & n) { }
     virtual Ret visit_post(const Nodecl::PragmaCustomLine & n) { }
     virtual Ret visit(const Nodecl::PragmaCustomLine & n)
     {
        this->visit_pre(n);
        this->walk(n.get_parameters());
        this->walk(n.get_clauses());
        this->walk(n.get_end_clauses());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GccBuiltinVaArg & n) { }
     virtual Ret visit_post(const Nodecl::GccBuiltinVaArg & n) { }
     virtual Ret visit(const Nodecl::GccBuiltinVaArg & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->walk(n.get_va_type());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Critical & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Critical & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Critical & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomStatement & n) { }
     virtual Ret visit_post(const Nodecl::PragmaCustomStatement & n) { }
     virtual Ret visit(const Nodecl::PragmaCustomStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pragma_line());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Loop & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Loop & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Loop & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_loop());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::TopLevel & n) { }
     virtual Ret visit_post(const Nodecl::TopLevel & n) { }
     virtual Ret visit(const Nodecl::TopLevel & n)
     {
        this->visit_pre(n);
        this->walk(n.get_top_level());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IntelAssumeAligned & n) { }
     virtual Ret visit_post(const Nodecl::IntelAssumeAligned & n) { }
     virtual Ret visit(const Nodecl::IntelAssumeAligned & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pointer());
        this->walk(n.get_alignment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IntelAssume & n) { }
     virtual Ret visit_post(const Nodecl::IntelAssume & n) { }
     virtual Ret visit(const Nodecl::IntelAssume & n)
     {
        this->visit_pre(n);
        this->walk(n.get_assumed());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Register & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Register & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Register & n)
     {
        this->visit_pre(n);
        this->walk(n.get_registered_set());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Unregister & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Unregister & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Unregister & n)
     {
        this->visit_pre(n);
        this->walk(n.get_unregistered_set());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdFor & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdFor & n) { }
     virtual Ret visit(const Nodecl::OpenMP::SimdFor & n)
     {
        this->visit_pre(n);
        this->walk(n.get_openmp_for());
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Phi & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Phi & n) { }
     virtual Ret visit(const Nodecl::Analysis::Phi & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeUnion & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::RangeUnion & n) { }
     virtual Ret visit(const Nodecl::Analysis::RangeUnion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeIntersection & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::RangeIntersection & n) { }
     virtual Ret visit(const Nodecl::Analysis::RangeIntersection & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::RangeSub & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::RangeSub & n) { }
     virtual Ret visit(const Nodecl::Analysis::RangeSub & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::EmptyRange & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::EmptyRange & n) { }
     virtual Ret visit(const Nodecl::Analysis::EmptyRange & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::MinusInfinity & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::MinusInfinity & n) { }
     virtual Ret visit(const Nodecl::Analysis::MinusInfinity & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::PlusInfinity & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::PlusInfinity & n) { }
     virtual Ret visit(const Nodecl::Analysis::PlusInfinity & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Minimum & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Minimum & n) { }
     virtual Ret visit(const Nodecl::Analysis::Minimum & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Maximum & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Maximum & n) { }
     virtual Ret visit(const Nodecl::Analysis::Maximum & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StringLiteral & n) { }
     virtual Ret visit_post(const Nodecl::StringLiteral & n) { }
     virtual Ret visit(const Nodecl::StringLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Schedule & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Schedule & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Schedule & n)
     {
        this->visit_pre(n);
        this->walk(n.get_chunk());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DistSchedule & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::DistSchedule & n) { }
     virtual Ret visit(const Nodecl::OpenMP::DistSchedule & n)
     {
        this->visit_pre(n);
        this->walk(n.get_chunk());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TargetDeclaration & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TargetDeclaration & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TargetDeclaration & n)
     {
        this->visit_pre(n);
        this->walk(n.get_devices());
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmDefinition & n) { }
     virtual Ret visit_post(const Nodecl::GccAsmDefinition & n) { }
     virtual Ret visit(const Nodecl::GccAsmDefinition & n)
     {
        this->visit_pre(n);
        this->walk(n.get_operands0());
        this->walk(n.get_operands1());
        this->walk(n.get_operands2());
        this->walk(n.get_specs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskwait & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskwait & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Taskwait & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskgroup & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskgroup & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Taskgroup & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushMemory & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushMemory & n) { }
     virtual Ret visit(const Nodecl::OpenMP::FlushMemory & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierFull & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierFull & n) { }
     virtual Ret visit(const Nodecl::OpenMP::BarrierFull & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierSignal & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierSignal & n) { }
     virtual Ret visit(const Nodecl::OpenMP::BarrierSignal & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierWait & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierWait & n) { }
     virtual Ret visit(const Nodecl::OpenMP::BarrierWait & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ParallelSimdFor & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::ParallelSimdFor & n) { }
     virtual Ret visit(const Nodecl::OpenMP::ParallelSimdFor & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomDeclaration & n) { }
     virtual Ret visit_post(const Nodecl::PragmaCustomDeclaration & n) { }
     virtual Ret visit(const Nodecl::PragmaCustomDeclaration & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pragma_line());
        this->walk(n.get_nested_pragma());
        this->walk(n.get_context_of_decl());
        this->walk(n.get_context_of_parameters());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LoopControl & n) { }
     virtual Ret visit_post(const Nodecl::LoopControl & n) { }
     virtual Ret visit(const Nodecl::LoopControl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->walk(n.get_cond());
        this->walk(n.get_next());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::UnboundedLoopControl & n) { }
     virtual Ret visit_post(const Nodecl::UnboundedLoopControl & n) { }
     virtual Ret visit(const Nodecl::UnboundedLoopControl & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Symbol & n) { }
     virtual Ret visit_post(const Nodecl::Symbol & n) { }
     virtual Ret visit(const Nodecl::Symbol & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranIoSpec & n) { }
     virtual Ret visit_post(const Nodecl::FortranIoSpec & n) { }
     virtual Ret visit(const Nodecl::FortranIoSpec & n)
     {
        this->visit_pre(n);
        this->walk(n.get_value());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Single & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Single & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Single & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::AlignedFlag & n) { }
     virtual Ret visit_post(const Nodecl::AlignedFlag & n) { }
     virtual Ret visit(const Nodecl::AlignedFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::AlignmentInfo & n) { }
     virtual Ret visit_post(const Nodecl::AlignmentInfo & n) { }
     virtual Ret visit(const Nodecl::AlignmentInfo & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::InPlaceFlag & n) { }
     virtual Ret visit_post(const Nodecl::InPlaceFlag & n) { }
     virtual Ret visit(const Nodecl::InPlaceFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OnTopFlag & n) { }
     virtual Ret visit_post(const Nodecl::OnTopFlag & n) { }
     virtual Ret visit(const Nodecl::OnTopFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::EvictFlag & n) { }
     virtual Ret visit_post(const Nodecl::EvictFlag & n) { }
     virtual Ret visit(const Nodecl::EvictFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::RelaxedFlag & n) { }
     virtual Ret visit_post(const Nodecl::RelaxedFlag & n) { }
     virtual Ret visit(const Nodecl::RelaxedFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::NontemporalFlag & n) { }
     virtual Ret visit_post(const Nodecl::NontemporalFlag & n) { }
     virtual Ret visit(const Nodecl::NontemporalFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::HasBeenDefinedFlag & n) { }
     virtual Ret visit_post(const Nodecl::HasBeenDefinedFlag & n) { }
     virtual Ret visit(const Nodecl::HasBeenDefinedFlag & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FunctionCode & n) { }
     virtual Ret visit_post(const Nodecl::FunctionCode & n) { }
     virtual Ret visit(const Nodecl::FunctionCode & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->walk(n.get_initializers());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskCall & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskCall & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TaskCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_call());
        this->walk(n.get_site_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskyield & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskyield & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Taskyield & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Workshare & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Workshare & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Workshare & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaClauseArg & n) { }
     virtual Ret visit_post(const Nodecl::PragmaClauseArg & n) { }
     virtual Ret visit(const Nodecl::PragmaClauseArg & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdFunction & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdFunction & n) { }
     virtual Ret visit(const Nodecl::OpenMP::SimdFunction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MemberInit & n) { }
     virtual Ret visit_post(const Nodecl::MemberInit & n) { }
     virtual Ret visit(const Nodecl::MemberInit & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ImplicitMemberInit & n) { }
     virtual Ret visit_post(const Nodecl::ImplicitMemberInit & n) { }
     virtual Ret visit(const Nodecl::ImplicitMemberInit & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Atomic & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Atomic & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Atomic & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxClassMemberAccess & n) { }
     virtual Ret visit_post(const Nodecl::CxxClassMemberAccess & n) { }
     virtual Ret visit(const Nodecl::CxxClassMemberAccess & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_member());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxArrow & n) { }
     virtual Ret visit_post(const Nodecl::CxxArrow & n) { }
     virtual Ret visit(const Nodecl::CxxArrow & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_member());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDotPtrMember & n) { }
     virtual Ret visit_post(const Nodecl::CxxDotPtrMember & n) { }
     virtual Ret visit(const Nodecl::CxxDotPtrMember & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_ptr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxArrowPtrMember & n) { }
     virtual Ret visit_post(const Nodecl::CxxArrowPtrMember & n) { }
     virtual Ret visit(const Nodecl::CxxArrowPtrMember & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_ptr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxSizeof & n) { }
     virtual Ret visit_post(const Nodecl::CxxSizeof & n) { }
     virtual Ret visit(const Nodecl::CxxSizeof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxSizeofPack & n) { }
     virtual Ret visit_post(const Nodecl::CxxSizeofPack & n) { }
     virtual Ret visit(const Nodecl::CxxSizeofPack & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxAlignof & n) { }
     virtual Ret visit_post(const Nodecl::CxxAlignof & n) { }
     virtual Ret visit(const Nodecl::CxxAlignof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxPostfixInitializer & n) { }
     virtual Ret visit_post(const Nodecl::CxxPostfixInitializer & n) { }
     virtual Ret visit(const Nodecl::CxxPostfixInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_postfix());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxCast & n) { }
     virtual Ret visit_post(const Nodecl::CxxCast & n) { }
     virtual Ret visit(const Nodecl::CxxCast & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitTypeCast & n) { }
     virtual Ret visit_post(const Nodecl::CxxExplicitTypeCast & n) { }
     virtual Ret visit(const Nodecl::CxxExplicitTypeCast & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init_list());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepFunctionCall & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepFunctionCall & n) { }
     virtual Ret visit(const Nodecl::CxxDepFunctionCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_called());
        this->walk(n.get_arguments());
        this->walk(n.get_alternate_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNew & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepNew & n) { }
     virtual Ret visit(const Nodecl::CxxDepNew & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->walk(n.get_init_real_type());
        this->walk(n.get_placement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxNoexcept & n) { }
     virtual Ret visit_post(const Nodecl::CxxNoexcept & n) { }
     virtual Ret visit(const Nodecl::CxxNoexcept & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxLambda & n) { }
     virtual Ret visit_post(const Nodecl::CxxLambda & n) { }
     virtual Ret visit(const Nodecl::CxxLambda & n)
     {
        this->visit_pre(n);
        this->walk(n.get_explicit_captures());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxAlignas & n) { }
     virtual Ret visit_post(const Nodecl::CxxAlignas & n) { }
     virtual Ret visit(const Nodecl::CxxAlignas & n)
     {
        this->visit_pre(n);
        this->walk(n.get_values());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::StructuredValue & n) { }
     virtual Ret visit_post(const Nodecl::StructuredValue & n) { }
     virtual Ret visit(const Nodecl::StructuredValue & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->walk(n.get_form());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranData & n) { }
     virtual Ret visit_post(const Nodecl::FortranData & n) { }
     virtual Ret visit(const Nodecl::FortranData & n)
     {
        this->visit_pre(n);
        this->walk(n.get_objects());
        this->walk(n.get_values());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranEquivalence & n) { }
     virtual Ret visit_post(const Nodecl::FortranEquivalence & n) { }
     virtual Ret visit(const Nodecl::FortranEquivalence & n)
     {
        this->visit_pre(n);
        this->walk(n.get_first());
        this->walk(n.get_second());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranBozLiteral & n) { }
     virtual Ret visit_post(const Nodecl::FortranBozLiteral & n) { }
     virtual Ret visit(const Nodecl::FortranBozLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranBindC & n) { }
     virtual Ret visit_post(const Nodecl::FortranBindC & n) { }
     virtual Ret visit(const Nodecl::FortranBindC & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranHollerith & n) { }
     virtual Ret visit_post(const Nodecl::FortranHollerith & n) { }
     virtual Ret visit(const Nodecl::FortranHollerith & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranUse & n) { }
     virtual Ret visit_post(const Nodecl::FortranUse & n) { }
     virtual Ret visit(const Nodecl::FortranUse & n)
     {
        this->visit_pre(n);
        this->walk(n.get_module());
        this->walk(n.get_renamed_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranUseOnly & n) { }
     virtual Ret visit_post(const Nodecl::FortranUseOnly & n) { }
     virtual Ret visit(const Nodecl::FortranUseOnly & n)
     {
        this->visit_pre(n);
        this->walk(n.get_module());
        this->walk(n.get_only_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Simd & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Simd & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Simd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranActualArgument & n) { }
     virtual Ret visit_post(const Nodecl::FortranActualArgument & n) { }
     virtual Ret visit(const Nodecl::FortranActualArgument & n)
     {
        this->visit_pre(n);
        this->walk(n.get_argument());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranNotPresent & n) { }
     virtual Ret visit_post(const Nodecl::FortranNotPresent & n) { }
     virtual Ret visit(const Nodecl::FortranNotPresent & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushAtEntry & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushAtEntry & n) { }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtEntry & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FlushAtExit & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::FlushAtExit & n) { }
     virtual Ret visit(const Nodecl::OpenMP::FlushAtExit & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoFlush & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::NoFlush & n) { }
     virtual Ret visit(const Nodecl::OpenMP::NoFlush & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::DefaultArgument & n) { }
     virtual Ret visit_post(const Nodecl::DefaultArgument & n) { }
     virtual Ret visit(const Nodecl::DefaultArgument & n)
     {
        this->visit_pre(n);
        this->walk(n.get_argument());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxMemberInit & n) { }
     virtual Ret visit_post(const Nodecl::CxxMemberInit & n) { }
     virtual Ret visit(const Nodecl::CxxMemberInit & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->walk(n.get_initializer());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MultiExpressionIterator & n) { }
     virtual Ret visit_post(const Nodecl::MultiExpressionIterator & n) { }
     virtual Ret visit(const Nodecl::MultiExpressionIterator & n)
     {
        this->visit_pre(n);
        this->walk(n.get_range());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Section & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Section & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Section & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CompoundStatement & n) { }
     virtual Ret visit_post(const Nodecl::CompoundStatement & n) { }
     virtual Ret visit(const Nodecl::CompoundStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->walk(n.get_finally());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::EmptyStatement & n) { }
     virtual Ret visit_post(const Nodecl::EmptyStatement & n) { }
     virtual Ret visit(const Nodecl::EmptyStatement & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ExpressionStatement & n) { }
     virtual Ret visit_post(const Nodecl::ExpressionStatement & n) { }
     virtual Ret visit(const Nodecl::ExpressionStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::DoStatement & n) { }
     virtual Ret visit_post(const Nodecl::DoStatement & n) { }
     virtual Ret visit(const Nodecl::DoStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->walk(n.get_condition());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::WhileStatement & n) { }
     virtual Ret visit_post(const Nodecl::WhileStatement & n) { }
     virtual Ret visit(const Nodecl::WhileStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->walk(n.get_statement());
        this->walk(n.get_loop_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ForStatement & n) { }
     virtual Ret visit_post(const Nodecl::ForStatement & n) { }
     virtual Ret visit(const Nodecl::ForStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_loop_header());
        this->walk(n.get_statement());
        this->walk(n.get_loop_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IfElseStatement & n) { }
     virtual Ret visit_post(const Nodecl::IfElseStatement & n) { }
     virtual Ret visit(const Nodecl::IfElseStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->walk(n.get_then());
        this->walk(n.get_else());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LabeledStatement & n) { }
     virtual Ret visit_post(const Nodecl::LabeledStatement & n) { }
     virtual Ret visit(const Nodecl::LabeledStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::SwitchStatement & n) { }
     virtual Ret visit_post(const Nodecl::SwitchStatement & n) { }
     virtual Ret visit(const Nodecl::SwitchStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_switch());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::DefaultStatement & n) { }
     virtual Ret visit_post(const Nodecl::DefaultStatement & n) { }
     virtual Ret visit(const Nodecl::DefaultStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CaseStatement & n) { }
     virtual Ret visit_post(const Nodecl::CaseStatement & n) { }
     virtual Ret visit(const Nodecl::CaseStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_case());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BreakStatement & n) { }
     virtual Ret visit_post(const Nodecl::BreakStatement & n) { }
     virtual Ret visit(const Nodecl::BreakStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_construct_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ContinueStatement & n) { }
     virtual Ret visit_post(const Nodecl::ContinueStatement & n) { }
     virtual Ret visit(const Nodecl::ContinueStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_construct_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GotoStatement & n) { }
     virtual Ret visit_post(const Nodecl::GotoStatement & n) { }
     virtual Ret visit(const Nodecl::GotoStatement & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ReturnStatement & n) { }
     virtual Ret visit_post(const Nodecl::ReturnStatement & n) { }
     virtual Ret visit(const Nodecl::ReturnStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_value());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ErrStatement & n) { }
     virtual Ret visit_post(const Nodecl::ErrStatement & n) { }
     virtual Ret visit(const Nodecl::ErrStatement & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ObjectInit & n) { }
     virtual Ret visit_post(const Nodecl::ObjectInit & n) { }
     virtual Ret visit(const Nodecl::ObjectInit & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmSpec & n) { }
     virtual Ret visit_post(const Nodecl::GccAsmSpec & n) { }
     virtual Ret visit(const Nodecl::GccAsmSpec & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Context & n) { }
     virtual Ret visit_post(const Nodecl::Context & n) { }
     virtual Ret visit(const Nodecl::Context & n)
     {
        this->visit_pre(n);
        this->walk(n.get_in_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Parallel & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Parallel & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Parallel & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_num_replicas());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FunctionCall & n) { }
     virtual Ret visit_post(const Nodecl::FunctionCall & n) { }
     virtual Ret visit(const Nodecl::FunctionCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_called());
        this->walk(n.get_arguments());
        this->walk(n.get_alternate_name());
        this->walk(n.get_function_form());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ArraySubscript & n) { }
     virtual Ret visit_post(const Nodecl::ArraySubscript & n) { }
     virtual Ret visit(const Nodecl::ArraySubscript & n)
     {
        this->visit_pre(n);
        this->walk(n.get_subscripted());
        this->walk(n.get_subscripts());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ClassMemberAccess & n) { }
     virtual Ret visit_post(const Nodecl::ClassMemberAccess & n) { }
     virtual Ret visit(const Nodecl::ClassMemberAccess & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_member());
        this->walk(n.get_member_literal());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Plus & n) { }
     virtual Ret visit_post(const Nodecl::Plus & n) { }
     virtual Ret visit(const Nodecl::Plus & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Neg & n) { }
     virtual Ret visit_post(const Nodecl::Neg & n) { }
     virtual Ret visit(const Nodecl::Neg & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Mul & n) { }
     virtual Ret visit_post(const Nodecl::Mul & n) { }
     virtual Ret visit(const Nodecl::Mul & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Power & n) { }
     virtual Ret visit_post(const Nodecl::Power & n) { }
     virtual Ret visit(const Nodecl::Power & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Div & n) { }
     virtual Ret visit_post(const Nodecl::Div & n) { }
     virtual Ret visit(const Nodecl::Div & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Mod & n) { }
     virtual Ret visit_post(const Nodecl::Mod & n) { }
     virtual Ret visit(const Nodecl::Mod & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Add & n) { }
     virtual Ret visit_post(const Nodecl::Add & n) { }
     virtual Ret visit(const Nodecl::Add & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Minus & n) { }
     virtual Ret visit_post(const Nodecl::Minus & n) { }
     virtual Ret visit(const Nodecl::Minus & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Concat & n) { }
     virtual Ret visit_post(const Nodecl::Concat & n) { }
     virtual Ret visit(const Nodecl::Concat & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Equal & n) { }
     virtual Ret visit_post(const Nodecl::Equal & n) { }
     virtual Ret visit(const Nodecl::Equal & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Different & n) { }
     virtual Ret visit_post(const Nodecl::Different & n) { }
     virtual Ret visit(const Nodecl::Different & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LowerThan & n) { }
     virtual Ret visit_post(const Nodecl::LowerThan & n) { }
     virtual Ret visit(const Nodecl::LowerThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LowerOrEqualThan & n) { }
     virtual Ret visit_post(const Nodecl::LowerOrEqualThan & n) { }
     virtual Ret visit(const Nodecl::LowerOrEqualThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GreaterThan & n) { }
     virtual Ret visit_post(const Nodecl::GreaterThan & n) { }
     virtual Ret visit(const Nodecl::GreaterThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GreaterOrEqualThan & n) { }
     virtual Ret visit_post(const Nodecl::GreaterOrEqualThan & n) { }
     virtual Ret visit(const Nodecl::GreaterOrEqualThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LogicalNot & n) { }
     virtual Ret visit_post(const Nodecl::LogicalNot & n) { }
     virtual Ret visit(const Nodecl::LogicalNot & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LogicalAnd & n) { }
     virtual Ret visit_post(const Nodecl::LogicalAnd & n) { }
     virtual Ret visit(const Nodecl::LogicalAnd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::LogicalOr & n) { }
     virtual Ret visit_post(const Nodecl::LogicalOr & n) { }
     virtual Ret visit(const Nodecl::LogicalOr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseNot & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseNot & n) { }
     virtual Ret visit(const Nodecl::BitwiseNot & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseAnd & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseAnd & n) { }
     virtual Ret visit(const Nodecl::BitwiseAnd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseOr & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseOr & n) { }
     virtual Ret visit(const Nodecl::BitwiseOr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseXor & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseXor & n) { }
     virtual Ret visit(const Nodecl::BitwiseXor & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShl & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseShl & n) { }
     virtual Ret visit(const Nodecl::BitwiseShl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ArithmeticShr & n) { }
     virtual Ret visit_post(const Nodecl::ArithmeticShr & n) { }
     virtual Ret visit(const Nodecl::ArithmeticShr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShr & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseShr & n) { }
     virtual Ret visit(const Nodecl::BitwiseShr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Assignment & n) { }
     virtual Ret visit_post(const Nodecl::Assignment & n) { }
     virtual Ret visit(const Nodecl::Assignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ParenthesizedExpression & n) { }
     virtual Ret visit_post(const Nodecl::ParenthesizedExpression & n) { }
     virtual Ret visit(const Nodecl::ParenthesizedExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Dereference & n) { }
     virtual Ret visit_post(const Nodecl::Dereference & n) { }
     virtual Ret visit(const Nodecl::Dereference & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CompoundExpression & n) { }
     virtual Ret visit_post(const Nodecl::CompoundExpression & n) { }
     virtual Ret visit(const Nodecl::CompoundExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorSubscript & n) { }
     virtual Ret visit_post(const Nodecl::VectorSubscript & n) { }
     virtual Ret visit(const Nodecl::VectorSubscript & n)
     {
        this->visit_pre(n);
        this->walk(n.get_subscripted());
        this->walk(n.get_subscript());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorAdd & n) { }
     virtual Ret visit_post(const Nodecl::VectorAdd & n) { }
     virtual Ret visit(const Nodecl::VectorAdd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorFmadd & n) { }
     virtual Ret visit_post(const Nodecl::VectorFmadd & n) { }
     virtual Ret visit(const Nodecl::VectorFmadd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_first_op());
        this->walk(n.get_second_op());
        this->walk(n.get_third_op());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMinus & n) { }
     virtual Ret visit_post(const Nodecl::VectorMinus & n) { }
     virtual Ret visit(const Nodecl::VectorMinus & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorFmminus & n) { }
     virtual Ret visit_post(const Nodecl::VectorFmminus & n) { }
     virtual Ret visit(const Nodecl::VectorFmminus & n)
     {
        this->visit_pre(n);
        this->walk(n.get_first_mul_op());
        this->walk(n.get_second_mul_op());
        this->walk(n.get_minus_op());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMul & n) { }
     virtual Ret visit_post(const Nodecl::VectorMul & n) { }
     virtual Ret visit(const Nodecl::VectorMul & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorDiv & n) { }
     virtual Ret visit_post(const Nodecl::VectorDiv & n) { }
     virtual Ret visit(const Nodecl::VectorDiv & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorRcp & n) { }
     virtual Ret visit_post(const Nodecl::VectorRcp & n) { }
     virtual Ret visit(const Nodecl::VectorRcp & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMod & n) { }
     virtual Ret visit_post(const Nodecl::VectorMod & n) { }
     virtual Ret visit(const Nodecl::VectorMod & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorNeg & n) { }
     virtual Ret visit_post(const Nodecl::VectorNeg & n) { }
     virtual Ret visit(const Nodecl::VectorNeg & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorSqrt & n) { }
     virtual Ret visit_post(const Nodecl::VectorSqrt & n) { }
     virtual Ret visit(const Nodecl::VectorSqrt & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorRsqrt & n) { }
     virtual Ret visit_post(const Nodecl::VectorRsqrt & n) { }
     virtual Ret visit(const Nodecl::VectorRsqrt & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionAdd & n) { }
     virtual Ret visit_post(const Nodecl::VectorReductionAdd & n) { }
     virtual Ret visit(const Nodecl::VectorReductionAdd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_vector_src());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionMinus & n) { }
     virtual Ret visit_post(const Nodecl::VectorReductionMinus & n) { }
     virtual Ret visit(const Nodecl::VectorReductionMinus & n)
     {
        this->visit_pre(n);
        this->walk(n.get_vector_src());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorReductionMul & n) { }
     virtual Ret visit_post(const Nodecl::VectorReductionMul & n) { }
     virtual Ret visit(const Nodecl::VectorReductionMul & n)
     {
        this->visit_pre(n);
        this->walk(n.get_vector_src());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorEqual & n) { }
     virtual Ret visit_post(const Nodecl::VectorEqual & n) { }
     virtual Ret visit(const Nodecl::VectorEqual & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorDifferent & n) { }
     virtual Ret visit_post(const Nodecl::VectorDifferent & n) { }
     virtual Ret visit(const Nodecl::VectorDifferent & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLowerThan & n) { }
     virtual Ret visit_post(const Nodecl::VectorLowerThan & n) { }
     virtual Ret visit(const Nodecl::VectorLowerThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLowerOrEqualThan & n) { }
     virtual Ret visit_post(const Nodecl::VectorLowerOrEqualThan & n) { }
     virtual Ret visit(const Nodecl::VectorLowerOrEqualThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorGreaterThan & n) { }
     virtual Ret visit_post(const Nodecl::VectorGreaterThan & n) { }
     virtual Ret visit(const Nodecl::VectorGreaterThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorGreaterOrEqualThan & n) { }
     virtual Ret visit_post(const Nodecl::VectorGreaterOrEqualThan & n) { }
     virtual Ret visit(const Nodecl::VectorGreaterOrEqualThan & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalNot & n) { }
     virtual Ret visit_post(const Nodecl::VectorLogicalNot & n) { }
     virtual Ret visit(const Nodecl::VectorLogicalNot & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalAnd & n) { }
     virtual Ret visit_post(const Nodecl::VectorLogicalAnd & n) { }
     virtual Ret visit(const Nodecl::VectorLogicalAnd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLogicalOr & n) { }
     virtual Ret visit_post(const Nodecl::VectorLogicalOr & n) { }
     virtual Ret visit(const Nodecl::VectorLogicalOr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseNot & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseNot & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseNot & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseAnd & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseAnd & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseAnd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseOr & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseOr & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseOr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseXor & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseXor & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseXor & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseShl & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseShl & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseShl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorArithmeticShr & n) { }
     virtual Ret visit_post(const Nodecl::VectorArithmeticShr & n) { }
     virtual Ret visit(const Nodecl::VectorArithmeticShr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorBitwiseShr & n) { }
     virtual Ret visit_post(const Nodecl::VectorBitwiseShr & n) { }
     virtual Ret visit(const Nodecl::VectorBitwiseShr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorAlignRight & n) { }
     virtual Ret visit_post(const Nodecl::VectorAlignRight & n) { }
     virtual Ret visit(const Nodecl::VectorAlignRight & n)
     {
        this->visit_pre(n);
        this->walk(n.get_left_vector());
        this->walk(n.get_right_vector());
        this->walk(n.get_num_elements());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorAssignment & n) { }
     virtual Ret visit_post(const Nodecl::VectorAssignment & n) { }
     virtual Ret visit(const Nodecl::VectorAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->walk(n.get_has_been_defined());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorStore & n) { }
     virtual Ret visit_post(const Nodecl::VectorStore & n) { }
     virtual Ret visit(const Nodecl::VectorStore & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->walk(n.get_flags());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorScatter & n) { }
     virtual Ret visit_post(const Nodecl::VectorScatter & n) { }
     virtual Ret visit(const Nodecl::VectorScatter & n)
     {
        this->visit_pre(n);
        this->walk(n.get_base());
        this->walk(n.get_strides());
        this->walk(n.get_source());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLoad & n) { }
     virtual Ret visit_post(const Nodecl::VectorLoad & n) { }
     virtual Ret visit(const Nodecl::VectorLoad & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->walk(n.get_flags());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorGather & n) { }
     virtual Ret visit_post(const Nodecl::VectorGather & n) { }
     virtual Ret visit(const Nodecl::VectorGather & n)
     {
        this->visit_pre(n);
        this->walk(n.get_base());
        this->walk(n.get_strides());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorPromotion & n) { }
     virtual Ret visit_post(const Nodecl::VectorPromotion & n) { }
     virtual Ret visit(const Nodecl::VectorPromotion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorPrefetch & n) { }
     virtual Ret visit_post(const Nodecl::VectorPrefetch & n) { }
     virtual Ret visit(const Nodecl::VectorPrefetch & n)
     {
        this->visit_pre(n);
        this->walk(n.get_address());
        this->walk(n.get_prefetch_kind());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLiteral & n) { }
     virtual Ret visit_post(const Nodecl::VectorLiteral & n) { }
     virtual Ret visit(const Nodecl::VectorLiteral & n)
     {
        this->visit_pre(n);
        this->walk(n.get_scalar_values());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLaneId & n) { }
     virtual Ret visit_post(const Nodecl::VectorLaneId & n) { }
     virtual Ret visit(const Nodecl::VectorLaneId & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorConversion & n) { }
     virtual Ret visit_post(const Nodecl::VectorConversion & n) { }
     virtual Ret visit(const Nodecl::VectorConversion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorCast & n) { }
     virtual Ret visit_post(const Nodecl::VectorCast & n) { }
     virtual Ret visit(const Nodecl::VectorCast & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorFunctionCall & n) { }
     virtual Ret visit_post(const Nodecl::VectorFunctionCall & n) { }
     virtual Ret visit(const Nodecl::VectorFunctionCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_function_call());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorFabs & n) { }
     virtual Ret visit_post(const Nodecl::VectorFabs & n) { }
     virtual Ret visit(const Nodecl::VectorFabs & n)
     {
        this->visit_pre(n);
        this->walk(n.get_argument());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorSincos & n) { }
     virtual Ret visit_post(const Nodecl::VectorSincos & n) { }
     virtual Ret visit(const Nodecl::VectorSincos & n)
     {
        this->visit_pre(n);
        this->walk(n.get_source());
        this->walk(n.get_sin_pointer());
        this->walk(n.get_cos_pointer());
        this->walk(n.get_mask());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAssignment & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskAssignment & n) { }
     virtual Ret visit(const Nodecl::VectorMaskAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskConversion & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskConversion & n) { }
     virtual Ret visit(const Nodecl::VectorMaskConversion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskNot & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskNot & n) { }
     virtual Ret visit(const Nodecl::VectorMaskNot & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd & n) { }
     virtual Ret visit(const Nodecl::VectorMaskAnd & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskOr & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskOr & n) { }
     virtual Ret visit(const Nodecl::VectorMaskOr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskXor & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskXor & n) { }
     virtual Ret visit(const Nodecl::VectorMaskXor & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd1Not & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd1Not & n) { }
     virtual Ret visit(const Nodecl::VectorMaskAnd1Not & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorMaskAnd2Not & n) { }
     virtual Ret visit_post(const Nodecl::VectorMaskAnd2Not & n) { }
     virtual Ret visit(const Nodecl::VectorMaskAnd2Not & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorLoop & n) { }
     virtual Ret visit_post(const Nodecl::VectorLoop & n) { }
     virtual Ret visit(const Nodecl::VectorLoop & n)
     {
        this->visit_pre(n);
        this->walk(n.get_peeling());
        this->walk(n.get_main_loop());
        this->walk(n.get_epilog());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::NoexceptImplicitTrue & n) { }
     virtual Ret visit_post(const Nodecl::NoexceptImplicitTrue & n) { }
     virtual Ret visit(const Nodecl::NoexceptImplicitTrue & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ErrExpr & n) { }
     virtual Ret visit_post(const Nodecl::ErrExpr & n) { }
     virtual Ret visit(const Nodecl::ErrExpr & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Conversion & n) { }
     virtual Ret visit_post(const Nodecl::Conversion & n) { }
     virtual Ret visit(const Nodecl::Conversion & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nest());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Dummy & n) { }
     virtual Ret visit_post(const Nodecl::Dummy & n) { }
     virtual Ret visit(const Nodecl::Dummy & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MultiExpression & n) { }
     virtual Ret visit_post(const Nodecl::MultiExpression & n) { }
     virtual Ret visit(const Nodecl::MultiExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_iterators());
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Unknown & n) { }
     virtual Ret visit_post(const Nodecl::Unknown & n) { }
     virtual Ret visit(const Nodecl::Unknown & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranAlternateReturnArgument & n) { }
     virtual Ret visit_post(const Nodecl::FortranAlternateReturnArgument & n) { }
     virtual Ret visit(const Nodecl::FortranAlternateReturnArgument & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::RangeDiscrete & n) { }
     virtual Ret visit_post(const Nodecl::RangeDiscrete & n) { }
     virtual Ret visit(const Nodecl::RangeDiscrete & n)
     {
        this->visit_pre(n);
        this->walk(n.get_discrete_seq());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranWherePair & n) { }
     virtual Ret visit_post(const Nodecl::FortranWherePair & n) { }
     virtual Ret visit(const Nodecl::FortranWherePair & n)
     {
        this->visit_pre(n);
        this->walk(n.get_mask());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GxxTrait & n) { }
     virtual Ret visit_post(const Nodecl::GxxTrait & n) { }
     virtual Ret visit(const Nodecl::GxxTrait & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::InductionVarExpr & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::InductionVarExpr & n) { }
     virtual Ret visit(const Nodecl::Analysis::InductionVarExpr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_variable());
        this->walk(n.get_lower());
        this->walk(n.get_upper());
        this->walk(n.get_stride());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::CombinedWithParallel & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::CombinedWithParallel & n) { }
     virtual Ret visit(const Nodecl::OpenMP::CombinedWithParallel & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FunctionTaskParsingContext & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::FunctionTaskParsingContext & n) { }
     virtual Ret visit(const Nodecl::OpenMP::FunctionTaskParsingContext & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskExpression & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskExpression & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TaskExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_join_task());
        this->walk(n.get_task_calls());
        this->walk(n.get_sequential_code());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NumTasks & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::NumTasks & n) { }
     virtual Ret visit(const Nodecl::OpenMP::NumTasks & n)
     {
        this->visit_pre(n);
        this->walk(n.get_num_tasks());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Grainsize & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Grainsize & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Grainsize & n)
     {
        this->visit_pre(n);
        this->walk(n.get_grainsize());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Chunksize & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Chunksize & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Chunksize & n)
     {
        this->visit_pre(n);
        this->walk(n.get_chunksize());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ConditionalExpression & n) { }
     virtual Ret visit_post(const Nodecl::ConditionalExpression & n) { }
     virtual Ret visit(const Nodecl::ConditionalExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->walk(n.get_true());
        this->walk(n.get_false());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Reference & n) { }
     virtual Ret visit_post(const Nodecl::Reference & n) { }
     virtual Ret visit(const Nodecl::Reference & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Comma & n) { }
     virtual Ret visit_post(const Nodecl::Comma & n) { }
     virtual Ret visit(const Nodecl::Comma & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Throw & n) { }
     virtual Ret visit_post(const Nodecl::Throw & n) { }
     virtual Ret visit(const Nodecl::Throw & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VirtualFunctionCall & n) { }
     virtual Ret visit_post(const Nodecl::VirtualFunctionCall & n) { }
     virtual Ret visit(const Nodecl::VirtualFunctionCall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_called());
        this->walk(n.get_arguments());
        this->walk(n.get_function_form());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MulAssignment & n) { }
     virtual Ret visit_post(const Nodecl::MulAssignment & n) { }
     virtual Ret visit(const Nodecl::MulAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::DivAssignment & n) { }
     virtual Ret visit_post(const Nodecl::DivAssignment & n) { }
     virtual Ret visit(const Nodecl::DivAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::AddAssignment & n) { }
     virtual Ret visit_post(const Nodecl::AddAssignment & n) { }
     virtual Ret visit(const Nodecl::AddAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MinusAssignment & n) { }
     virtual Ret visit_post(const Nodecl::MinusAssignment & n) { }
     virtual Ret visit(const Nodecl::MinusAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShlAssignment & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseShlAssignment & n) { }
     virtual Ret visit(const Nodecl::BitwiseShlAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseShrAssignment & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseShrAssignment & n) { }
     virtual Ret visit(const Nodecl::BitwiseShrAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ArithmeticShrAssignment & n) { }
     virtual Ret visit_post(const Nodecl::ArithmeticShrAssignment & n) { }
     virtual Ret visit(const Nodecl::ArithmeticShrAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseAndAssignment & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseAndAssignment & n) { }
     virtual Ret visit(const Nodecl::BitwiseAndAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseOrAssignment & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseOrAssignment & n) { }
     virtual Ret visit(const Nodecl::BitwiseOrAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BitwiseXorAssignment & n) { }
     virtual Ret visit_post(const Nodecl::BitwiseXorAssignment & n) { }
     virtual Ret visit(const Nodecl::BitwiseXorAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ModAssignment & n) { }
     virtual Ret visit_post(const Nodecl::ModAssignment & n) { }
     virtual Ret visit(const Nodecl::ModAssignment & n)
     {
        this->visit_pre(n);
        this->walk(n.get_lhs());
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Preincrement & n) { }
     virtual Ret visit_post(const Nodecl::Preincrement & n) { }
     virtual Ret visit(const Nodecl::Preincrement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Postincrement & n) { }
     virtual Ret visit_post(const Nodecl::Postincrement & n) { }
     virtual Ret visit(const Nodecl::Postincrement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Predecrement & n) { }
     virtual Ret visit_post(const Nodecl::Predecrement & n) { }
     virtual Ret visit(const Nodecl::Predecrement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Postdecrement & n) { }
     virtual Ret visit_post(const Nodecl::Postdecrement & n) { }
     virtual Ret visit(const Nodecl::Postdecrement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Sizeof & n) { }
     virtual Ret visit_post(const Nodecl::Sizeof & n) { }
     virtual Ret visit(const Nodecl::Sizeof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_size_type());
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Alignof & n) { }
     virtual Ret visit_post(const Nodecl::Alignof & n) { }
     virtual Ret visit(const Nodecl::Alignof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_align_type());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Offset & n) { }
     virtual Ret visit_post(const Nodecl::Offset & n) { }
     virtual Ret visit(const Nodecl::Offset & n)
     {
        this->visit_pre(n);
        this->walk(n.get_base());
        this->walk(n.get_offset());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Typeid & n) { }
     virtual Ret visit_post(const Nodecl::Typeid & n) { }
     virtual Ret visit(const Nodecl::Typeid & n)
     {
        this->visit_pre(n);
        this->walk(n.get_arg());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::New & n) { }
     virtual Ret visit_post(const Nodecl::New & n) { }
     virtual Ret visit(const Nodecl::New & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->walk(n.get_init_real_type());
        this->walk(n.get_placement());
        this->walk(n.get_alloc_func());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Delete & n) { }
     virtual Ret visit_post(const Nodecl::Delete & n) { }
     virtual Ret visit(const Nodecl::Delete & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::DeleteArray & n) { }
     virtual Ret visit_post(const Nodecl::DeleteArray & n) { }
     virtual Ret visit(const Nodecl::DeleteArray & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PointerToMember & n) { }
     virtual Ret visit_post(const Nodecl::PointerToMember & n) { }
     virtual Ret visit(const Nodecl::PointerToMember & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::RealPart & n) { }
     virtual Ret visit_post(const Nodecl::RealPart & n) { }
     virtual Ret visit(const Nodecl::RealPart & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ImagPart & n) { }
     virtual Ret visit_post(const Nodecl::ImagPart & n) { }
     virtual Ret visit(const Nodecl::ImagPart & n)
     {
        this->visit_pre(n);
        this->walk(n.get_rhs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Offsetof & n) { }
     virtual Ret visit_post(const Nodecl::Offsetof & n) { }
     virtual Ret visit(const Nodecl::Offsetof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_offset_type());
        this->walk(n.get_designator());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Shaping & n) { }
     virtual Ret visit_post(const Nodecl::Shaping & n) { }
     virtual Ret visit(const Nodecl::Shaping & n)
     {
        this->visit_pre(n);
        this->walk(n.get_postfix());
        this->walk(n.get_shape());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PseudoDestructorName & n) { }
     virtual Ret visit_post(const Nodecl::PseudoDestructorName & n) { }
     virtual Ret visit(const Nodecl::PseudoDestructorName & n)
     {
        this->visit_pre(n);
        this->walk(n.get_accessed());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorConditionalExpression & n) { }
     virtual Ret visit_post(const Nodecl::VectorConditionalExpression & n) { }
     virtual Ret visit(const Nodecl::VectorConditionalExpression & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->walk(n.get_true());
        this->walk(n.get_false());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VlaWildcard & n) { }
     virtual Ret visit_post(const Nodecl::VlaWildcard & n) { }
     virtual Ret visit(const Nodecl::VlaWildcard & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GxxBuiltinAddressof & n) { }
     virtual Ret visit_post(const Nodecl::GxxBuiltinAddressof & n) { }
     virtual Ret visit(const Nodecl::GxxBuiltinAddressof & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::GccAsmOperand & n) { }
     virtual Ret visit_post(const Nodecl::GccAsmOperand & n) { }
     virtual Ret visit(const Nodecl::GccAsmOperand & n)
     {
        this->visit_pre(n);
        this->walk(n.get_identifier());
        this->walk(n.get_constraint());
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Assert & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Assert & n) { }
     virtual Ret visit(const Nodecl::Analysis::Assert & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IntegerLiteral & n) { }
     virtual Ret visit_post(const Nodecl::IntegerLiteral & n) { }
     virtual Ret visit(const Nodecl::IntegerLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FloatingLiteral & n) { }
     virtual Ret visit_post(const Nodecl::FloatingLiteral & n) { }
     virtual Ret visit(const Nodecl::FloatingLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::ComplexLiteral & n) { }
     virtual Ret visit_post(const Nodecl::ComplexLiteral & n) { }
     virtual Ret visit(const Nodecl::ComplexLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::BooleanLiteral & n) { }
     virtual Ret visit_post(const Nodecl::BooleanLiteral & n) { }
     virtual Ret visit(const Nodecl::BooleanLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepIn & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::DepIn & n) { }
     virtual Ret visit(const Nodecl::OpenMP::DepIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepOut & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::DepOut & n) { }
     virtual Ret visit(const Nodecl::OpenMP::DepOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DepInout & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::DepInout & n) { }
     virtual Ret visit(const Nodecl::OpenMP::DepInout & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepConcurrent & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepConcurrent & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepConcurrent & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepCommutative & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepCommutative & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepCommutative & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepReduction & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepReduction & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakReduction & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakReduction & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepInPrivate & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepInPrivate & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepInPrivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakIn & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakIn & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakOut & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakOut & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakInout & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakInout & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakInout & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::DepWeakCommutative & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::DepWeakCommutative & n) { }
     virtual Ret visit(const Nodecl::OmpSs::DepWeakCommutative & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Type & n) { }
     virtual Ret visit_post(const Nodecl::Type & n) { }
     virtual Ret visit(const Nodecl::Type & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PragmaCustomClause & n) { }
     virtual Ret visit_post(const Nodecl::PragmaCustomClause & n) { }
     virtual Ret visit(const Nodecl::PragmaCustomClause & n)
     {
        this->visit_pre(n);
        this->walk(n.get_arguments());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDecl & n) { }
     virtual Ret visit_post(const Nodecl::CxxDecl & n) { }
     virtual Ret visit(const Nodecl::CxxDecl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDef & n) { }
     virtual Ret visit_post(const Nodecl::CxxDef & n) { }
     virtual Ret visit(const Nodecl::CxxDef & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitInstantiationDef & n) { }
     virtual Ret visit_post(const Nodecl::CxxExplicitInstantiationDef & n) { }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDef & n)
     {
        this->visit_pre(n);
        this->walk(n.get_declarator_name());
        this->walk(n.get_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxExplicitInstantiationDecl & n) { }
     virtual Ret visit_post(const Nodecl::CxxExplicitInstantiationDecl & n) { }
     virtual Ret visit(const Nodecl::CxxExplicitInstantiationDecl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_declarator_name());
        this->walk(n.get_context());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxUsingNamespace & n) { }
     virtual Ret visit_post(const Nodecl::CxxUsingNamespace & n) { }
     virtual Ret visit(const Nodecl::CxxUsingNamespace & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->walk(n.get_used_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxUsingDecl & n) { }
     virtual Ret visit_post(const Nodecl::CxxUsingDecl & n) { }
     virtual Ret visit(const Nodecl::CxxUsingDecl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_context());
        this->walk(n.get_used_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxParseLater & n) { }
     virtual Ret visit_post(const Nodecl::CxxParseLater & n) { }
     virtual Ret visit(const Nodecl::CxxParseLater & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxImplicitInstantiation & n) { }
     virtual Ret visit_post(const Nodecl::CxxImplicitInstantiation & n) { }
     virtual Ret visit(const Nodecl::CxxImplicitInstantiation & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::TemplateFunctionCode & n) { }
     virtual Ret visit_post(const Nodecl::TemplateFunctionCode & n) { }
     virtual Ret visit(const Nodecl::TemplateFunctionCode & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statements());
        this->walk(n.get_initializers());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Verbatim & n) { }
     virtual Ret visit_post(const Nodecl::Verbatim & n) { }
     virtual Ret visit(const Nodecl::Verbatim & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranImpliedDo & n) { }
     virtual Ret visit_post(const Nodecl::FortranImpliedDo & n) { }
     virtual Ret visit(const Nodecl::FortranImpliedDo & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->walk(n.get_range());
        this->walk(n.get_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Alloca & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Alloca & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Alloca & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::SharedAndAlloca & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::SharedAndAlloca & n) { }
     virtual Ret visit(const Nodecl::OmpSs::SharedAndAlloca & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::WeakReduction & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::WeakReduction & n) { }
     virtual Ret visit(const Nodecl::OmpSs::WeakReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Cost & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Cost & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Cost & n)
     {
        this->visit_pre(n);
        this->walk(n.get_cost());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskLabel & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskLabel & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TaskLabel & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::TryBlock & n) { }
     virtual Ret visit_post(const Nodecl::TryBlock & n) { }
     virtual Ret visit(const Nodecl::TryBlock & n)
     {
        this->visit_pre(n);
        this->walk(n.get_statement());
        this->walk(n.get_catch_handlers());
        this->walk(n.get_any());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxForRanged & n) { }
     virtual Ret visit_post(const Nodecl::CxxForRanged & n) { }
     virtual Ret visit(const Nodecl::CxxForRanged & n)
     {
        this->visit_pre(n);
        this->walk(n.get_range());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CatchHandler & n) { }
     virtual Ret visit_post(const Nodecl::CatchHandler & n) { }
     virtual Ret visit(const Nodecl::CatchHandler & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxStaticAssert & n) { }
     virtual Ret visit_post(const Nodecl::CxxStaticAssert & n) { }
     virtual Ret visit(const Nodecl::CxxStaticAssert & n)
     {
        this->visit_pre(n);
        this->walk(n.get_predicate());
        this->walk(n.get_message());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Aligned & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Aligned & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Aligned & n)
     {
        this->visit_pre(n);
        this->walk(n.get_aligned_expressions());
        this->walk(n.get_alignment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::VectorLength & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::VectorLength & n) { }
     virtual Ret visit(const Nodecl::OpenMP::VectorLength & n)
     {
        this->visit_pre(n);
        this->walk(n.get_vector_length());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::VectorLengthFor & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::VectorLengthFor & n) { }
     virtual Ret visit(const Nodecl::OpenMP::VectorLengthFor & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Uniform & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Uniform & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Uniform & n)
     {
        this->visit_pre(n);
        this->walk(n.get_uniform_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Linear & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Linear & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Linear & n)
     {
        this->visit_pre(n);
        this->walk(n.get_linear_expressions());
        this->walk(n.get_step());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Suitable & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Suitable & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Suitable & n)
     {
        this->visit_pre(n);
        this->walk(n.get_suitable_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Overlap & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Overlap & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Overlap & n)
     {
        this->visit_pre(n);
        this->walk(n.get_overlap_expressions());
        this->walk(n.get_min_group_loads());
        this->walk(n.get_max_group_registers());
        this->walk(n.get_max_groups());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Unroll & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Unroll & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Unroll & n)
     {
        this->visit_pre(n);
        this->walk(n.get_unroll_factor());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::UnrollAndJam & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::UnrollAndJam & n) { }
     virtual Ret visit(const Nodecl::OpenMP::UnrollAndJam & n)
     {
        this->visit_pre(n);
        this->walk(n.get_unroll_factor());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Nontemporal & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Nontemporal & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Nontemporal & n)
     {
        this->visit_pre(n);
        this->walk(n.get_nontemporal_expressions());
        this->walk(n.get_flags());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Prefetch & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Prefetch & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Prefetch & n)
     {
        this->visit_pre(n);
        this->walk(n.get_distances());
        this->walk(n.get_strategy());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoPrefetch & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::NoPrefetch & n) { }
     virtual Ret visit(const Nodecl::OpenMP::NoPrefetch & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Mask & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Mask & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Mask & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NoMask & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::NoMask & n) { }
     virtual Ret visit(const Nodecl::OpenMP::NoMask & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::SimdReduction & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::SimdReduction & n) { }
     virtual Ret visit(const Nodecl::OpenMP::SimdReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AssertDecl & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::AssertDecl & n) { }
     virtual Ret visit(const Nodecl::Analysis::AssertDecl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxCaptureCopy & n) { }
     virtual Ret visit_post(const Nodecl::CxxCaptureCopy & n) { }
     virtual Ret visit(const Nodecl::CxxCaptureCopy & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxCaptureReference & n) { }
     virtual Ret visit_post(const Nodecl::CxxCaptureReference & n) { }
     virtual Ret visit(const Nodecl::CxxCaptureReference & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormTemplateId & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormTemplateId & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormTemplateId & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormImplicit & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormImplicit & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormImplicit & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormBinaryInfix & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormBinaryInfix & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormBinaryInfix & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormUnaryPrefix & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormUnaryPrefix & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPrefix & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormUnaryPostfix & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormUnaryPostfix & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormUnaryPostfix & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormDefaultInit & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormDefaultInit & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInit & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxFunctionFormDefaultInitBraced & n) { }
     virtual Ret visit_post(const Nodecl::CxxFunctionFormDefaultInitBraced & n) { }
     virtual Ret visit(const Nodecl::CxxFunctionFormDefaultInitBraced & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::For & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::For & n) { }
     virtual Ret visit(const Nodecl::OpenMP::For & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_loop());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ForAppendix & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::ForAppendix & n) { }
     virtual Ret visit(const Nodecl::OpenMP::ForAppendix & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_loop());
        this->walk(n.get_prependix());
        this->walk(n.get_appendix());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::AsmDefinition & n) { }
     virtual Ret visit_post(const Nodecl::AsmDefinition & n) { }
     virtual Ret visit(const Nodecl::AsmDefinition & n)
     {
        this->visit_pre(n);
        this->walk(n.get_asm_text());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::DeclareTarget & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::DeclareTarget & n) { }
     virtual Ret visit(const Nodecl::OpenMP::DeclareTarget & n)
     {
        this->visit_pre(n);
        this->walk(n.get_declarations());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Taskloop & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Taskloop & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Taskloop & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_loop());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Release & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Release & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Release & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TaskIsTaskwait & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::TaskIsTaskwait & n) { }
     virtual Ret visit(const Nodecl::OpenMP::TaskIsTaskwait & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskIsLoop & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskIsLoop & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsLoop & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::TaskIsTaskCall & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::TaskIsTaskCall & n) { }
     virtual Ret visit(const Nodecl::OmpSs::TaskIsTaskCall & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Task & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Task & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Task & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachDefExpr & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::ReachDefExpr & n) { }
     virtual Ret visit(const Nodecl::Analysis::ReachDefExpr & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expression());
        this->walk(n.get_value());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::BarrierAtEnd & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::BarrierAtEnd & n) { }
     virtual Ret visit(const Nodecl::OpenMP::BarrierAtEnd & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Device & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Device & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Device & n)
     {
        this->visit_pre(n);
        this->walk(n.get_device_id());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapTo & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MapTo & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MapTo & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_to());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapFrom & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MapFrom & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MapFrom & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_from());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapToFrom & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MapToFrom & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MapToFrom & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_tofrom());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MapAlloc & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MapAlloc & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MapAlloc & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_alloc());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MotionTo & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MotionTo & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MotionTo & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_to());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::MotionFrom & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::MotionFrom & n) { }
     virtual Ret visit(const Nodecl::OpenMP::MotionFrom & n)
     {
        this->visit_pre(n);
        this->walk(n.get_map_from());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::NumTeams & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::NumTeams & n) { }
     virtual Ret visit(const Nodecl::OpenMP::NumTeams & n)
     {
        this->visit_pre(n);
        this->walk(n.get_num_teams());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ThreadLimit & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::ThreadLimit & n) { }
     virtual Ret visit(const Nodecl::OpenMP::ThreadLimit & n)
     {
        this->visit_pre(n);
        this->walk(n.get_thread_limit());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetTaskUndeferred & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetTaskUndeferred & n) { }
     virtual Ret visit(const Nodecl::OpenMP::TargetTaskUndeferred & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Firstprivate & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Firstprivate & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Firstprivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Lastprivate & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Lastprivate & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Lastprivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::FirstLastprivate & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::FirstLastprivate & n) { }
     virtual Ret visit(const Nodecl::OpenMP::FirstLastprivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Shared & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Shared & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Shared & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Threadprivate & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Threadprivate & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Threadprivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Private & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Private & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Private & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Auto & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Auto & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Auto & n)
     {
        this->visit_pre(n);
        this->walk(n.get_symbols());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Reduction & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Reduction & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Reduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TaskReduction & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::TaskReduction & n) { }
     virtual Ret visit(const Nodecl::OpenMP::TaskReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::InReduction & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::InReduction & n) { }
     virtual Ret visit(const Nodecl::OpenMP::InReduction & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::PrivateInit & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::PrivateInit & n) { }
     virtual Ret visit(const Nodecl::OpenMP::PrivateInit & n)
     {
        this->visit_pre(n);
        this->walk(n.get_value());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranAllocateStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranAllocateStatement & n) { }
     virtual Ret visit(const Nodecl::FortranAllocateStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->walk(n.get_options());
        this->walk(n.get_allocate_type());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranArithmeticIfStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranArithmeticIfStatement & n) { }
     virtual Ret visit(const Nodecl::FortranArithmeticIfStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->walk(n.get_lower());
        this->walk(n.get_equal());
        this->walk(n.get_upper());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranAssignedGotoStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranAssignedGotoStatement & n) { }
     virtual Ret visit(const Nodecl::FortranAssignedGotoStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_index());
        this->walk(n.get_label_seq());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranOpenStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranOpenStatement & n) { }
     virtual Ret visit(const Nodecl::FortranOpenStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranCloseStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranCloseStatement & n) { }
     virtual Ret visit(const Nodecl::FortranCloseStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranComputedGotoStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranComputedGotoStatement & n) { }
     virtual Ret visit(const Nodecl::FortranComputedGotoStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_label_seq());
        this->walk(n.get_index());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranAlternateReturnStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranAlternateReturnStatement & n) { }
     virtual Ret visit(const Nodecl::FortranAlternateReturnStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_index());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranDeallocateStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranDeallocateStatement & n) { }
     virtual Ret visit(const Nodecl::FortranDeallocateStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->walk(n.get_options());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranIoStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranIoStatement & n) { }
     virtual Ret visit(const Nodecl::FortranIoStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_io_spec_list());
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranLabelAssignStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranLabelAssignStatement & n) { }
     virtual Ret visit(const Nodecl::FortranLabelAssignStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_value());
        this->walk(n.get_label_var());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranNullifyStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranNullifyStatement & n) { }
     virtual Ret visit(const Nodecl::FortranNullifyStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranPrintStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranPrintStatement & n) { }
     virtual Ret visit(const Nodecl::FortranPrintStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_format());
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranReadStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranReadStatement & n) { }
     virtual Ret visit(const Nodecl::FortranReadStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_io_spec_list());
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranWriteStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranWriteStatement & n) { }
     virtual Ret visit(const Nodecl::FortranWriteStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_io_spec_list());
        this->walk(n.get_io_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranStopStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranStopStatement & n) { }
     virtual Ret visit(const Nodecl::FortranStopStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_stop_code());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranPauseStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranPauseStatement & n) { }
     virtual Ret visit(const Nodecl::FortranPauseStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pause_code());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranEntryStatement & n) { }
     virtual Ret visit_post(const Nodecl::FortranEntryStatement & n) { }
     virtual Ret visit(const Nodecl::FortranEntryStatement & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranWhere & n) { }
     virtual Ret visit_post(const Nodecl::FortranWhere & n) { }
     virtual Ret visit(const Nodecl::FortranWhere & n)
     {
        this->visit_pre(n);
        this->walk(n.get_where_set());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FortranForall & n) { }
     virtual Ret visit_post(const Nodecl::FortranForall & n) { }
     virtual Ret visit(const Nodecl::FortranForall & n)
     {
        this->visit_pre(n);
        this->walk(n.get_loop_control());
        this->walk(n.get_mask());
        this->walk(n.get_statement());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetData & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetData & n) { }
     virtual Ret visit(const Nodecl::OpenMP::TargetData & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Target & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Target & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Target & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::TargetUpdate & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::TargetUpdate & n) { }
     virtual Ret visit(const Nodecl::OpenMP::TargetUpdate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Teams & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Teams & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Teams & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_statements());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Distribute & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Distribute & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Distribute & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->walk(n.get_loop());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::MaskLiteral & n) { }
     virtual Ret visit_post(const Nodecl::MaskLiteral & n) { }
     virtual Ret visit(const Nodecl::MaskLiteral & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Store & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Store & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Store & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Load & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Load & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Load & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Init & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Init & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Init & n)
     {
        this->visit_pre(n);
        this->walk(n.get_environment());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Shutdown & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Shutdown & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Shutdown & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Data & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Data & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Data & n)
     {
        this->visit_pre(n);
        this->walk(n.get_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Level & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Level & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Level & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Id & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Id & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Id & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Comm & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Comm & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Comm & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::If & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::If & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::If & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Checkpoint::Kind & n) { }
     virtual Ret visit_post(const Nodecl::Checkpoint::Kind & n) { }
     virtual Ret visit(const Nodecl::Checkpoint::Kind & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::SourceComment & n) { }
     virtual Ret visit_post(const Nodecl::SourceComment & n) { }
     virtual Ret visit(const Nodecl::SourceComment & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Target & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Target & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Target & n)
     {
        this->visit_pre(n);
        this->walk(n.get_devices());
        this->walk(n.get_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::RangeLoopControl & n) { }
     virtual Ret visit_post(const Nodecl::RangeLoopControl & n) { }
     virtual Ret visit(const Nodecl::RangeLoopControl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_induction_variable());
        this->walk(n.get_lower());
        this->walk(n.get_upper());
        this->walk(n.get_step());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IteratorLoopControl & n) { }
     virtual Ret visit_post(const Nodecl::IteratorLoopControl & n) { }
     virtual Ret visit(const Nodecl::IteratorLoopControl & n)
     {
        this->visit_pre(n);
        this->walk(n.get_range_iterator());
        this->walk(n.get_initializer());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::CriticalName & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::CriticalName & n) { }
     virtual Ret visit(const Nodecl::OpenMP::CriticalName & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameSimple & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepNameSimple & n) { }
     virtual Ret visit(const Nodecl::CxxDepNameSimple & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::UpperExposed & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::UpperExposed & n) { }
     virtual Ret visit(const Nodecl::Analysis::UpperExposed & n)
     {
        this->visit_pre(n);
        this->walk(n.get_upper_exposed_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Defined & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Defined & n) { }
     virtual Ret visit(const Nodecl::Analysis::Defined & n)
     {
        this->visit_pre(n);
        this->walk(n.get_defined_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Undefined & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Undefined & n) { }
     virtual Ret visit(const Nodecl::Analysis::Undefined & n)
     {
        this->visit_pre(n);
        this->walk(n.get_undefined_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::LiveIn & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::LiveIn & n) { }
     virtual Ret visit(const Nodecl::Analysis::LiveIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_live_in_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::LiveOut & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::LiveOut & n) { }
     virtual Ret visit(const Nodecl::Analysis::LiveOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_live_out_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Dead & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Dead & n) { }
     virtual Ret visit(const Nodecl::Analysis::Dead & n)
     {
        this->visit_pre(n);
        this->walk(n.get_dead_exprs());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachingDefinitionIn & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::ReachingDefinitionIn & n) { }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reaching_definitions_in());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::ReachingDefinitionOut & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::ReachingDefinitionOut & n) { }
     virtual Ret visit(const Nodecl::Analysis::ReachingDefinitionOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reaching_definitions_out());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::InductionVariable & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::InductionVariable & n) { }
     virtual Ret visit(const Nodecl::Analysis::InductionVariable & n)
     {
        this->visit_pre(n);
        this->walk(n.get_induction_variables());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Firstprivate & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Firstprivate & n) { }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Firstprivate & n)
     {
        this->visit_pre(n);
        this->walk(n.get_scoped_variables());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Private & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Private & n) { }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Private & n)
     {
        this->visit_pre(n);
        this->walk(n.get_scoped_variables());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::AutoScope::Shared & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::AutoScope::Shared & n) { }
     virtual Ret visit(const Nodecl::Analysis::AutoScope::Shared & n)
     {
        this->visit_pre(n);
        this->walk(n.get_scoped_variables());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Range & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Range & n) { }
     virtual Ret visit(const Nodecl::Analysis::Range & n)
     {
        this->visit_pre(n);
        this->walk(n.get_range_variables());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::AutoStorage & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::AutoStorage & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::AutoStorage & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::Dead & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::Dead & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Dead & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentFp & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentFp & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentFp & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentP & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentP & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentP & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentIn & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentIn & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentOut & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentOut & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentInPointed & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentInPointed & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentInPointed & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::IncoherentOutPointed & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::Analysis::Correctness::Race & n) { }
     virtual Ret visit_post(const Nodecl::Analysis::Correctness::Race & n) { }
     virtual Ret visit(const Nodecl::Analysis::Correctness::Race & n)
     {
        this->visit_pre(n);
        this->walk(n.get_correctness_vars());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::VectorFunctionCode & n) { }
     virtual Ret visit_post(const Nodecl::VectorFunctionCode & n) { }
     virtual Ret visit(const Nodecl::VectorFunctionCode & n)
     {
        this->visit_pre(n);
        this->walk(n.get_function_code());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::UpcSyncStatement & n) { }
     virtual Ret visit_post(const Nodecl::UpcSyncStatement & n) { }
     virtual Ret visit(const Nodecl::UpcSyncStatement & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepGlobalNameNested & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepGlobalNameNested & n) { }
     virtual Ret visit(const Nodecl::CxxDepGlobalNameNested & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxDepNameNested & n) { }
     virtual Ret visit_post(const Nodecl::CxxDepNameNested & n) { }
     virtual Ret visit(const Nodecl::CxxDepNameNested & n)
     {
        this->visit_pre(n);
        this->walk(n.get_items());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::UnknownPragma & n) { }
     virtual Ret visit_post(const Nodecl::UnknownPragma & n) { }
     virtual Ret visit(const Nodecl::UnknownPragma & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::FieldDesignator & n) { }
     virtual Ret visit_post(const Nodecl::FieldDesignator & n) { }
     virtual Ret visit(const Nodecl::FieldDesignator & n)
     {
        this->visit_pre(n);
        this->walk(n.get_field());
        this->walk(n.get_next());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::IndexDesignator & n) { }
     virtual Ret visit_post(const Nodecl::IndexDesignator & n) { }
     virtual Ret visit(const Nodecl::IndexDesignator & n)
     {
        this->visit_pre(n);
        this->walk(n.get_index());
        this->walk(n.get_next());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::PreprocessorLine & n) { }
     virtual Ret visit_post(const Nodecl::PreprocessorLine & n) { }
     virtual Ret visit(const Nodecl::PreprocessorLine & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxInitializer & n) { }
     virtual Ret visit_post(const Nodecl::CxxInitializer & n) { }
     virtual Ret visit(const Nodecl::CxxInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxBracedInitializer & n) { }
     virtual Ret visit_post(const Nodecl::CxxBracedInitializer & n) { }
     virtual Ret visit(const Nodecl::CxxBracedInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxEqualInitializer & n) { }
     virtual Ret visit_post(const Nodecl::CxxEqualInitializer & n) { }
     virtual Ret visit(const Nodecl::CxxEqualInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxParenthesizedInitializer & n) { }
     virtual Ret visit_post(const Nodecl::CxxParenthesizedInitializer & n) { }
     virtual Ret visit(const Nodecl::CxxParenthesizedInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::C99DesignatedInitializer & n) { }
     virtual Ret visit_post(const Nodecl::C99DesignatedInitializer & n) { }
     virtual Ret visit(const Nodecl::C99DesignatedInitializer & n)
     {
        this->visit_pre(n);
        this->walk(n.get_designation());
        this->walk(n.get_init());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::C99FieldDesignator & n) { }
     virtual Ret visit_post(const Nodecl::C99FieldDesignator & n) { }
     virtual Ret visit(const Nodecl::C99FieldDesignator & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::C99IndexDesignator & n) { }
     virtual Ret visit_post(const Nodecl::C99IndexDesignator & n) { }
     virtual Ret visit(const Nodecl::C99IndexDesignator & n)
     {
        this->visit_pre(n);
        this->walk(n.get_expr());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxValuePack & n) { }
     virtual Ret visit_post(const Nodecl::CxxValuePack & n) { }
     virtual Ret visit(const Nodecl::CxxValuePack & n)
     {
        this->visit_pre(n);
        this->walk(n.get_pack());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::CxxValuePackExpanded & n) { }
     virtual Ret visit_post(const Nodecl::CxxValuePackExpanded & n) { }
     virtual Ret visit(const Nodecl::CxxValuePackExpanded & n)
     {
        this->visit_pre(n);
        this->walk(n.get_values());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::If & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::If & n) { }
     virtual Ret visit(const Nodecl::OpenMP::If & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Final & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Final & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Final & n)
     {
        this->visit_pre(n);
        this->walk(n.get_condition());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Priority & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Priority & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Priority & n)
     {
        this->visit_pre(n);
        this->walk(n.get_priority());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Mergeable & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Mergeable & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Mergeable & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::Untied & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::Untied & n) { }
     virtual Ret visit(const Nodecl::OpenMP::Untied & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Wait & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Wait & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Wait & n)
     {
        this->visit_pre(n);
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OpenMP::ReductionItem & n) { }
     virtual Ret visit_post(const Nodecl::OpenMP::ReductionItem & n) { }
     virtual Ret visit(const Nodecl::OpenMP::ReductionItem & n)
     {
        this->visit_pre(n);
        this->walk(n.get_reductor());
        this->walk(n.get_reduced_symbol());
        this->walk(n.get_reduction_type());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyIn & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyIn & n) { }
     virtual Ret visit(const Nodecl::OmpSs::CopyIn & n)
     {
        this->visit_pre(n);
        this->walk(n.get_input_copies());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyOut & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyOut & n) { }
     virtual Ret visit(const Nodecl::OmpSs::CopyOut & n)
     {
        this->visit_pre(n);
        this->walk(n.get_output_copies());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::CopyInout & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::CopyInout & n) { }
     virtual Ret visit(const Nodecl::OmpSs::CopyInout & n)
     {
        this->visit_pre(n);
        this->walk(n.get_inout_copies());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::NDRange & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::NDRange & n) { }
     virtual Ret visit(const Nodecl::OmpSs::NDRange & n)
     {
        this->visit_pre(n);
        this->walk(n.get_ndrange_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::ShMem & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::ShMem & n) { }
     virtual Ret visit(const Nodecl::OmpSs::ShMem & n)
     {
        this->visit_pre(n);
        this->walk(n.get_shmem_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::File & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::File & n) { }
     virtual Ret visit(const Nodecl::OmpSs::File & n)
     {
        this->visit_pre(n);
        this->walk(n.get_filename());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Name & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Name & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Name & n)
     {
        this->visit_pre(n);
        this->walk(n.get_name());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Onto & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Onto & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Onto & n)
     {
        this->visit_pre(n);
        this->walk(n.get_onto_expressions());
        this->visit_post(n);
     }
     virtual Ret visit_pre(const Nodecl::OmpSs::Implements & n) { }
     virtual Ret visit_post(const Nodecl::OmpSs::Implements & n) { }
     virtual Ret visit(const Nodecl::OmpSs::Implements & n)
     {
        this->visit_pre(n);
        this->walk(n.get_device());
        this->walk(n.get_function_name());
        this->visit_post(n);
     }
};

template <typename _Ret>
typename BaseNodeclVisitor<_Ret>::Ret BaseNodeclVisitor<_Ret>::walk(const NodeclBase& n)
{

    if (n.is_null())
        return Ret();
    switch ((int)n.get_kind())
    {
        case AST_NODE_LIST: { TL::ObjectList<Ret> result; AST tree = nodecl_get_ast(n._n); AST it; for_each_element(tree, it) { AST elem = ASTSon1(it);
NodeclBase nb(::_nodecl_wrap(elem)); result.append(this->walk(nb)); } return this->join_list(result); break; }

       case NODECL_VECTOR_FMADD: { return this->visit(static_cast<const Nodecl::VectorFmadd &>(n)); break; }
       case NODECL_VECTOR_DIFFERENT: { return this->visit(static_cast<const Nodecl::VectorDifferent &>(n)); break; }
       case NODECL_OPEN_M_P_CRITICAL_NAME: { return this->visit(static_cast<const Nodecl::OpenMP::CriticalName &>(n)); break; }
       case NODECL_LOGICAL_NOT: { return this->visit(static_cast<const Nodecl::LogicalNot &>(n)); break; }
       case NODECL_STRUCTURED_VALUE: { return this->visit(static_cast<const Nodecl::StructuredValue &>(n)); break; }
       case NODECL_VECTOR_BITWISE_NOT: { return this->visit(static_cast<const Nodecl::VectorBitwiseNot &>(n)); break; }
       case NODECL_C99_DESIGNATED_INITIALIZER: { return this->visit(static_cast<const Nodecl::C99DesignatedInitializer &>(n)); break; }
       case NODECL_VECTOR_ARITHMETIC_SHR: { return this->visit(static_cast<const Nodecl::VectorArithmeticShr &>(n)); break; }
       case NODECL_OPEN_M_P_DIST_SCHEDULE: { return this->visit(static_cast<const Nodecl::OpenMP::DistSchedule &>(n)); break; }
       case NODECL_OPEN_M_P_TASKWAIT: { return this->visit(static_cast<const Nodecl::OpenMP::Taskwait &>(n)); break; }
       case NODECL_OMP_SS_NAME: { return this->visit(static_cast<const Nodecl::OmpSs::Name &>(n)); break; }
       case NODECL_OPEN_M_P_PARALLEL_SIMD_FOR: { return this->visit(static_cast<const Nodecl::OpenMP::ParallelSimdFor &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_OUT_POINTED: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentOutPointed &>(n)); break; }
       case NODECL_FORTRAN_ALLOCATE_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranAllocateStatement &>(n)); break; }
       case NODECL_OMP_SS_DEP_WEAK_REDUCTION: { return this->visit(static_cast<const Nodecl::OmpSs::DepWeakReduction &>(n)); break; }
       case NODECL_VECTOR_RSQRT: { return this->visit(static_cast<const Nodecl::VectorRsqrt &>(n)); break; }
       case NODECL_ANALYSIS_PLUS_INFINITY: { return this->visit(static_cast<const Nodecl::Analysis::PlusInfinity &>(n)); break; }
       case NODECL_VECTOR_SQRT: { return this->visit(static_cast<const Nodecl::VectorSqrt &>(n)); break; }
       case NODECL_STRUCTURED_VALUE_COMPOUND_LITERAL: { return this->visit(static_cast<const Nodecl::StructuredValueCompoundLiteral &>(n)); break; }
       case NODECL_FORTRAN_DEALLOCATE_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranDeallocateStatement &>(n)); break; }
       case NODECL_OPEN_M_P_SIMD_FOR: { return this->visit(static_cast<const Nodecl::OpenMP::SimdFor &>(n)); break; }
       case NODECL_BITWISE_AND: { return this->visit(static_cast<const Nodecl::BitwiseAnd &>(n)); break; }
       case NODECL_VECTOR_FABS: { return this->visit(static_cast<const Nodecl::VectorFabs &>(n)); break; }
       case NODECL_TRY_BLOCK: { return this->visit(static_cast<const Nodecl::TryBlock &>(n)); break; }
       case NODECL_STRUCTURED_VALUE_BRACED_TYPECAST: { return this->visit(static_cast<const Nodecl::StructuredValueBracedTypecast &>(n)); break; }
       case NODECL_OMP_SS_SH_MEM: { return this->visit(static_cast<const Nodecl::OmpSs::ShMem &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_P: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentP &>(n)); break; }
       case NODECL_VECTOR_SCATTER: { return this->visit(static_cast<const Nodecl::VectorScatter &>(n)); break; }
       case NODECL_VECTOR_PREFETCH: { return this->visit(static_cast<const Nodecl::VectorPrefetch &>(n)); break; }
       case NODECL_OMP_SS_TASK_IS_TASK_CALL: { return this->visit(static_cast<const Nodecl::OmpSs::TaskIsTaskCall &>(n)); break; }
       case NODECL_NONTEMPORAL_FLAG: { return this->visit(static_cast<const Nodecl::NontemporalFlag &>(n)); break; }
       case NODECL_FORTRAN_DATA: { return this->visit(static_cast<const Nodecl::FortranData &>(n)); break; }
       case NODECL_OPEN_M_P_UNIFORM: { return this->visit(static_cast<const Nodecl::OpenMP::Uniform &>(n)); break; }
       case NODECL_VECTOR_LITERAL: { return this->visit(static_cast<const Nodecl::VectorLiteral &>(n)); break; }
       case NODECL_OPEN_M_P_BARRIER_SIGNAL: { return this->visit(static_cast<const Nodecl::OpenMP::BarrierSignal &>(n)); break; }
       case NODECL_ANALYSIS_UPPER_EXPOSED: { return this->visit(static_cast<const Nodecl::Analysis::UpperExposed &>(n)); break; }
       case NODECL_OPEN_M_P_TASK_REDUCTION: { return this->visit(static_cast<const Nodecl::OpenMP::TaskReduction &>(n)); break; }
       case NODECL_VECTOR_LOOP: { return this->visit(static_cast<const Nodecl::VectorLoop &>(n)); break; }
       case NODECL_CHECKPOINT_DATA: { return this->visit(static_cast<const Nodecl::Checkpoint::Data &>(n)); break; }
       case NODECL_CXX_CAPTURE_COPY: { return this->visit(static_cast<const Nodecl::CxxCaptureCopy &>(n)); break; }
       case NODECL_OPEN_M_P_VECTOR_LENGTH_FOR: { return this->visit(static_cast<const Nodecl::OpenMP::VectorLengthFor &>(n)); break; }
       case NODECL_ANALYSIS_UNDEFINED: { return this->visit(static_cast<const Nodecl::Analysis::Undefined &>(n)); break; }
       case NODECL_OMP_SS_RELEASE: { return this->visit(static_cast<const Nodecl::OmpSs::Release &>(n)); break; }
       case NODECL_INTEGER_LITERAL: { return this->visit(static_cast<const Nodecl::IntegerLiteral &>(n)); break; }
       case NODECL_CHECKPOINT_COMM: { return this->visit(static_cast<const Nodecl::Checkpoint::Comm &>(n)); break; }
       case NODECL_VECTOR_LOGICAL_NOT: { return this->visit(static_cast<const Nodecl::VectorLogicalNot &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_DEFAULT_INIT: { return this->visit(static_cast<const Nodecl::CxxFunctionFormDefaultInit &>(n)); break; }
       case NODECL_EQUAL: { return this->visit(static_cast<const Nodecl::Equal &>(n)); break; }
       case NODECL_ANALYSIS_RANGE_SUB: { return this->visit(static_cast<const Nodecl::Analysis::RangeSub &>(n)); break; }
       case NODECL_CXX_ARROW_PTR_MEMBER: { return this->visit(static_cast<const Nodecl::CxxArrowPtrMember &>(n)); break; }
       case NODECL_OPEN_M_P_UNROLL: { return this->visit(static_cast<const Nodecl::OpenMP::Unroll &>(n)); break; }
       case NODECL_OPEN_M_P_OVERLAP: { return this->visit(static_cast<const Nodecl::OpenMP::Overlap &>(n)); break; }
       case NODECL_DUMMY: { return this->visit(static_cast<const Nodecl::Dummy &>(n)); break; }
       case NODECL_OPEN_M_P_FOR: { return this->visit(static_cast<const Nodecl::OpenMP::For &>(n)); break; }
       case NODECL_FORTRAN_PRINT_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranPrintStatement &>(n)); break; }
       case NODECL_OPEN_M_P_TARGET_DATA: { return this->visit(static_cast<const Nodecl::OpenMP::TargetData &>(n)); break; }
       case NODECL_OMP_SS_DEP_WEAK_IN: { return this->visit(static_cast<const Nodecl::OmpSs::DepWeakIn &>(n)); break; }
       case NODECL_ARITHMETIC_SHR: { return this->visit(static_cast<const Nodecl::ArithmeticShr &>(n)); break; }
       case NODECL_VECTOR_REDUCTION_MINUS: { return this->visit(static_cast<const Nodecl::VectorReductionMinus &>(n)); break; }
       case NODECL_OMP_SS_WEAK_REDUCTION: { return this->visit(static_cast<const Nodecl::OmpSs::WeakReduction &>(n)); break; }
       case NODECL_IN_PLACE_FLAG: { return this->visit(static_cast<const Nodecl::InPlaceFlag &>(n)); break; }
       case NODECL_OPEN_M_P_FLUSH_MEMORY: { return this->visit(static_cast<const Nodecl::OpenMP::FlushMemory &>(n)); break; }
       case NODECL_OPEN_M_P_MAP_FROM: { return this->visit(static_cast<const Nodecl::OpenMP::MapFrom &>(n)); break; }
       case NODECL_OPEN_M_P_VECTOR_LENGTH: { return this->visit(static_cast<const Nodecl::OpenMP::VectorLength &>(n)); break; }
       case NODECL_DEREFERENCE: { return this->visit(static_cast<const Nodecl::Dereference &>(n)); break; }
       case NODECL_CATCH_HANDLER: { return this->visit(static_cast<const Nodecl::CatchHandler &>(n)); break; }
       case NODECL_FORTRAN_ASSIGNED_GOTO_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranAssignedGotoStatement &>(n)); break; }
       case NODECL_CXX_CAST: { return this->visit(static_cast<const Nodecl::CxxCast &>(n)); break; }
       case NODECL_PRAGMA_CUSTOM_CLAUSE: { return this->visit(static_cast<const Nodecl::PragmaCustomClause &>(n)); break; }
       case NODECL_UNBOUNDED_LOOP_CONTROL: { return this->visit(static_cast<const Nodecl::UnboundedLoopControl &>(n)); break; }
       case NODECL_OPEN_M_P_BARRIER_AT_END: { return this->visit(static_cast<const Nodecl::OpenMP::BarrierAtEnd &>(n)); break; }
       case NODECL_FORTRAN_WHERE_PAIR: { return this->visit(static_cast<const Nodecl::FortranWherePair &>(n)); break; }
       case NODECL_OPEN_M_P_NUM_TASKS: { return this->visit(static_cast<const Nodecl::OpenMP::NumTasks &>(n)); break; }
       case NODECL_OPEN_M_P_WORKSHARE: { return this->visit(static_cast<const Nodecl::OpenMP::Workshare &>(n)); break; }
       case NODECL_OPEN_M_P_MOTION_TO: { return this->visit(static_cast<const Nodecl::OpenMP::MotionTo &>(n)); break; }
       case NODECL_OPEN_M_P_DISTRIBUTE: { return this->visit(static_cast<const Nodecl::OpenMP::Distribute &>(n)); break; }
       case NODECL_OPEN_M_P_PRIVATE: { return this->visit(static_cast<const Nodecl::OpenMP::Private &>(n)); break; }
       case NODECL_OPEN_M_P_SIMD: { return this->visit(static_cast<const Nodecl::OpenMP::Simd &>(n)); break; }
       case NODECL_STRUCTURED_VALUE_FORTRAN_TYPESPEC_ARRAY_CONSTRUCTOR: { return this->visit(static_cast<const Nodecl::StructuredValueFortranTypespecArrayConstructor &>(n)); break; }
       case NODECL_INTEL_ASSUME: { return this->visit(static_cast<const Nodecl::IntelAssume &>(n)); break; }
       case NODECL_CXX_DEP_NAME_NESTED: { return this->visit(static_cast<const Nodecl::CxxDepNameNested &>(n)); break; }
       case NODECL_OPEN_M_P_PRIVATE_INIT: { return this->visit(static_cast<const Nodecl::OpenMP::PrivateInit &>(n)); break; }
       case NODECL_NEW: { return this->visit(static_cast<const Nodecl::New &>(n)); break; }
       case NODECL_PREINCREMENT: { return this->visit(static_cast<const Nodecl::Preincrement &>(n)); break; }
       case NODECL_VECTOR_MASK_AND: { return this->visit(static_cast<const Nodecl::VectorMaskAnd &>(n)); break; }
       case NODECL_VECTOR_MASK_OR: { return this->visit(static_cast<const Nodecl::VectorMaskOr &>(n)); break; }
       case NODECL_OPEN_M_P_REDUCTION: { return this->visit(static_cast<const Nodecl::OpenMP::Reduction &>(n)); break; }
       case NODECL_CXX_PARSE_LATER: { return this->visit(static_cast<const Nodecl::CxxParseLater &>(n)); break; }
       case NODECL_OMP_SS_N_D_RANGE: { return this->visit(static_cast<const Nodecl::OmpSs::NDRange &>(n)); break; }
       case NODECL_FORTRAN_ENTRY_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranEntryStatement &>(n)); break; }
       case NODECL_OPEN_M_P_PRIORITY: { return this->visit(static_cast<const Nodecl::OpenMP::Priority &>(n)); break; }
       case NODECL_VECTOR_BITWISE_XOR: { return this->visit(static_cast<const Nodecl::VectorBitwiseXor &>(n)); break; }
       case NODECL_COMPOUND_EXPRESSION: { return this->visit(static_cast<const Nodecl::CompoundExpression &>(n)); break; }
       case NODECL_OMP_SS_REGISTER: { return this->visit(static_cast<const Nodecl::OmpSs::Register &>(n)); break; }
       case NODECL_FORTRAN_PAUSE_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranPauseStatement &>(n)); break; }
       case NODECL_VECTOR_MASK_CONVERSION: { return this->visit(static_cast<const Nodecl::VectorMaskConversion &>(n)); break; }
       case NODECL_CLASS_MEMBER_ACCESS: { return this->visit(static_cast<const Nodecl::ClassMemberAccess &>(n)); break; }
       case NODECL_OPEN_M_P_REDUCTION_ITEM: { return this->visit(static_cast<const Nodecl::OpenMP::ReductionItem &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_UNARY_PREFIX: { return this->visit(static_cast<const Nodecl::CxxFunctionFormUnaryPrefix &>(n)); break; }
       case NODECL_OPEN_M_P_IF: { return this->visit(static_cast<const Nodecl::OpenMP::If &>(n)); break; }
       case NODECL_FORTRAN_COMPUTED_GOTO_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranComputedGotoStatement &>(n)); break; }
       case NODECL_MINUS: { return this->visit(static_cast<const Nodecl::Minus &>(n)); break; }
       case NODECL_VECTOR_LOGICAL_AND: { return this->visit(static_cast<const Nodecl::VectorLogicalAnd &>(n)); break; }
       case NODECL_EVICT_FLAG: { return this->visit(static_cast<const Nodecl::EvictFlag &>(n)); break; }
       case NODECL_BITWISE_OR_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::BitwiseOrAssignment &>(n)); break; }
       case NODECL_OMP_SS_DEP_COMMUTATIVE: { return this->visit(static_cast<const Nodecl::OmpSs::DepCommutative &>(n)); break; }
       case NODECL_COMPOUND_STATEMENT: { return this->visit(static_cast<const Nodecl::CompoundStatement &>(n)); break; }
       case NODECL_OMP_SS_UNREGISTER: { return this->visit(static_cast<const Nodecl::OmpSs::Unregister &>(n)); break; }
       case NODECL_FLOATING_LITERAL: { return this->visit(static_cast<const Nodecl::FloatingLiteral &>(n)); break; }
       case NODECL_VECTOR_SUBSCRIPT: { return this->visit(static_cast<const Nodecl::VectorSubscript &>(n)); break; }
       case NODECL_PRAGMA_CUSTOM_LINE: { return this->visit(static_cast<const Nodecl::PragmaCustomLine &>(n)); break; }
       case NODECL_PLUS: { return this->visit(static_cast<const Nodecl::Plus &>(n)); break; }
       case NODECL_OMP_SS_COPY_INOUT: { return this->visit(static_cast<const Nodecl::OmpSs::CopyInout &>(n)); break; }
       case NODECL_OPEN_M_P_MAP_TO: { return this->visit(static_cast<const Nodecl::OpenMP::MapTo &>(n)); break; }
       case NODECL_VECTOR_LOGICAL_OR: { return this->visit(static_cast<const Nodecl::VectorLogicalOr &>(n)); break; }
       case NODECL_OPEN_M_P_COMBINED_WITH_PARALLEL: { return this->visit(static_cast<const Nodecl::OpenMP::CombinedWithParallel &>(n)); break; }
       case NODECL_VECTOR_SINCOS: { return this->visit(static_cast<const Nodecl::VectorSincos &>(n)); break; }
       case NODECL_DELETE: { return this->visit(static_cast<const Nodecl::Delete &>(n)); break; }
       case NODECL_OMP_SS_ALLOCA: { return this->visit(static_cast<const Nodecl::OmpSs::Alloca &>(n)); break; }
       case NODECL_ANALYSIS_DEFINED: { return this->visit(static_cast<const Nodecl::Analysis::Defined &>(n)); break; }
       case NODECL_OMP_SS_TARGET: { return this->visit(static_cast<const Nodecl::OmpSs::Target &>(n)); break; }
       case NODECL_CONDITIONAL_EXPRESSION: { return this->visit(static_cast<const Nodecl::ConditionalExpression &>(n)); break; }
       case NODECL_BITWISE_AND_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::BitwiseAndAssignment &>(n)); break; }
       case NODECL_CXX_SIZEOF_PACK: { return this->visit(static_cast<const Nodecl::CxxSizeofPack &>(n)); break; }
       case NODECL_OPEN_M_P_FLUSH_AT_ENTRY: { return this->visit(static_cast<const Nodecl::OpenMP::FlushAtEntry &>(n)); break; }
       case NODECL_OMP_SS_FILE: { return this->visit(static_cast<const Nodecl::OmpSs::File &>(n)); break; }
       case NODECL_MASK_LITERAL: { return this->visit(static_cast<const Nodecl::MaskLiteral &>(n)); break; }
       case NODECL_VECTOR_LANE_ID: { return this->visit(static_cast<const Nodecl::VectorLaneId &>(n)); break; }
       case NODECL_CONTINUE_STATEMENT: { return this->visit(static_cast<const Nodecl::ContinueStatement &>(n)); break; }
       case NODECL_OPEN_M_P_MASK: { return this->visit(static_cast<const Nodecl::OpenMP::Mask &>(n)); break; }
       case NODECL_BOOLEAN_LITERAL: { return this->visit(static_cast<const Nodecl::BooleanLiteral &>(n)); break; }
       case NODECL_CXX_DOT_PTR_MEMBER: { return this->visit(static_cast<const Nodecl::CxxDotPtrMember &>(n)); break; }
       case NODECL_INTEL_ASSUME_ALIGNED: { return this->visit(static_cast<const Nodecl::IntelAssumeAligned &>(n)); break; }
       case NODECL_BITWISE_OR: { return this->visit(static_cast<const Nodecl::BitwiseOr &>(n)); break; }
       case NODECL_OMP_SS_DEP_WEAK_OUT: { return this->visit(static_cast<const Nodecl::OmpSs::DepWeakOut &>(n)); break; }
       case NODECL_OPEN_M_P_DEP_IN: { return this->visit(static_cast<const Nodecl::OpenMP::DepIn &>(n)); break; }
       case NODECL_REAL_PART: { return this->visit(static_cast<const Nodecl::RealPart &>(n)); break; }
       case NODECL_OPEN_M_P_TASKYIELD: { return this->visit(static_cast<const Nodecl::OpenMP::Taskyield &>(n)); break; }
       case NODECL_CXX_LAMBDA: { return this->visit(static_cast<const Nodecl::CxxLambda &>(n)); break; }
       case NODECL_STRING_LITERAL: { return this->visit(static_cast<const Nodecl::StringLiteral &>(n)); break; }
       case NODECL_TYPEID: { return this->visit(static_cast<const Nodecl::Typeid &>(n)); break; }
       case NODECL_OMP_SS_COPY_OUT: { return this->visit(static_cast<const Nodecl::OmpSs::CopyOut &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_AUTO_STORAGE: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::AutoStorage &>(n)); break; }
       case NODECL_PRAGMA_CUSTOM_DIRECTIVE: { return this->visit(static_cast<const Nodecl::PragmaCustomDirective &>(n)); break; }
       case NODECL_CXX_DEP_DECLTYPE: { return this->visit(static_cast<const Nodecl::CxxDepDecltype &>(n)); break; }
       case NODECL_OMP_SS_CHUNKSIZE: { return this->visit(static_cast<const Nodecl::OmpSs::Chunksize &>(n)); break; }
       case NODECL_OPEN_M_P_FOR_APPENDIX: { return this->visit(static_cast<const Nodecl::OpenMP::ForAppendix &>(n)); break; }
       case NODECL_OPEN_M_P_UNTIED: { return this->visit(static_cast<const Nodecl::OpenMP::Untied &>(n)); break; }
       case NODECL_ANALYSIS_MAXIMUM: { return this->visit(static_cast<const Nodecl::Analysis::Maximum &>(n)); break; }
       case NODECL_CHECKPOINT_KIND: { return this->visit(static_cast<const Nodecl::Checkpoint::Kind &>(n)); break; }
       case NODECL_VECTOR_CONVERSION: { return this->visit(static_cast<const Nodecl::VectorConversion &>(n)); break; }
       case NODECL_SYMBOL: { return this->visit(static_cast<const Nodecl::Symbol &>(n)); break; }
       case NODECL_CXX_ALIGNOF: { return this->visit(static_cast<const Nodecl::CxxAlignof &>(n)); break; }
       case NODECL_OPEN_M_P_THREADPRIVATE: { return this->visit(static_cast<const Nodecl::OpenMP::Threadprivate &>(n)); break; }
       case NODECL_GREATER_OR_EQUAL_THAN: { return this->visit(static_cast<const Nodecl::GreaterOrEqualThan &>(n)); break; }
       case NODECL_TYPE: { return this->visit(static_cast<const Nodecl::Type &>(n)); break; }
       case NODECL_C99_FIELD_DESIGNATOR: { return this->visit(static_cast<const Nodecl::C99FieldDesignator &>(n)); break; }
       case NODECL_GCC_ASM_DEFINITION: { return this->visit(static_cast<const Nodecl::GccAsmDefinition &>(n)); break; }
       case NODECL_CXX_DEP_GLOBAL_NAME_NESTED: { return this->visit(static_cast<const Nodecl::CxxDepGlobalNameNested &>(n)); break; }
       case NODECL_REFERENCE: { return this->visit(static_cast<const Nodecl::Reference &>(n)); break; }
       case NODECL_FORTRAN_OPEN_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranOpenStatement &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_UNARY_POSTFIX: { return this->visit(static_cast<const Nodecl::CxxFunctionFormUnaryPostfix &>(n)); break; }
       case NODECL_TOP_LEVEL: { return this->visit(static_cast<const Nodecl::TopLevel &>(n)); break; }
       case NODECL_VECTOR_MASK_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::VectorMaskAssignment &>(n)); break; }
       case NODECL_CHECKPOINT_STORE: { return this->visit(static_cast<const Nodecl::Checkpoint::Store &>(n)); break; }
       case NODECL_OPEN_M_P_TASKGROUP: { return this->visit(static_cast<const Nodecl::OpenMP::Taskgroup &>(n)); break; }
       case NODECL_POSTINCREMENT: { return this->visit(static_cast<const Nodecl::Postincrement &>(n)); break; }
       case NODECL_OPEN_M_P_IN_REDUCTION: { return this->visit(static_cast<const Nodecl::OpenMP::InReduction &>(n)); break; }
       case NODECL_THROW: { return this->visit(static_cast<const Nodecl::Throw &>(n)); break; }
       case NODECL_PRAGMA_CUSTOM_DECLARATION: { return this->visit(static_cast<const Nodecl::PragmaCustomDeclaration &>(n)); break; }
       case NODECL_TEMPLATE_FUNCTION_CODE: { return this->visit(static_cast<const Nodecl::TemplateFunctionCode &>(n)); break; }
       case NODECL_CXX_NOEXCEPT: { return this->visit(static_cast<const Nodecl::CxxNoexcept &>(n)); break; }
       case NODECL_OPEN_M_P_NO_PREFETCH: { return this->visit(static_cast<const Nodecl::OpenMP::NoPrefetch &>(n)); break; }
       case NODECL_ANALYSIS_MINIMUM: { return this->visit(static_cast<const Nodecl::Analysis::Minimum &>(n)); break; }
       case NODECL_VECTOR_STORE: { return this->visit(static_cast<const Nodecl::VectorStore &>(n)); break; }
       case NODECL_OPEN_M_P_MOTION_FROM: { return this->visit(static_cast<const Nodecl::OpenMP::MotionFrom &>(n)); break; }
       case NODECL_LOOP_CONTROL: { return this->visit(static_cast<const Nodecl::LoopControl &>(n)); break; }
       case NODECL_OMP_SS_ONTO: { return this->visit(static_cast<const Nodecl::OmpSs::Onto &>(n)); break; }
       case NODECL_CXX_DECL: { return this->visit(static_cast<const Nodecl::CxxDecl &>(n)); break; }
       case NODECL_TEXT: { return this->visit(static_cast<const Nodecl::Text &>(n)); break; }
       case NODECL_EMPTY_STATEMENT: { return this->visit(static_cast<const Nodecl::EmptyStatement &>(n)); break; }
       case NODECL_ALIGNMENT_INFO: { return this->visit(static_cast<const Nodecl::AlignmentInfo &>(n)); break; }
       case NODECL_OPEN_M_P_LINEAR: { return this->visit(static_cast<const Nodecl::OpenMP::Linear &>(n)); break; }
       case NODECL_DO_STATEMENT: { return this->visit(static_cast<const Nodecl::DoStatement &>(n)); break; }
       case NODECL_OPEN_M_P_UNROLL_AND_JAM: { return this->visit(static_cast<const Nodecl::OpenMP::UnrollAndJam &>(n)); break; }
       case NODECL_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::Assignment &>(n)); break; }
       case NODECL_OPEN_M_P_TEAMS: { return this->visit(static_cast<const Nodecl::OpenMP::Teams &>(n)); break; }
       case NODECL_GXX_TRAIT: { return this->visit(static_cast<const Nodecl::GxxTrait &>(n)); break; }
       case NODECL_FORTRAN_USE_ONLY: { return this->visit(static_cast<const Nodecl::FortranUseOnly &>(n)); break; }
       case NODECL_ANALYSIS_AUTO_SCOPE_FIRSTPRIVATE: { return this->visit(static_cast<const Nodecl::Analysis::AutoScope::Firstprivate &>(n)); break; }
       case NODECL_ANALYSIS_LIVE_IN: { return this->visit(static_cast<const Nodecl::Analysis::LiveIn &>(n)); break; }
       case NODECL_ANALYSIS_REACHING_DEFINITION_OUT: { return this->visit(static_cast<const Nodecl::Analysis::ReachingDefinitionOut &>(n)); break; }
       case NODECL_FORTRAN_EQUIVALENCE: { return this->visit(static_cast<const Nodecl::FortranEquivalence &>(n)); break; }
       case NODECL_VECTOR_EQUAL: { return this->visit(static_cast<const Nodecl::VectorEqual &>(n)); break; }
       case NODECL_FORTRAN_ACTUAL_ARGUMENT: { return this->visit(static_cast<const Nodecl::FortranActualArgument &>(n)); break; }
       case NODECL_ON_TOP_FLAG: { return this->visit(static_cast<const Nodecl::OnTopFlag &>(n)); break; }
       case NODECL_SIZEOF: { return this->visit(static_cast<const Nodecl::Sizeof &>(n)); break; }
       case NODECL_CXX_EXPLICIT_INSTANTIATION_DEF: { return this->visit(static_cast<const Nodecl::CxxExplicitInstantiationDef &>(n)); break; }
       case NODECL_CHECKPOINT_INIT: { return this->visit(static_cast<const Nodecl::Checkpoint::Init &>(n)); break; }
       case NODECL_FORTRAN_BOZ_LITERAL: { return this->visit(static_cast<const Nodecl::FortranBozLiteral &>(n)); break; }
       case NODECL_VECTOR_LOWER_THAN: { return this->visit(static_cast<const Nodecl::VectorLowerThan &>(n)); break; }
       case NODECL_OPEN_M_P_SCHEDULE: { return this->visit(static_cast<const Nodecl::OpenMP::Schedule &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_IN: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentIn &>(n)); break; }
       case NODECL_VECTOR_GREATER_THAN: { return this->visit(static_cast<const Nodecl::VectorGreaterThan &>(n)); break; }
       case NODECL_VIRTUAL_FUNCTION_CALL: { return this->visit(static_cast<const Nodecl::VirtualFunctionCall &>(n)); break; }
       case NODECL_OPEN_M_P_SINGLE: { return this->visit(static_cast<const Nodecl::OpenMP::Single &>(n)); break; }
       case NODECL_POINTER_TO_MEMBER: { return this->visit(static_cast<const Nodecl::PointerToMember &>(n)); break; }
       case NODECL_IF_ELSE_STATEMENT: { return this->visit(static_cast<const Nodecl::IfElseStatement &>(n)); break; }
       case NODECL_CXX_CAPTURE_REFERENCE: { return this->visit(static_cast<const Nodecl::CxxCaptureReference &>(n)); break; }
       case NODECL_LOWER_OR_EQUAL_THAN: { return this->visit(static_cast<const Nodecl::LowerOrEqualThan &>(n)); break; }
       case NODECL_GCC_ASM_OPERAND: { return this->visit(static_cast<const Nodecl::GccAsmOperand &>(n)); break; }
       case NODECL_ARRAY_SUBSCRIPT: { return this->visit(static_cast<const Nodecl::ArraySubscript &>(n)); break; }
       case NODECL_VECTOR_LOWER_OR_EQUAL_THAN: { return this->visit(static_cast<const Nodecl::VectorLowerOrEqualThan &>(n)); break; }
       case NODECL_VECTOR_DIV: { return this->visit(static_cast<const Nodecl::VectorDiv &>(n)); break; }
       case NODECL_CXX_IMPLICIT_INSTANTIATION: { return this->visit(static_cast<const Nodecl::CxxImplicitInstantiation &>(n)); break; }
       case NODECL_OPEN_M_P_SECTION: { return this->visit(static_cast<const Nodecl::OpenMP::Section &>(n)); break; }
       case NODECL_PRAGMA_CLAUSE_ARG: { return this->visit(static_cast<const Nodecl::PragmaClauseArg &>(n)); break; }
       case NODECL_EXPRESSION_STATEMENT: { return this->visit(static_cast<const Nodecl::ExpressionStatement &>(n)); break; }
       case NODECL_VECTOR_BITWISE_OR: { return this->visit(static_cast<const Nodecl::VectorBitwiseOr &>(n)); break; }
       case NODECL_CXX_VALUE_PACK: { return this->visit(static_cast<const Nodecl::CxxValuePack &>(n)); break; }
       case NODECL_CASE_STATEMENT: { return this->visit(static_cast<const Nodecl::CaseStatement &>(n)); break; }
       case NODECL_POSTDECREMENT: { return this->visit(static_cast<const Nodecl::Postdecrement &>(n)); break; }
       case NODECL_OPEN_M_P_MAP_TO_FROM: { return this->visit(static_cast<const Nodecl::OpenMP::MapToFrom &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_DEFAULT_INIT_BRACED: { return this->visit(static_cast<const Nodecl::CxxFunctionFormDefaultInitBraced &>(n)); break; }
       case NODECL_ADD_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::AddAssignment &>(n)); break; }
       case NODECL_FORTRAN_BIND_C: { return this->visit(static_cast<const Nodecl::FortranBindC &>(n)); break; }
       case NODECL_OMP_SS_TASK_EXPRESSION: { return this->visit(static_cast<const Nodecl::OmpSs::TaskExpression &>(n)); break; }
       case NODECL_OPEN_M_P_THREAD_LIMIT: { return this->visit(static_cast<const Nodecl::OpenMP::ThreadLimit &>(n)); break; }
       case NODECL_DIV: { return this->visit(static_cast<const Nodecl::Div &>(n)); break; }
       case NODECL_OMP_SS_IMPLEMENTS: { return this->visit(static_cast<const Nodecl::OmpSs::Implements &>(n)); break; }
       case NODECL_ANALYSIS_MINUS_INFINITY: { return this->visit(static_cast<const Nodecl::Analysis::MinusInfinity &>(n)); break; }
       case NODECL_ASM_DEFINITION: { return this->visit(static_cast<const Nodecl::AsmDefinition &>(n)); break; }
       case NODECL_FORTRAN_IO_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranIoStatement &>(n)); break; }
       case NODECL_FUNCTION_CODE: { return this->visit(static_cast<const Nodecl::FunctionCode &>(n)); break; }
       case NODECL_STRUCTURED_VALUE_BRACED_IMPLICIT: { return this->visit(static_cast<const Nodecl::StructuredValueBracedImplicit &>(n)); break; }
       case NODECL_VECTOR_REDUCTION_ADD: { return this->visit(static_cast<const Nodecl::VectorReductionAdd &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_DEAD: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::Dead &>(n)); break; }
       case NODECL_CXX_DEP_NAME_CONVERSION: { return this->visit(static_cast<const Nodecl::CxxDepNameConversion &>(n)); break; }
       case NODECL_OPEN_M_P_TASKLOOP: { return this->visit(static_cast<const Nodecl::OpenMP::Taskloop &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_RACE: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::Race &>(n)); break; }
       case NODECL_MULTI_EXPRESSION_ITERATOR: { return this->visit(static_cast<const Nodecl::MultiExpressionIterator &>(n)); break; }
       case NODECL_ANALYSIS_PHI: { return this->visit(static_cast<const Nodecl::Analysis::Phi &>(n)); break; }
       case NODECL_CXX_SIZEOF: { return this->visit(static_cast<const Nodecl::CxxSizeof &>(n)); break; }
       case NODECL_OPEN_M_P_SUITABLE: { return this->visit(static_cast<const Nodecl::OpenMP::Suitable &>(n)); break; }
       case NODECL_VECTOR_ALIGN_RIGHT: { return this->visit(static_cast<const Nodecl::VectorAlignRight &>(n)); break; }
       case NODECL_LABELED_STATEMENT: { return this->visit(static_cast<const Nodecl::LabeledStatement &>(n)); break; }
       case NODECL_OPEN_M_P_BARRIER_WAIT: { return this->visit(static_cast<const Nodecl::OpenMP::BarrierWait &>(n)); break; }
       case NODECL_VECTOR_ADD: { return this->visit(static_cast<const Nodecl::VectorAdd &>(n)); break; }
       case NODECL_DELETE_ARRAY: { return this->visit(static_cast<const Nodecl::DeleteArray &>(n)); break; }
       case NODECL_CXX_CLASS_MEMBER_ACCESS: { return this->visit(static_cast<const Nodecl::CxxClassMemberAccess &>(n)); break; }
       case NODECL_STRUCTURED_VALUE_PARENTHESIZED: { return this->visit(static_cast<const Nodecl::StructuredValueParenthesized &>(n)); break; }
       case NODECL_CXX_EXPLICIT_INSTANTIATION_DECL: { return this->visit(static_cast<const Nodecl::CxxExplicitInstantiationDecl &>(n)); break; }
       case NODECL_FORTRAN_NOT_PRESENT: { return this->visit(static_cast<const Nodecl::FortranNotPresent &>(n)); break; }
       case NODECL_CXX_PARENTHESIZED_INITIALIZER: { return this->visit(static_cast<const Nodecl::CxxParenthesizedInitializer &>(n)); break; }
       case NODECL_CHECKPOINT_LEVEL: { return this->visit(static_cast<const Nodecl::Checkpoint::Level &>(n)); break; }
       case NODECL_VECTOR_MINUS: { return this->visit(static_cast<const Nodecl::VectorMinus &>(n)); break; }
       case NODECL_PRAGMA_CUSTOM_STATEMENT: { return this->visit(static_cast<const Nodecl::PragmaCustomStatement &>(n)); break; }
       case NODECL_LOGICAL_AND: { return this->visit(static_cast<const Nodecl::LogicalAnd &>(n)); break; }
       case NODECL_FORTRAN_LABEL_ASSIGN_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranLabelAssignStatement &>(n)); break; }
       case NODECL_OMP_SS_SHARED_AND_ALLOCA: { return this->visit(static_cast<const Nodecl::OmpSs::SharedAndAlloca &>(n)); break; }
       case NODECL_ANALYSIS_LIVE_OUT: { return this->visit(static_cast<const Nodecl::Analysis::LiveOut &>(n)); break; }
       case NODECL_FORTRAN_READ_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranReadStatement &>(n)); break; }
       case NODECL_C99_INDEX_DESIGNATOR: { return this->visit(static_cast<const Nodecl::C99IndexDesignator &>(n)); break; }
       case NODECL_ALIGNOF: { return this->visit(static_cast<const Nodecl::Alignof &>(n)); break; }
       case NODECL_OPEN_M_P_MASTER: { return this->visit(static_cast<const Nodecl::OpenMP::Master &>(n)); break; }
       case NODECL_OMP_SS_TASK_IS_LOOP: { return this->visit(static_cast<const Nodecl::OmpSs::TaskIsLoop &>(n)); break; }
       case NODECL_WHILE_STATEMENT: { return this->visit(static_cast<const Nodecl::WhileStatement &>(n)); break; }
       case NODECL_OPEN_M_P_DEVICE: { return this->visit(static_cast<const Nodecl::OpenMP::Device &>(n)); break; }
       case NODECL_OPEN_M_P_AUTO: { return this->visit(static_cast<const Nodecl::OpenMP::Auto &>(n)); break; }
       case NODECL_SHAPING: { return this->visit(static_cast<const Nodecl::Shaping &>(n)); break; }
       case NODECL_VECTOR_MUL: { return this->visit(static_cast<const Nodecl::VectorMul &>(n)); break; }
       case NODECL_UPC_SYNC_STATEMENT: { return this->visit(static_cast<const Nodecl::UpcSyncStatement &>(n)); break; }
       case NODECL_OPEN_M_P_NO_MASK: { return this->visit(static_cast<const Nodecl::OpenMP::NoMask &>(n)); break; }
       case NODECL_VECTOR_MASK_NOT: { return this->visit(static_cast<const Nodecl::VectorMaskNot &>(n)); break; }
       case NODECL_RANGE: { return this->visit(static_cast<const Nodecl::Range &>(n)); break; }
       case NODECL_VECTOR_BITWISE_SHL: { return this->visit(static_cast<const Nodecl::VectorBitwiseShl &>(n)); break; }
       case NODECL_OPEN_M_P_BARRIER_FULL: { return this->visit(static_cast<const Nodecl::OpenMP::BarrierFull &>(n)); break; }
       case NODECL_ANALYSIS_ASSERT: { return this->visit(static_cast<const Nodecl::Analysis::Assert &>(n)); break; }
       case NODECL_OMP_SS_DEP_IN_PRIVATE: { return this->visit(static_cast<const Nodecl::OmpSs::DepInPrivate &>(n)); break; }
       case NODECL_OPEN_M_P_SHARED: { return this->visit(static_cast<const Nodecl::OpenMP::Shared &>(n)); break; }
       case NODECL_OFFSET: { return this->visit(static_cast<const Nodecl::Offset &>(n)); break; }
       case NODECL_OMP_SS_TASK_LABEL: { return this->visit(static_cast<const Nodecl::OmpSs::TaskLabel &>(n)); break; }
       case NODECL_CXX_DEP_FUNCTION_CALL: { return this->visit(static_cast<const Nodecl::CxxDepFunctionCall &>(n)); break; }
       case NODECL_OMP_SS_DEP_WEAK_INOUT: { return this->visit(static_cast<const Nodecl::OmpSs::DepWeakInout &>(n)); break; }
       case NODECL_LOGICAL_OR: { return this->visit(static_cast<const Nodecl::LogicalOr &>(n)); break; }
       case NODECL_PARENTHESIZED_EXPRESSION: { return this->visit(static_cast<const Nodecl::ParenthesizedExpression &>(n)); break; }
       case NODECL_FUNCTION_CALL: { return this->visit(static_cast<const Nodecl::FunctionCall &>(n)); break; }
       case NODECL_MOD_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::ModAssignment &>(n)); break; }
       case NODECL_RANGE_DISCRETE: { return this->visit(static_cast<const Nodecl::RangeDiscrete &>(n)); break; }
       case NODECL_OPEN_M_P_PARALLEL: { return this->visit(static_cast<const Nodecl::OpenMP::Parallel &>(n)); break; }
       case NODECL_CUDA_KERNEL_CALL: { return this->visit(static_cast<const Nodecl::CudaKernelCall &>(n)); break; }
       case NODECL_RELAXED_FLAG: { return this->visit(static_cast<const Nodecl::RelaxedFlag &>(n)); break; }
       case NODECL_OPEN_M_P_DECLARE_TARGET: { return this->visit(static_cast<const Nodecl::OpenMP::DeclareTarget &>(n)); break; }
       case NODECL_OPEN_M_P_MERGEABLE: { return this->visit(static_cast<const Nodecl::OpenMP::Mergeable &>(n)); break; }
       case NODECL_VECTOR_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::VectorAssignment &>(n)); break; }
       case NODECL_OPEN_M_P_DEP_INOUT: { return this->visit(static_cast<const Nodecl::OpenMP::DepInout &>(n)); break; }
       case NODECL_CHECKPOINT_IF: { return this->visit(static_cast<const Nodecl::Checkpoint::If &>(n)); break; }
       case NODECL_FORTRAN_ALTERNATE_RETURN_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranAlternateReturnStatement &>(n)); break; }
       case NODECL_IMPLICIT_MEMBER_INIT: { return this->visit(static_cast<const Nodecl::ImplicitMemberInit &>(n)); break; }
       case NODECL_OPEN_M_P_LASTPRIVATE: { return this->visit(static_cast<const Nodecl::OpenMP::Lastprivate &>(n)); break; }
       case NODECL_FORTRAN_WHERE: { return this->visit(static_cast<const Nodecl::FortranWhere &>(n)); break; }
       case NODECL_DEFAULT_STATEMENT: { return this->visit(static_cast<const Nodecl::DefaultStatement &>(n)); break; }
       case NODECL_CXX_BRACED_INITIALIZER: { return this->visit(static_cast<const Nodecl::CxxBracedInitializer &>(n)); break; }
       case NODECL_OPEN_M_P_ATOMIC: { return this->visit(static_cast<const Nodecl::OpenMP::Atomic &>(n)); break; }
       case NODECL_FORTRAN_NULLIFY_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranNullifyStatement &>(n)); break; }
       case NODECL_OPEN_M_P_SIMD_REDUCTION: { return this->visit(static_cast<const Nodecl::OpenMP::SimdReduction &>(n)); break; }
       case NODECL_CXX_INITIALIZER: { return this->visit(static_cast<const Nodecl::CxxInitializer &>(n)); break; }
       case NODECL_FOR_STATEMENT: { return this->visit(static_cast<const Nodecl::ForStatement &>(n)); break; }
       case NODECL_NEG: { return this->visit(static_cast<const Nodecl::Neg &>(n)); break; }
       case NODECL_VECTOR_FUNCTION_CODE: { return this->visit(static_cast<const Nodecl::VectorFunctionCode &>(n)); break; }
       case NODECL_ADD: { return this->visit(static_cast<const Nodecl::Add &>(n)); break; }
       case NODECL_RANGE_LOOP_CONTROL: { return this->visit(static_cast<const Nodecl::RangeLoopControl &>(n)); break; }
       case NODECL_FORTRAN_WRITE_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranWriteStatement &>(n)); break; }
       case NODECL_FORTRAN_ALTERNATE_RETURN_ARGUMENT: { return this->visit(static_cast<const Nodecl::FortranAlternateReturnArgument &>(n)); break; }
       case NODECL_BITWISE_XOR: { return this->visit(static_cast<const Nodecl::BitwiseXor &>(n)); break; }
       case NODECL_CHECKPOINT_ID: { return this->visit(static_cast<const Nodecl::Checkpoint::Id &>(n)); break; }
       case NODECL_CXX_DEP_NAME_SIMPLE: { return this->visit(static_cast<const Nodecl::CxxDepNameSimple &>(n)); break; }
       case NODECL_ANALYSIS_AUTO_SCOPE_SHARED: { return this->visit(static_cast<const Nodecl::Analysis::AutoScope::Shared &>(n)); break; }
       case NODECL_OMP_SS_DEP_CONCURRENT: { return this->visit(static_cast<const Nodecl::OmpSs::DepConcurrent &>(n)); break; }
       case NODECL_LOWER_THAN: { return this->visit(static_cast<const Nodecl::LowerThan &>(n)); break; }
       case NODECL_FORTRAN_CLOSE_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranCloseStatement &>(n)); break; }
       case NODECL_UNKNOWN: { return this->visit(static_cast<const Nodecl::Unknown &>(n)); break; }
       case NODECL_UNKNOWN_PRAGMA: { return this->visit(static_cast<const Nodecl::UnknownPragma &>(n)); break; }
       case NODECL_OMP_SS_DEP_REDUCTION: { return this->visit(static_cast<const Nodecl::OmpSs::DepReduction &>(n)); break; }
       case NODECL_CXX_FOR_RANGED: { return this->visit(static_cast<const Nodecl::CxxForRanged &>(n)); break; }
       case NODECL_ANALYSIS_ASSERT_DECL: { return this->visit(static_cast<const Nodecl::Analysis::AssertDecl &>(n)); break; }
       case NODECL_CXX_DEP_TEMPLATE_ID: { return this->visit(static_cast<const Nodecl::CxxDepTemplateId &>(n)); break; }
       case NODECL_OMP_SS_DEP_WEAK_COMMUTATIVE: { return this->visit(static_cast<const Nodecl::OmpSs::DepWeakCommutative &>(n)); break; }
       case NODECL_MULTI_EXPRESSION: { return this->visit(static_cast<const Nodecl::MultiExpression &>(n)); break; }
       case NODECL_OMP_SS_TASK_CALL: { return this->visit(static_cast<const Nodecl::OmpSs::TaskCall &>(n)); break; }
       case NODECL_GXX_BUILTIN_ADDRESSOF: { return this->visit(static_cast<const Nodecl::GxxBuiltinAddressof &>(n)); break; }
       case NODECL_OPEN_M_P_FUNCTION_TASK_PARSING_CONTEXT: { return this->visit(static_cast<const Nodecl::OpenMP::FunctionTaskParsingContext &>(n)); break; }
       case NODECL_CXX_STATIC_ASSERT: { return this->visit(static_cast<const Nodecl::CxxStaticAssert &>(n)); break; }
       case NODECL_OPEN_M_P_GRAINSIZE: { return this->visit(static_cast<const Nodecl::OpenMP::Grainsize &>(n)); break; }
       case NODECL_BITWISE_SHL_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::BitwiseShlAssignment &>(n)); break; }
       case NODECL_CXX_USING_NAMESPACE: { return this->visit(static_cast<const Nodecl::CxxUsingNamespace &>(n)); break; }
       case NODECL_CONVERSION: { return this->visit(static_cast<const Nodecl::Conversion &>(n)); break; }
       case NODECL_COMPLEX_LITERAL: { return this->visit(static_cast<const Nodecl::ComplexLiteral &>(n)); break; }
       case NODECL_OPEN_M_P_MAP_ALLOC: { return this->visit(static_cast<const Nodecl::OpenMP::MapAlloc &>(n)); break; }
       case NODECL_MOD: { return this->visit(static_cast<const Nodecl::Mod &>(n)); break; }
       case NODECL_FORTRAN_IO_SPEC: { return this->visit(static_cast<const Nodecl::FortranIoSpec &>(n)); break; }
       case NODECL_OMP_SS_COPY_IN: { return this->visit(static_cast<const Nodecl::OmpSs::CopyIn &>(n)); break; }
       case NODECL_FORTRAN_IMPLIED_DO: { return this->visit(static_cast<const Nodecl::FortranImpliedDo &>(n)); break; }
       case NODECL_SOURCE_COMMENT: { return this->visit(static_cast<const Nodecl::SourceComment &>(n)); break; }
       case NODECL_ANALYSIS_RANGE: { return this->visit(static_cast<const Nodecl::Analysis::Range &>(n)); break; }
       case NODECL_FIELD_DESIGNATOR: { return this->visit(static_cast<const Nodecl::FieldDesignator &>(n)); break; }
       case NODECL_PSEUDO_DESTRUCTOR_NAME: { return this->visit(static_cast<const Nodecl::PseudoDestructorName &>(n)); break; }
       case NODECL_GCC_ASM_SPEC: { return this->visit(static_cast<const Nodecl::GccAsmSpec &>(n)); break; }
       case NODECL_MUL: { return this->visit(static_cast<const Nodecl::Mul &>(n)); break; }
       case NODECL_ITERATOR_LOOP_CONTROL: { return this->visit(static_cast<const Nodecl::IteratorLoopControl &>(n)); break; }
       case NODECL_GOTO_STATEMENT: { return this->visit(static_cast<const Nodecl::GotoStatement &>(n)); break; }
       case NODECL_CXX_MEMBER_INIT: { return this->visit(static_cast<const Nodecl::CxxMemberInit &>(n)); break; }
       case NODECL_OBJECT_INIT: { return this->visit(static_cast<const Nodecl::ObjectInit &>(n)); break; }
       case NODECL_OPEN_M_P_SIMD_FUNCTION: { return this->visit(static_cast<const Nodecl::OpenMP::SimdFunction &>(n)); break; }
       case NODECL_VECTOR_MASK_XOR: { return this->visit(static_cast<const Nodecl::VectorMaskXor &>(n)); break; }
       case NODECL_VERBATIM: { return this->visit(static_cast<const Nodecl::Verbatim &>(n)); break; }
       case NODECL_MINUS_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::MinusAssignment &>(n)); break; }
       case NODECL_NOEXCEPT_IMPLICIT_TRUE: { return this->visit(static_cast<const Nodecl::NoexceptImplicitTrue &>(n)); break; }
       case NODECL_INDEX_DESIGNATOR: { return this->visit(static_cast<const Nodecl::IndexDesignator &>(n)); break; }
       case NODECL_BITWISE_SHL: { return this->visit(static_cast<const Nodecl::BitwiseShl &>(n)); break; }
       case NODECL_VECTOR_PROMOTION: { return this->visit(static_cast<const Nodecl::VectorPromotion &>(n)); break; }
       case NODECL_CONTEXT: { return this->visit(static_cast<const Nodecl::Context &>(n)); break; }
       case NODECL_VECTOR_MASK_AND_2_NOT: { return this->visit(static_cast<const Nodecl::VectorMaskAnd2Not &>(n)); break; }
       case NODECL_COMMA: { return this->visit(static_cast<const Nodecl::Comma &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_FP: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentFp &>(n)); break; }
       case NODECL_ANALYSIS_AUTO_SCOPE_PRIVATE: { return this->visit(static_cast<const Nodecl::Analysis::AutoScope::Private &>(n)); break; }
       case NODECL_MEMBER_INIT: { return this->visit(static_cast<const Nodecl::MemberInit &>(n)); break; }
       case NODECL_MUL_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::MulAssignment &>(n)); break; }
       case NODECL_VECTOR_BITWISE_SHR: { return this->visit(static_cast<const Nodecl::VectorBitwiseShr &>(n)); break; }
       case NODECL_VLA_WILDCARD: { return this->visit(static_cast<const Nodecl::VlaWildcard &>(n)); break; }
       case NODECL_BITWISE_SHR_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::BitwiseShrAssignment &>(n)); break; }
       case NODECL_ANALYSIS_INDUCTION_VARIABLE: { return this->visit(static_cast<const Nodecl::Analysis::InductionVariable &>(n)); break; }
       case NODECL_OPEN_M_P_TASK: { return this->visit(static_cast<const Nodecl::OpenMP::Task &>(n)); break; }
       case NODECL_ANALYSIS_EMPTY_RANGE: { return this->visit(static_cast<const Nodecl::Analysis::EmptyRange &>(n)); break; }
       case NODECL_VECTOR_LOAD: { return this->visit(static_cast<const Nodecl::VectorLoad &>(n)); break; }
       case NODECL_OFFSETOF: { return this->visit(static_cast<const Nodecl::Offsetof &>(n)); break; }
       case NODECL_ANALYSIS_INDUCTION_VAR_EXPR: { return this->visit(static_cast<const Nodecl::Analysis::InductionVarExpr &>(n)); break; }
       case NODECL_OMP_SS_COST: { return this->visit(static_cast<const Nodecl::OmpSs::Cost &>(n)); break; }
       case NODECL_VECTOR_CAST: { return this->visit(static_cast<const Nodecl::VectorCast &>(n)); break; }
       case NODECL_VECTOR_RCP: { return this->visit(static_cast<const Nodecl::VectorRcp &>(n)); break; }
       case NODECL_CXX_ARROW: { return this->visit(static_cast<const Nodecl::CxxArrow &>(n)); break; }
       case NODECL_CXX_POSTFIX_INITIALIZER: { return this->visit(static_cast<const Nodecl::CxxPostfixInitializer &>(n)); break; }
       case NODECL_OPEN_M_P_FIRSTPRIVATE: { return this->visit(static_cast<const Nodecl::OpenMP::Firstprivate &>(n)); break; }
       case NODECL_ANALYSIS_RANGE_INTERSECTION: { return this->visit(static_cast<const Nodecl::Analysis::RangeIntersection &>(n)); break; }
       case NODECL_CONCAT: { return this->visit(static_cast<const Nodecl::Concat &>(n)); break; }
       case NODECL_VECTOR_FMMINUS: { return this->visit(static_cast<const Nodecl::VectorFmminus &>(n)); break; }
       case NODECL_CXX_USING_DECL: { return this->visit(static_cast<const Nodecl::CxxUsingDecl &>(n)); break; }
       case NODECL_OMP_SS_WAIT: { return this->visit(static_cast<const Nodecl::OmpSs::Wait &>(n)); break; }
       case NODECL_OPEN_M_P_DEP_OUT: { return this->visit(static_cast<const Nodecl::OpenMP::DepOut &>(n)); break; }
       case NODECL_OPEN_M_P_TASK_IS_TASKWAIT: { return this->visit(static_cast<const Nodecl::OpenMP::TaskIsTaskwait &>(n)); break; }
       case NODECL_PRAGMA_CONTEXT: { return this->visit(static_cast<const Nodecl::PragmaContext &>(n)); break; }
       case NODECL_CXX_EXPLICIT_TYPE_CAST: { return this->visit(static_cast<const Nodecl::CxxExplicitTypeCast &>(n)); break; }
       case NODECL_DEFAULT_ARGUMENT: { return this->visit(static_cast<const Nodecl::DefaultArgument &>(n)); break; }
       case NODECL_OPEN_M_P_ALIGNED: { return this->visit(static_cast<const Nodecl::OpenMP::Aligned &>(n)); break; }
       case NODECL_OPEN_M_P_CRITICAL: { return this->visit(static_cast<const Nodecl::OpenMP::Critical &>(n)); break; }
       case NODECL_BITWISE_SHR: { return this->visit(static_cast<const Nodecl::BitwiseShr &>(n)); break; }
       case NODECL_OMP_SS_TARGET_DECLARATION: { return this->visit(static_cast<const Nodecl::OmpSs::TargetDeclaration &>(n)); break; }
       case NODECL_ANALYSIS_REACHING_DEFINITION_IN: { return this->visit(static_cast<const Nodecl::Analysis::ReachingDefinitionIn &>(n)); break; }
       case NODECL_CXX_DEF: { return this->visit(static_cast<const Nodecl::CxxDef &>(n)); break; }
       case NODECL_CHECKPOINT_LOAD: { return this->visit(static_cast<const Nodecl::Checkpoint::Load &>(n)); break; }
       case NODECL_BITWISE_XOR_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::BitwiseXorAssignment &>(n)); break; }
       case NODECL_VECTOR_CONDITIONAL_EXPRESSION: { return this->visit(static_cast<const Nodecl::VectorConditionalExpression &>(n)); break; }
       case NODECL_ARITHMETIC_SHR_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::ArithmeticShrAssignment &>(n)); break; }
       case NODECL_OPEN_M_P_TARGET_UPDATE: { return this->visit(static_cast<const Nodecl::OpenMP::TargetUpdate &>(n)); break; }
       case NODECL_FORTRAN_ARITHMETIC_IF_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranArithmeticIfStatement &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_BINARY_INFIX: { return this->visit(static_cast<const Nodecl::CxxFunctionFormBinaryInfix &>(n)); break; }
       case NODECL_ERR_STATEMENT: { return this->visit(static_cast<const Nodecl::ErrStatement &>(n)); break; }
       case NODECL_ERR_EXPR: { return this->visit(static_cast<const Nodecl::ErrExpr &>(n)); break; }
       case NODECL_BREAK_STATEMENT: { return this->visit(static_cast<const Nodecl::BreakStatement &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_OUT: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentOut &>(n)); break; }
       case NODECL_VECTOR_GATHER: { return this->visit(static_cast<const Nodecl::VectorGather &>(n)); break; }
       case NODECL_RETURN_STATEMENT: { return this->visit(static_cast<const Nodecl::ReturnStatement &>(n)); break; }
       case NODECL_ANALYSIS_REACH_DEF_EXPR: { return this->visit(static_cast<const Nodecl::Analysis::ReachDefExpr &>(n)); break; }
       case NODECL_CXX_VALUE_PACK_EXPANDED: { return this->visit(static_cast<const Nodecl::CxxValuePackExpanded &>(n)); break; }
       case NODECL_PREDECREMENT: { return this->visit(static_cast<const Nodecl::Predecrement &>(n)); break; }
       case NODECL_ANALYSIS_RANGE_UNION: { return this->visit(static_cast<const Nodecl::Analysis::RangeUnion &>(n)); break; }
       case NODECL_OPEN_M_P_FIRST_LASTPRIVATE: { return this->visit(static_cast<const Nodecl::OpenMP::FirstLastprivate &>(n)); break; }
       case NODECL_DIFFERENT: { return this->visit(static_cast<const Nodecl::Different &>(n)); break; }
       case NODECL_ALIGNED_FLAG: { return this->visit(static_cast<const Nodecl::AlignedFlag &>(n)); break; }
       case NODECL_OPEN_M_P_SECTIONS: { return this->visit(static_cast<const Nodecl::OpenMP::Sections &>(n)); break; }
       case NODECL_OPEN_M_P_NONTEMPORAL: { return this->visit(static_cast<const Nodecl::OpenMP::Nontemporal &>(n)); break; }
       case NODECL_VECTOR_MOD: { return this->visit(static_cast<const Nodecl::VectorMod &>(n)); break; }
       case NODECL_VECTOR_MASK_AND_1_NOT: { return this->visit(static_cast<const Nodecl::VectorMaskAnd1Not &>(n)); break; }
       case NODECL_OMP_SS_LOOP: { return this->visit(static_cast<const Nodecl::OmpSs::Loop &>(n)); break; }
       case NODECL_GREATER_THAN: { return this->visit(static_cast<const Nodecl::GreaterThan &>(n)); break; }
       case NODECL_CHECKPOINT_SHUTDOWN: { return this->visit(static_cast<const Nodecl::Checkpoint::Shutdown &>(n)); break; }
       case NODECL_FORTRAN_USE: { return this->visit(static_cast<const Nodecl::FortranUse &>(n)); break; }
       case NODECL_SWITCH_STATEMENT: { return this->visit(static_cast<const Nodecl::SwitchStatement &>(n)); break; }
       case NODECL_OPEN_M_P_PREFETCH: { return this->visit(static_cast<const Nodecl::OpenMP::Prefetch &>(n)); break; }
       case NODECL_HAS_BEEN_DEFINED_FLAG: { return this->visit(static_cast<const Nodecl::HasBeenDefinedFlag &>(n)); break; }
       case NODECL_ANALYSIS_DEAD: { return this->visit(static_cast<const Nodecl::Analysis::Dead &>(n)); break; }
       case NODECL_VECTOR_FUNCTION_CALL: { return this->visit(static_cast<const Nodecl::VectorFunctionCall &>(n)); break; }
       case NODECL_OPEN_M_P_NO_FLUSH: { return this->visit(static_cast<const Nodecl::OpenMP::NoFlush &>(n)); break; }
       case NODECL_OPEN_M_P_FLUSH_AT_EXIT: { return this->visit(static_cast<const Nodecl::OpenMP::FlushAtExit &>(n)); break; }
       case NODECL_BITWISE_NOT: { return this->visit(static_cast<const Nodecl::BitwiseNot &>(n)); break; }
       case NODECL_OPEN_M_P_FINAL: { return this->visit(static_cast<const Nodecl::OpenMP::Final &>(n)); break; }
       case NODECL_ANALYSIS_CORRECTNESS_INCOHERENT_IN_POINTED: { return this->visit(static_cast<const Nodecl::Analysis::Correctness::IncoherentInPointed &>(n)); break; }
       case NODECL_PREPROCESSOR_LINE: { return this->visit(static_cast<const Nodecl::PreprocessorLine &>(n)); break; }
       case NODECL_OPEN_M_P_TARGET: { return this->visit(static_cast<const Nodecl::OpenMP::Target &>(n)); break; }
       case NODECL_FORTRAN_HOLLERITH: { return this->visit(static_cast<const Nodecl::FortranHollerith &>(n)); break; }
       case NODECL_VECTOR_GREATER_OR_EQUAL_THAN: { return this->visit(static_cast<const Nodecl::VectorGreaterOrEqualThan &>(n)); break; }
       case NODECL_CXX_EQUAL_INITIALIZER: { return this->visit(static_cast<const Nodecl::CxxEqualInitializer &>(n)); break; }
       case NODECL_IMAG_PART: { return this->visit(static_cast<const Nodecl::ImagPart &>(n)); break; }
       case NODECL_POWER: { return this->visit(static_cast<const Nodecl::Power &>(n)); break; }
       case NODECL_OPEN_M_P_TARGET_TASK_UNDEFERRED: { return this->visit(static_cast<const Nodecl::OpenMP::TargetTaskUndeferred &>(n)); break; }
       case NODECL_GCC_BUILTIN_VA_ARG: { return this->visit(static_cast<const Nodecl::GccBuiltinVaArg &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_IMPLICIT: { return this->visit(static_cast<const Nodecl::CxxFunctionFormImplicit &>(n)); break; }
       case NODECL_VECTOR_REDUCTION_MUL: { return this->visit(static_cast<const Nodecl::VectorReductionMul &>(n)); break; }
       case NODECL_CXX_DEP_NEW: { return this->visit(static_cast<const Nodecl::CxxDepNew &>(n)); break; }
       case NODECL_FORTRAN_STOP_STATEMENT: { return this->visit(static_cast<const Nodecl::FortranStopStatement &>(n)); break; }
       case NODECL_FORTRAN_FORALL: { return this->visit(static_cast<const Nodecl::FortranForall &>(n)); break; }
       case NODECL_DIV_ASSIGNMENT: { return this->visit(static_cast<const Nodecl::DivAssignment &>(n)); break; }
       case NODECL_VECTOR_NEG: { return this->visit(static_cast<const Nodecl::VectorNeg &>(n)); break; }
       case NODECL_CXX_ALIGNAS: { return this->visit(static_cast<const Nodecl::CxxAlignas &>(n)); break; }
       case NODECL_OPEN_M_P_NUM_TEAMS: { return this->visit(static_cast<const Nodecl::OpenMP::NumTeams &>(n)); break; }
       case NODECL_VECTOR_BITWISE_AND: { return this->visit(static_cast<const Nodecl::VectorBitwiseAnd &>(n)); break; }
       case NODECL_CXX_FUNCTION_FORM_TEMPLATE_ID: { return this->visit(static_cast<const Nodecl::CxxFunctionFormTemplateId &>(n)); break; }

       default:
           { internal_error("Unexpected tree kind '%s'\n", ast_print_node_type(n.get_kind())); }
    }

    return Ret();

}
} /* namespace Nodecl */
#endif
