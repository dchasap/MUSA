/* Autogenerated file. DO NOT MODIFY. */
/* Changes in nodecl-generator.py or cxx-nodecl.def will overwrite this file */
#include "cxx-utils.h"
#include "tl-nodecl.hpp"
#include "mem.h"

namespace Nodecl {
StructuredValueParenthesized StructuredValueParenthesized::make(const locus_t* location)
{
    return ::nodecl_make_structured_value_parenthesized(location);
}
StructuredValueBracedTypecast StructuredValueBracedTypecast::make(const locus_t* location)
{
    return ::nodecl_make_structured_value_braced_typecast(location);
}
StructuredValueBracedImplicit StructuredValueBracedImplicit::make(const locus_t* location)
{
    return ::nodecl_make_structured_value_braced_implicit(location);
}
StructuredValueCompoundLiteral StructuredValueCompoundLiteral::make(const locus_t* location)
{
    return ::nodecl_make_structured_value_compound_literal(location);
}
StructuredValueFortranTypespecArrayConstructor StructuredValueFortranTypespecArrayConstructor::make(const locus_t* location)
{
    return ::nodecl_make_structured_value_fortran_typespec_array_constructor(location);
}
CxxDepTemplateId CxxDepTemplateId::make(Nodecl::NodeclBase child_name, const std::string& text, template_parameter_list_t* template_parameters, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_template_id(child_name.get_internal_nodecl(), ::uniquestr(text.c_str()), template_parameters, location);
}
CxxDepNameConversion CxxDepNameConversion::make(Nodecl::NodeclBase child_context, Nodecl::NodeclBase child_conversion_type, Nodecl::NodeclBase child_literal_conversion, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_name_conversion(child_context.get_internal_nodecl(), child_conversion_type.get_internal_nodecl(), child_literal_conversion.get_internal_nodecl(), location);
}
CxxDepDecltype CxxDepDecltype::make(TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_decltype(type.get_internal_type(), location);
}
Text Text::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_text(::uniquestr(text.c_str()), location);
}
CudaKernelCall CudaKernelCall::make(Nodecl::NodeclBase child_kernel_config, Nodecl::NodeclBase child_function_call, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cuda_kernel_call(child_kernel_config.get_internal_nodecl(), child_function_call.get_internal_nodecl(), type.get_internal_type(), location);
}
PragmaCustomDirective PragmaCustomDirective::make(Nodecl::NodeclBase child_pragma_line, Nodecl::NodeclBase child_context_of_decl, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_custom_directive(child_pragma_line.get_internal_nodecl(), child_context_of_decl.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
PragmaContext PragmaContext::make(TL::Scope scope, const locus_t* location)
{
    return ::nodecl_make_pragma_context(scope.get_decl_context(), location);
}
Range Range::make(Nodecl::NodeclBase child_lower, Nodecl::NodeclBase child_upper, Nodecl::NodeclBase child_stride, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_range(child_lower.get_internal_nodecl(), child_upper.get_internal_nodecl(), child_stride.get_internal_nodecl(), type.get_internal_type(), location);
}
OpenMP::Sections OpenMP::Sections::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_sections, const locus_t* location)
{
    return ::nodecl_make_open_m_p_sections(child_environment.get_internal_nodecl(), child_sections.get_internal_nodecl(), location);
}
OpenMP::Master OpenMP::Master::make(Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_master(child_statements.get_internal_nodecl(), location);
}
PragmaCustomLine PragmaCustomLine::make(Nodecl::NodeclBase child_parameters, Nodecl::NodeclBase child_clauses, Nodecl::NodeclBase child_end_clauses, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_custom_line(child_parameters.get_internal_nodecl(), child_clauses.get_internal_nodecl(), child_end_clauses.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
GccBuiltinVaArg GccBuiltinVaArg::make(Nodecl::NodeclBase child_expr, Nodecl::NodeclBase child_va_type, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_gcc_builtin_va_arg(child_expr.get_internal_nodecl(), child_va_type.get_internal_nodecl(), type.get_internal_type(), location);
}
OpenMP::Critical OpenMP::Critical::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_critical(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
PragmaCustomStatement PragmaCustomStatement::make(Nodecl::NodeclBase child_pragma_line, Nodecl::NodeclBase child_statements, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_custom_statement(child_pragma_line.get_internal_nodecl(), child_statements.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
OmpSs::Loop OmpSs::Loop::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_loop, const locus_t* location)
{
    return ::nodecl_make_omp_ss_loop(child_environment.get_internal_nodecl(), child_loop.get_internal_nodecl(), location);
}
TopLevel TopLevel::make(Nodecl::NodeclBase child_top_level, const locus_t* location)
{
    return ::nodecl_make_top_level(child_top_level.get_internal_nodecl(), location);
}
IntelAssumeAligned IntelAssumeAligned::make(Nodecl::NodeclBase child_pointer, Nodecl::NodeclBase child_alignment, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_intel_assume_aligned(child_pointer.get_internal_nodecl(), child_alignment.get_internal_nodecl(), type.get_internal_type(), location);
}
IntelAssume IntelAssume::make(Nodecl::NodeclBase child_assumed, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_intel_assume(child_assumed.get_internal_nodecl(), type.get_internal_type(), location);
}
OmpSs::Register OmpSs::Register::make(Nodecl::NodeclBase child_registered_set, const locus_t* location)
{
    return ::nodecl_make_omp_ss_register(child_registered_set.get_internal_nodecl(), location);
}
OmpSs::Unregister OmpSs::Unregister::make(Nodecl::NodeclBase child_unregistered_set, const locus_t* location)
{
    return ::nodecl_make_omp_ss_unregister(child_unregistered_set.get_internal_nodecl(), location);
}
OpenMP::SimdFor OpenMP::SimdFor::make(Nodecl::NodeclBase child_openmp_for, Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_simd_for(child_openmp_for.get_internal_nodecl(), child_environment.get_internal_nodecl(), location);
}
Analysis::Phi Analysis::Phi::make(Nodecl::NodeclBase child_expressions, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_phi(child_expressions.get_internal_nodecl(), type.get_internal_type(), location);
}
Analysis::RangeUnion Analysis::RangeUnion::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_range_union(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Analysis::RangeIntersection Analysis::RangeIntersection::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_range_intersection(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Analysis::RangeSub Analysis::RangeSub::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_range_sub(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Analysis::EmptyRange Analysis::EmptyRange::make(const locus_t* location)
{
    return ::nodecl_make_analysis_empty_range(location);
}
Analysis::MinusInfinity Analysis::MinusInfinity::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_analysis_minus_infinity(type.get_internal_type(), cval, location);
}
Analysis::PlusInfinity Analysis::PlusInfinity::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_analysis_plus_infinity(type.get_internal_type(), cval, location);
}
Analysis::Minimum Analysis::Minimum::make(Nodecl::NodeclBase child_expressions, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_minimum(child_expressions.get_internal_nodecl(), type.get_internal_type(), location);
}
Analysis::Maximum Analysis::Maximum::make(Nodecl::NodeclBase child_expressions, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_analysis_maximum(child_expressions.get_internal_nodecl(), type.get_internal_type(), location);
}
StringLiteral StringLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_string_literal(type.get_internal_type(), cval, location);
}
OpenMP::Schedule OpenMP::Schedule::make(Nodecl::NodeclBase child_chunk, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_open_m_p_schedule(child_chunk.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
OpenMP::DistSchedule OpenMP::DistSchedule::make(Nodecl::NodeclBase child_chunk, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_open_m_p_dist_schedule(child_chunk.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
OmpSs::TargetDeclaration OmpSs::TargetDeclaration::make(Nodecl::NodeclBase child_devices, Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_omp_ss_target_declaration(child_devices.get_internal_nodecl(), child_symbols.get_internal_nodecl(), location);
}
GccAsmDefinition GccAsmDefinition::make(Nodecl::NodeclBase child_operands0, Nodecl::NodeclBase child_operands1, Nodecl::NodeclBase child_operands2, Nodecl::NodeclBase child_specs, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_gcc_asm_definition(child_operands0.get_internal_nodecl(), child_operands1.get_internal_nodecl(), child_operands2.get_internal_nodecl(), child_specs.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
OpenMP::Taskwait OpenMP::Taskwait::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_taskwait(child_environment.get_internal_nodecl(), location);
}
OpenMP::Taskgroup OpenMP::Taskgroup::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_taskgroup(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
OpenMP::FlushMemory OpenMP::FlushMemory::make(Nodecl::NodeclBase child_expressions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_flush_memory(child_expressions.get_internal_nodecl(), location);
}
OpenMP::BarrierFull OpenMP::BarrierFull::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_barrier_full(child_environment.get_internal_nodecl(), location);
}
OpenMP::BarrierSignal OpenMP::BarrierSignal::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_barrier_signal(location);
}
OpenMP::BarrierWait OpenMP::BarrierWait::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_barrier_wait(location);
}
OpenMP::ParallelSimdFor OpenMP::ParallelSimdFor::make(Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_parallel_simd_for(child_statement.get_internal_nodecl(), child_environment.get_internal_nodecl(), location);
}
PragmaCustomDeclaration PragmaCustomDeclaration::make(Nodecl::NodeclBase child_pragma_line, Nodecl::NodeclBase child_nested_pragma, Nodecl::NodeclBase child_context_of_decl, Nodecl::NodeclBase child_context_of_parameters, TL::Symbol symbol, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_custom_declaration(child_pragma_line.get_internal_nodecl(), child_nested_pragma.get_internal_nodecl(), child_context_of_decl.get_internal_nodecl(), child_context_of_parameters.get_internal_nodecl(), symbol.get_internal_symbol(), ::uniquestr(text.c_str()), location);
}
LoopControl LoopControl::make(Nodecl::NodeclBase child_init, Nodecl::NodeclBase child_cond, Nodecl::NodeclBase child_next, const locus_t* location)
{
    return ::nodecl_make_loop_control(child_init.get_internal_nodecl(), child_cond.get_internal_nodecl(), child_next.get_internal_nodecl(), location);
}
UnboundedLoopControl UnboundedLoopControl::make(const locus_t* location)
{
    return ::nodecl_make_unbounded_loop_control(location);
}
Symbol Symbol::make(TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_symbol(symbol.get_internal_symbol(), location);
}
FortranIoSpec FortranIoSpec::make(Nodecl::NodeclBase child_value, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_fortran_io_spec(child_value.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
OpenMP::Single OpenMP::Single::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_single(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
AlignedFlag AlignedFlag::make(const locus_t* location)
{
    return ::nodecl_make_aligned_flag(location);
}
AlignmentInfo AlignmentInfo::make(const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_alignment_info(cval, location);
}
InPlaceFlag InPlaceFlag::make(const locus_t* location)
{
    return ::nodecl_make_in_place_flag(location);
}
OnTopFlag OnTopFlag::make(const locus_t* location)
{
    return ::nodecl_make_on_top_flag(location);
}
EvictFlag EvictFlag::make(const locus_t* location)
{
    return ::nodecl_make_evict_flag(location);
}
RelaxedFlag RelaxedFlag::make(const locus_t* location)
{
    return ::nodecl_make_relaxed_flag(location);
}
NontemporalFlag NontemporalFlag::make(const locus_t* location)
{
    return ::nodecl_make_nontemporal_flag(location);
}
HasBeenDefinedFlag HasBeenDefinedFlag::make(const locus_t* location)
{
    return ::nodecl_make_has_been_defined_flag(location);
}
FunctionCode FunctionCode::make(Nodecl::NodeclBase child_statements, Nodecl::NodeclBase child_initializers, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_function_code(child_statements.get_internal_nodecl(), child_initializers.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
OmpSs::TaskCall OmpSs::TaskCall::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_call, Nodecl::NodeclBase child_site_environment, const locus_t* location)
{
    return ::nodecl_make_omp_ss_task_call(child_environment.get_internal_nodecl(), child_call.get_internal_nodecl(), child_site_environment.get_internal_nodecl(), location);
}
OpenMP::Taskyield OpenMP::Taskyield::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_taskyield(location);
}
OpenMP::Workshare OpenMP::Workshare::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_workshare(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
PragmaClauseArg PragmaClauseArg::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_clause_arg(::uniquestr(text.c_str()), location);
}
OpenMP::SimdFunction OpenMP::SimdFunction::make(Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_simd_function(child_statement.get_internal_nodecl(), child_environment.get_internal_nodecl(), location);
}
MemberInit MemberInit::make(Nodecl::NodeclBase child_init_expr, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_member_init(child_init_expr.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
ImplicitMemberInit ImplicitMemberInit::make(Nodecl::NodeclBase child_init_expr, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_implicit_member_init(child_init_expr.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
OpenMP::Atomic OpenMP::Atomic::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_atomic(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
CxxClassMemberAccess CxxClassMemberAccess::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_member, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_class_member_access(child_lhs.get_internal_nodecl(), child_member.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxArrow CxxArrow::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_member, TL::Type type, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_cxx_arrow(child_lhs.get_internal_nodecl(), child_member.get_internal_nodecl(), type.get_internal_type(), ::uniquestr(text.c_str()), location);
}
CxxDotPtrMember CxxDotPtrMember::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_ptr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_dot_ptr_member(child_lhs.get_internal_nodecl(), child_ptr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxArrowPtrMember CxxArrowPtrMember::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_ptr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_arrow_ptr_member(child_lhs.get_internal_nodecl(), child_ptr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxSizeof CxxSizeof::make(Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_sizeof(child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxSizeofPack CxxSizeofPack::make(Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_sizeof_pack(child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxAlignof CxxAlignof::make(Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_alignof(child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxPostfixInitializer CxxPostfixInitializer::make(Nodecl::NodeclBase child_postfix, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_postfix_initializer(child_postfix.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxCast CxxCast::make(Nodecl::NodeclBase child_rhs, TL::Type type, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_cxx_cast(child_rhs.get_internal_nodecl(), type.get_internal_type(), ::uniquestr(text.c_str()), location);
}
CxxExplicitTypeCast CxxExplicitTypeCast::make(Nodecl::NodeclBase child_init_list, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_explicit_type_cast(child_init_list.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxDepFunctionCall CxxDepFunctionCall::make(Nodecl::NodeclBase child_called, Nodecl::NodeclBase child_arguments, Nodecl::NodeclBase child_alternate_name, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_function_call(child_called.get_internal_nodecl(), child_arguments.get_internal_nodecl(), child_alternate_name.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxDepNew CxxDepNew::make(Nodecl::NodeclBase child_init, Nodecl::NodeclBase child_init_real_type, Nodecl::NodeclBase child_placement, TL::Type type, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_new(child_init.get_internal_nodecl(), child_init_real_type.get_internal_nodecl(), child_placement.get_internal_nodecl(), type.get_internal_type(), ::uniquestr(text.c_str()), location);
}
CxxNoexcept CxxNoexcept::make(Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_noexcept(child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxLambda CxxLambda::make(Nodecl::NodeclBase child_explicit_captures, TL::Symbol symbol, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_lambda(child_explicit_captures.get_internal_nodecl(), symbol.get_internal_symbol(), type.get_internal_type(), location);
}
CxxAlignas CxxAlignas::make(Nodecl::NodeclBase child_values, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_alignas(child_values.get_internal_nodecl(), type.get_internal_type(), location);
}
StructuredValue StructuredValue::make(Nodecl::NodeclBase child_items, Nodecl::NodeclBase child_form, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_structured_value(child_items.get_internal_nodecl(), child_form.get_internal_nodecl(), type.get_internal_type(), location);
}
FortranData FortranData::make(Nodecl::NodeclBase child_objects, Nodecl::NodeclBase child_values, const locus_t* location)
{
    return ::nodecl_make_fortran_data(child_objects.get_internal_nodecl(), child_values.get_internal_nodecl(), location);
}
FortranEquivalence FortranEquivalence::make(Nodecl::NodeclBase child_first, Nodecl::NodeclBase child_second, const locus_t* location)
{
    return ::nodecl_make_fortran_equivalence(child_first.get_internal_nodecl(), child_second.get_internal_nodecl(), location);
}
FortranBozLiteral FortranBozLiteral::make(TL::Type type, const std::string& text, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_fortran_boz_literal(type.get_internal_type(), ::uniquestr(text.c_str()), cval, location);
}
FortranBindC FortranBindC::make(Nodecl::NodeclBase child_name, const locus_t* location)
{
    return ::nodecl_make_fortran_bind_c(child_name.get_internal_nodecl(), location);
}
FortranHollerith FortranHollerith::make(TL::Type type, const std::string& text, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_fortran_hollerith(type.get_internal_type(), ::uniquestr(text.c_str()), cval, location);
}
FortranUse FortranUse::make(Nodecl::NodeclBase child_module, Nodecl::NodeclBase child_renamed_items, const locus_t* location)
{
    return ::nodecl_make_fortran_use(child_module.get_internal_nodecl(), child_renamed_items.get_internal_nodecl(), location);
}
FortranUseOnly FortranUseOnly::make(Nodecl::NodeclBase child_module, Nodecl::NodeclBase child_only_items, const locus_t* location)
{
    return ::nodecl_make_fortran_use_only(child_module.get_internal_nodecl(), child_only_items.get_internal_nodecl(), location);
}
OpenMP::Simd OpenMP::Simd::make(Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_simd(child_statement.get_internal_nodecl(), child_environment.get_internal_nodecl(), location);
}
FortranActualArgument FortranActualArgument::make(Nodecl::NodeclBase child_argument, const locus_t* location)
{
    return ::nodecl_make_fortran_actual_argument(child_argument.get_internal_nodecl(), location);
}
FortranNotPresent FortranNotPresent::make(const locus_t* location)
{
    return ::nodecl_make_fortran_not_present(location);
}
OpenMP::FlushAtEntry OpenMP::FlushAtEntry::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_flush_at_entry(location);
}
OpenMP::FlushAtExit OpenMP::FlushAtExit::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_flush_at_exit(location);
}
OpenMP::NoFlush OpenMP::NoFlush::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_no_flush(location);
}
DefaultArgument DefaultArgument::make(Nodecl::NodeclBase child_argument, const locus_t* location)
{
    return ::nodecl_make_default_argument(child_argument.get_internal_nodecl(), location);
}
CxxMemberInit CxxMemberInit::make(Nodecl::NodeclBase child_name, Nodecl::NodeclBase child_initializer, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_member_init(child_name.get_internal_nodecl(), child_initializer.get_internal_nodecl(), type.get_internal_type(), location);
}
MultiExpressionIterator MultiExpressionIterator::make(Nodecl::NodeclBase child_range, TL::Symbol symbol, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_multi_expression_iterator(child_range.get_internal_nodecl(), symbol.get_internal_symbol(), type.get_internal_type(), location);
}
OpenMP::Section OpenMP::Section::make(Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_section(child_statements.get_internal_nodecl(), location);
}
CompoundStatement CompoundStatement::make(Nodecl::NodeclBase child_statements, Nodecl::NodeclBase child_finally, const locus_t* location)
{
    return ::nodecl_make_compound_statement(child_statements.get_internal_nodecl(), child_finally.get_internal_nodecl(), location);
}
EmptyStatement EmptyStatement::make(const locus_t* location)
{
    return ::nodecl_make_empty_statement(location);
}
ExpressionStatement ExpressionStatement::make(Nodecl::NodeclBase child_nest, const locus_t* location)
{
    return ::nodecl_make_expression_statement(child_nest.get_internal_nodecl(), location);
}
DoStatement DoStatement::make(Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_condition, const locus_t* location)
{
    return ::nodecl_make_do_statement(child_statement.get_internal_nodecl(), child_condition.get_internal_nodecl(), location);
}
WhileStatement WhileStatement::make(Nodecl::NodeclBase child_condition, Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_loop_name, const locus_t* location)
{
    return ::nodecl_make_while_statement(child_condition.get_internal_nodecl(), child_statement.get_internal_nodecl(), child_loop_name.get_internal_nodecl(), location);
}
ForStatement ForStatement::make(Nodecl::NodeclBase child_loop_header, Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_loop_name, const locus_t* location)
{
    return ::nodecl_make_for_statement(child_loop_header.get_internal_nodecl(), child_statement.get_internal_nodecl(), child_loop_name.get_internal_nodecl(), location);
}
IfElseStatement IfElseStatement::make(Nodecl::NodeclBase child_condition, Nodecl::NodeclBase child_then, Nodecl::NodeclBase child_else, const locus_t* location)
{
    return ::nodecl_make_if_else_statement(child_condition.get_internal_nodecl(), child_then.get_internal_nodecl(), child_else.get_internal_nodecl(), location);
}
LabeledStatement LabeledStatement::make(Nodecl::NodeclBase child_statement, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_labeled_statement(child_statement.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
SwitchStatement SwitchStatement::make(Nodecl::NodeclBase child_switch, Nodecl::NodeclBase child_statement, const locus_t* location)
{
    return ::nodecl_make_switch_statement(child_switch.get_internal_nodecl(), child_statement.get_internal_nodecl(), location);
}
DefaultStatement DefaultStatement::make(Nodecl::NodeclBase child_statement, const locus_t* location)
{
    return ::nodecl_make_default_statement(child_statement.get_internal_nodecl(), location);
}
CaseStatement CaseStatement::make(Nodecl::NodeclBase child_case, Nodecl::NodeclBase child_statement, const locus_t* location)
{
    return ::nodecl_make_case_statement(child_case.get_internal_nodecl(), child_statement.get_internal_nodecl(), location);
}
BreakStatement BreakStatement::make(Nodecl::NodeclBase child_construct_name, const locus_t* location)
{
    return ::nodecl_make_break_statement(child_construct_name.get_internal_nodecl(), location);
}
ContinueStatement ContinueStatement::make(Nodecl::NodeclBase child_construct_name, const locus_t* location)
{
    return ::nodecl_make_continue_statement(child_construct_name.get_internal_nodecl(), location);
}
GotoStatement GotoStatement::make(TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_goto_statement(symbol.get_internal_symbol(), location);
}
ReturnStatement ReturnStatement::make(Nodecl::NodeclBase child_value, const locus_t* location)
{
    return ::nodecl_make_return_statement(child_value.get_internal_nodecl(), location);
}
ErrStatement ErrStatement::make(const locus_t* location)
{
    return ::nodecl_make_err_statement(location);
}
ObjectInit ObjectInit::make(TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_object_init(symbol.get_internal_symbol(), location);
}
GccAsmSpec GccAsmSpec::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_gcc_asm_spec(::uniquestr(text.c_str()), location);
}
Context Context::make(Nodecl::NodeclBase child_in_context, TL::Scope scope, const locus_t* location)
{
    return ::nodecl_make_context(child_in_context.get_internal_nodecl(), scope.get_decl_context(), location);
}
OpenMP::Parallel OpenMP::Parallel::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_num_replicas, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_parallel(child_environment.get_internal_nodecl(), child_num_replicas.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
FunctionCall FunctionCall::make(Nodecl::NodeclBase child_called, Nodecl::NodeclBase child_arguments, Nodecl::NodeclBase child_alternate_name, Nodecl::NodeclBase child_function_form, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_function_call(child_called.get_internal_nodecl(), child_arguments.get_internal_nodecl(), child_alternate_name.get_internal_nodecl(), child_function_form.get_internal_nodecl(), type.get_internal_type(), location);
}
ArraySubscript ArraySubscript::make(Nodecl::NodeclBase child_subscripted, Nodecl::NodeclBase child_subscripts, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_array_subscript(child_subscripted.get_internal_nodecl(), child_subscripts.get_internal_nodecl(), type.get_internal_type(), location);
}
ClassMemberAccess ClassMemberAccess::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_member, Nodecl::NodeclBase child_member_literal, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_class_member_access(child_lhs.get_internal_nodecl(), child_member.get_internal_nodecl(), child_member_literal.get_internal_nodecl(), type.get_internal_type(), location);
}
Plus Plus::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_plus(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Neg Neg::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_neg(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Mul Mul::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_mul(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Power Power::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_power(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Div Div::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_div(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Mod Mod::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_mod(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Add Add::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_add(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Minus Minus::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_minus(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Concat Concat::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_concat(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Equal Equal::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_equal(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Different Different::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_different(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
LowerThan LowerThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_lower_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
LowerOrEqualThan LowerOrEqualThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_lower_or_equal_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
GreaterThan GreaterThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_greater_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
GreaterOrEqualThan GreaterOrEqualThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_greater_or_equal_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
LogicalNot LogicalNot::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_logical_not(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
LogicalAnd LogicalAnd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_logical_and(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
LogicalOr LogicalOr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_logical_or(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseNot BitwiseNot::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_not(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseAnd BitwiseAnd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_and(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseOr BitwiseOr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_or(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseXor BitwiseXor::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_xor(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseShl BitwiseShl::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_shl(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
ArithmeticShr ArithmeticShr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_arithmetic_shr(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseShr BitwiseShr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_shr(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Assignment Assignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
ParenthesizedExpression ParenthesizedExpression::make(Nodecl::NodeclBase child_nest, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_parenthesized_expression(child_nest.get_internal_nodecl(), type.get_internal_type(), location);
}
Dereference Dereference::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_dereference(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
CompoundExpression CompoundExpression::make(Nodecl::NodeclBase child_nest, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_compound_expression(child_nest.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorSubscript VectorSubscript::make(Nodecl::NodeclBase child_subscripted, Nodecl::NodeclBase child_subscript, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_subscript(child_subscripted.get_internal_nodecl(), child_subscript.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorAdd VectorAdd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_add(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorFmadd VectorFmadd::make(Nodecl::NodeclBase child_first_op, Nodecl::NodeclBase child_second_op, Nodecl::NodeclBase child_third_op, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_fmadd(child_first_op.get_internal_nodecl(), child_second_op.get_internal_nodecl(), child_third_op.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMinus VectorMinus::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_minus(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorFmminus VectorFmminus::make(Nodecl::NodeclBase child_first_mul_op, Nodecl::NodeclBase child_second_mul_op, Nodecl::NodeclBase child_minus_op, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_fmminus(child_first_mul_op.get_internal_nodecl(), child_second_mul_op.get_internal_nodecl(), child_minus_op.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMul VectorMul::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mul(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorDiv VectorDiv::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_div(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorRcp VectorRcp::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_rcp(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMod VectorMod::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mod(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorNeg VectorNeg::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_neg(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorSqrt VectorSqrt::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_sqrt(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorRsqrt VectorRsqrt::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_rsqrt(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorReductionAdd VectorReductionAdd::make(Nodecl::NodeclBase child_vector_src, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_reduction_add(child_vector_src.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorReductionMinus VectorReductionMinus::make(Nodecl::NodeclBase child_vector_src, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_reduction_minus(child_vector_src.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorReductionMul VectorReductionMul::make(Nodecl::NodeclBase child_vector_src, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_reduction_mul(child_vector_src.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorEqual VectorEqual::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_equal(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorDifferent VectorDifferent::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_different(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLowerThan VectorLowerThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_lower_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLowerOrEqualThan VectorLowerOrEqualThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_lower_or_equal_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorGreaterThan VectorGreaterThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_greater_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorGreaterOrEqualThan VectorGreaterOrEqualThan::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_greater_or_equal_than(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLogicalNot VectorLogicalNot::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_logical_not(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLogicalAnd VectorLogicalAnd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_logical_and(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLogicalOr VectorLogicalOr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_logical_or(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseNot VectorBitwiseNot::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_not(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseAnd VectorBitwiseAnd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_and(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseOr VectorBitwiseOr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_or(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseXor VectorBitwiseXor::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_xor(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseShl VectorBitwiseShl::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_shl(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorArithmeticShr VectorArithmeticShr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_arithmetic_shr(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorBitwiseShr VectorBitwiseShr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_bitwise_shr(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorAlignRight VectorAlignRight::make(Nodecl::NodeclBase child_left_vector, Nodecl::NodeclBase child_right_vector, Nodecl::NodeclBase child_num_elements, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_align_right(child_left_vector.get_internal_nodecl(), child_right_vector.get_internal_nodecl(), child_num_elements.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorAssignment VectorAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, Nodecl::NodeclBase child_has_been_defined, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), child_has_been_defined.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorStore VectorStore::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, Nodecl::NodeclBase child_flags, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_store(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), child_flags.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorScatter VectorScatter::make(Nodecl::NodeclBase child_base, Nodecl::NodeclBase child_strides, Nodecl::NodeclBase child_source, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_scatter(child_base.get_internal_nodecl(), child_strides.get_internal_nodecl(), child_source.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLoad VectorLoad::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, Nodecl::NodeclBase child_flags, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_load(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), child_flags.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorGather VectorGather::make(Nodecl::NodeclBase child_base, Nodecl::NodeclBase child_strides, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_gather(child_base.get_internal_nodecl(), child_strides.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorPromotion VectorPromotion::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_promotion(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorPrefetch VectorPrefetch::make(Nodecl::NodeclBase child_address, Nodecl::NodeclBase child_prefetch_kind, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_prefetch(child_address.get_internal_nodecl(), child_prefetch_kind.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLiteral VectorLiteral::make(Nodecl::NodeclBase child_scalar_values, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_literal(child_scalar_values.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLaneId VectorLaneId::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_vector_lane_id(type.get_internal_type(), cval, location);
}
VectorConversion VectorConversion::make(Nodecl::NodeclBase child_nest, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_conversion(child_nest.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorCast VectorCast::make(Nodecl::NodeclBase child_rhs, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_cast(child_rhs.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorFunctionCall VectorFunctionCall::make(Nodecl::NodeclBase child_function_call, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_function_call(child_function_call.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorFabs VectorFabs::make(Nodecl::NodeclBase child_argument, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_fabs(child_argument.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorSincos VectorSincos::make(Nodecl::NodeclBase child_source, Nodecl::NodeclBase child_sin_pointer, Nodecl::NodeclBase child_cos_pointer, Nodecl::NodeclBase child_mask, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_sincos(child_source.get_internal_nodecl(), child_sin_pointer.get_internal_nodecl(), child_cos_pointer.get_internal_nodecl(), child_mask.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskAssignment VectorMaskAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskConversion VectorMaskConversion::make(Nodecl::NodeclBase child_nest, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_conversion(child_nest.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskNot VectorMaskNot::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_not(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskAnd VectorMaskAnd::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_and(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskOr VectorMaskOr::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_or(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskXor VectorMaskXor::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_xor(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskAnd1Not VectorMaskAnd1Not::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_and_1_not(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorMaskAnd2Not VectorMaskAnd2Not::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_mask_and_2_not(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorLoop VectorLoop::make(Nodecl::NodeclBase child_peeling, Nodecl::NodeclBase child_main_loop, Nodecl::NodeclBase child_epilog, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_loop(child_peeling.get_internal_nodecl(), child_main_loop.get_internal_nodecl(), child_epilog.get_internal_nodecl(), type.get_internal_type(), location);
}
NoexceptImplicitTrue NoexceptImplicitTrue::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_noexcept_implicit_true(type.get_internal_type(), cval, location);
}
ErrExpr ErrExpr::make(const locus_t* location)
{
    return ::nodecl_make_err_expr(location);
}
Conversion Conversion::make(Nodecl::NodeclBase child_nest, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_conversion(child_nest.get_internal_nodecl(), type.get_internal_type(), location);
}
Dummy Dummy::make(TL::Type type, const locus_t* location)
{
    return ::nodecl_make_dummy(type.get_internal_type(), location);
}
MultiExpression MultiExpression::make(Nodecl::NodeclBase child_iterators, Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_multi_expression(child_iterators.get_internal_nodecl(), child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
Unknown Unknown::make(const locus_t* location)
{
    return ::nodecl_make_unknown(location);
}
FortranAlternateReturnArgument FortranAlternateReturnArgument::make(TL::Symbol symbol, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_fortran_alternate_return_argument(symbol.get_internal_symbol(), type.get_internal_type(), location);
}
RangeDiscrete RangeDiscrete::make(Nodecl::NodeclBase child_discrete_seq, const locus_t* location)
{
    return ::nodecl_make_range_discrete(child_discrete_seq.get_internal_nodecl(), location);
}
FortranWherePair FortranWherePair::make(Nodecl::NodeclBase child_mask, Nodecl::NodeclBase child_statement, const locus_t* location)
{
    return ::nodecl_make_fortran_where_pair(child_mask.get_internal_nodecl(), child_statement.get_internal_nodecl(), location);
}
GxxTrait GxxTrait::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_gxx_trait(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), ::uniquestr(text.c_str()), location);
}
Analysis::InductionVarExpr Analysis::InductionVarExpr::make(Nodecl::NodeclBase child_variable, Nodecl::NodeclBase child_lower, Nodecl::NodeclBase child_upper, Nodecl::NodeclBase child_stride, const locus_t* location)
{
    return ::nodecl_make_analysis_induction_var_expr(child_variable.get_internal_nodecl(), child_lower.get_internal_nodecl(), child_upper.get_internal_nodecl(), child_stride.get_internal_nodecl(), location);
}
OpenMP::CombinedWithParallel OpenMP::CombinedWithParallel::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_combined_with_parallel(location);
}
OpenMP::FunctionTaskParsingContext OpenMP::FunctionTaskParsingContext::make(Nodecl::NodeclBase child_context, const locus_t* location)
{
    return ::nodecl_make_open_m_p_function_task_parsing_context(child_context.get_internal_nodecl(), location);
}
OmpSs::TaskExpression OmpSs::TaskExpression::make(Nodecl::NodeclBase child_join_task, Nodecl::NodeclBase child_task_calls, Nodecl::NodeclBase child_sequential_code, const locus_t* location)
{
    return ::nodecl_make_omp_ss_task_expression(child_join_task.get_internal_nodecl(), child_task_calls.get_internal_nodecl(), child_sequential_code.get_internal_nodecl(), location);
}
OpenMP::NumTasks OpenMP::NumTasks::make(Nodecl::NodeclBase child_num_tasks, const locus_t* location)
{
    return ::nodecl_make_open_m_p_num_tasks(child_num_tasks.get_internal_nodecl(), location);
}
OpenMP::Grainsize OpenMP::Grainsize::make(Nodecl::NodeclBase child_grainsize, const locus_t* location)
{
    return ::nodecl_make_open_m_p_grainsize(child_grainsize.get_internal_nodecl(), location);
}
OmpSs::Chunksize OmpSs::Chunksize::make(Nodecl::NodeclBase child_chunksize, const locus_t* location)
{
    return ::nodecl_make_omp_ss_chunksize(child_chunksize.get_internal_nodecl(), location);
}
ConditionalExpression ConditionalExpression::make(Nodecl::NodeclBase child_condition, Nodecl::NodeclBase child_true, Nodecl::NodeclBase child_false, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_conditional_expression(child_condition.get_internal_nodecl(), child_true.get_internal_nodecl(), child_false.get_internal_nodecl(), type.get_internal_type(), location);
}
Reference Reference::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_reference(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Comma Comma::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_comma(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Throw Throw::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_throw(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
VirtualFunctionCall VirtualFunctionCall::make(Nodecl::NodeclBase child_called, Nodecl::NodeclBase child_arguments, Nodecl::NodeclBase child_function_form, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_virtual_function_call(child_called.get_internal_nodecl(), child_arguments.get_internal_nodecl(), child_function_form.get_internal_nodecl(), type.get_internal_type(), location);
}
MulAssignment MulAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_mul_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
DivAssignment DivAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_div_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
AddAssignment AddAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_add_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
MinusAssignment MinusAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_minus_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseShlAssignment BitwiseShlAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_shl_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseShrAssignment BitwiseShrAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_shr_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
ArithmeticShrAssignment ArithmeticShrAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_arithmetic_shr_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseAndAssignment BitwiseAndAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_and_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseOrAssignment BitwiseOrAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_or_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
BitwiseXorAssignment BitwiseXorAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_bitwise_xor_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
ModAssignment ModAssignment::make(Nodecl::NodeclBase child_lhs, Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_mod_assignment(child_lhs.get_internal_nodecl(), child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Preincrement Preincrement::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_preincrement(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Postincrement Postincrement::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_postincrement(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Predecrement Predecrement::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_predecrement(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Postdecrement Postdecrement::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_postdecrement(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Sizeof Sizeof::make(Nodecl::NodeclBase child_size_type, Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_sizeof(child_size_type.get_internal_nodecl(), child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
Alignof Alignof::make(Nodecl::NodeclBase child_align_type, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_alignof(child_align_type.get_internal_nodecl(), type.get_internal_type(), location);
}
Offset Offset::make(Nodecl::NodeclBase child_base, Nodecl::NodeclBase child_offset, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_offset(child_base.get_internal_nodecl(), child_offset.get_internal_nodecl(), type.get_internal_type(), location);
}
Typeid Typeid::make(Nodecl::NodeclBase child_arg, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_typeid(child_arg.get_internal_nodecl(), type.get_internal_type(), location);
}
New New::make(Nodecl::NodeclBase child_init, Nodecl::NodeclBase child_init_real_type, Nodecl::NodeclBase child_placement, Nodecl::NodeclBase child_alloc_func, TL::Type type, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_new(child_init.get_internal_nodecl(), child_init_real_type.get_internal_nodecl(), child_placement.get_internal_nodecl(), child_alloc_func.get_internal_nodecl(), type.get_internal_type(), ::uniquestr(text.c_str()), location);
}
Delete Delete::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_delete(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
DeleteArray DeleteArray::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_delete_array(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
PointerToMember PointerToMember::make(TL::Symbol symbol, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_pointer_to_member(symbol.get_internal_symbol(), type.get_internal_type(), location);
}
RealPart RealPart::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_real_part(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
ImagPart ImagPart::make(Nodecl::NodeclBase child_rhs, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_imag_part(child_rhs.get_internal_nodecl(), type.get_internal_type(), location);
}
Offsetof Offsetof::make(Nodecl::NodeclBase child_offset_type, Nodecl::NodeclBase child_designator, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_offsetof(child_offset_type.get_internal_nodecl(), child_designator.get_internal_nodecl(), type.get_internal_type(), location);
}
Shaping Shaping::make(Nodecl::NodeclBase child_postfix, Nodecl::NodeclBase child_shape, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_shaping(child_postfix.get_internal_nodecl(), child_shape.get_internal_nodecl(), type.get_internal_type(), location);
}
PseudoDestructorName PseudoDestructorName::make(Nodecl::NodeclBase child_accessed, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_pseudo_destructor_name(child_accessed.get_internal_nodecl(), type.get_internal_type(), location);
}
VectorConditionalExpression VectorConditionalExpression::make(Nodecl::NodeclBase child_condition, Nodecl::NodeclBase child_true, Nodecl::NodeclBase child_false, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vector_conditional_expression(child_condition.get_internal_nodecl(), child_true.get_internal_nodecl(), child_false.get_internal_nodecl(), type.get_internal_type(), location);
}
VlaWildcard VlaWildcard::make(TL::Type type, const locus_t* location)
{
    return ::nodecl_make_vla_wildcard(type.get_internal_type(), location);
}
GxxBuiltinAddressof GxxBuiltinAddressof::make(Nodecl::NodeclBase child_expr, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_gxx_builtin_addressof(child_expr.get_internal_nodecl(), type.get_internal_type(), location);
}
GccAsmOperand GccAsmOperand::make(Nodecl::NodeclBase child_identifier, Nodecl::NodeclBase child_constraint, Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_gcc_asm_operand(child_identifier.get_internal_nodecl(), child_constraint.get_internal_nodecl(), child_expr.get_internal_nodecl(), location);
}
Analysis::Assert Analysis::Assert::make(Nodecl::NodeclBase child_statements, Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_analysis_assert(child_statements.get_internal_nodecl(), child_environment.get_internal_nodecl(), location);
}
IntegerLiteral IntegerLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_integer_literal(type.get_internal_type(), cval, location);
}
FloatingLiteral FloatingLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_floating_literal(type.get_internal_type(), cval, location);
}
ComplexLiteral ComplexLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_complex_literal(type.get_internal_type(), cval, location);
}
BooleanLiteral BooleanLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_boolean_literal(type.get_internal_type(), cval, location);
}
OpenMP::DepIn OpenMP::DepIn::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_open_m_p_dep_in(child_exprs.get_internal_nodecl(), location);
}
OpenMP::DepOut OpenMP::DepOut::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_open_m_p_dep_out(child_exprs.get_internal_nodecl(), location);
}
OpenMP::DepInout OpenMP::DepInout::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_open_m_p_dep_inout(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepConcurrent OmpSs::DepConcurrent::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_concurrent(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepCommutative OmpSs::DepCommutative::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_commutative(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepReduction OmpSs::DepReduction::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_reduction(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepWeakReduction OmpSs::DepWeakReduction::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_weak_reduction(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepInPrivate OmpSs::DepInPrivate::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_in_private(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepWeakIn OmpSs::DepWeakIn::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_weak_in(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepWeakOut OmpSs::DepWeakOut::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_weak_out(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepWeakInout OmpSs::DepWeakInout::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_weak_inout(child_exprs.get_internal_nodecl(), location);
}
OmpSs::DepWeakCommutative OmpSs::DepWeakCommutative::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_dep_weak_commutative(child_exprs.get_internal_nodecl(), location);
}
Type Type::make(TL::Type type, const locus_t* location)
{
    return ::nodecl_make_type(type.get_internal_type(), location);
}
PragmaCustomClause PragmaCustomClause::make(Nodecl::NodeclBase child_arguments, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_pragma_custom_clause(child_arguments.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
CxxDecl CxxDecl::make(Nodecl::NodeclBase child_context, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_decl(child_context.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxDef CxxDef::make(Nodecl::NodeclBase child_context, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_def(child_context.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxExplicitInstantiationDef CxxExplicitInstantiationDef::make(Nodecl::NodeclBase child_declarator_name, Nodecl::NodeclBase child_context, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_explicit_instantiation_def(child_declarator_name.get_internal_nodecl(), child_context.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxExplicitInstantiationDecl CxxExplicitInstantiationDecl::make(Nodecl::NodeclBase child_declarator_name, Nodecl::NodeclBase child_context, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_explicit_instantiation_decl(child_declarator_name.get_internal_nodecl(), child_context.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxUsingNamespace CxxUsingNamespace::make(Nodecl::NodeclBase child_context, Nodecl::NodeclBase child_used_name, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_using_namespace(child_context.get_internal_nodecl(), child_used_name.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxUsingDecl CxxUsingDecl::make(Nodecl::NodeclBase child_context, Nodecl::NodeclBase child_used_name, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_using_decl(child_context.get_internal_nodecl(), child_used_name.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxParseLater CxxParseLater::make(const locus_t* location)
{
    return ::nodecl_make_cxx_parse_later(location);
}
CxxImplicitInstantiation CxxImplicitInstantiation::make(TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_implicit_instantiation(symbol.get_internal_symbol(), location);
}
TemplateFunctionCode TemplateFunctionCode::make(Nodecl::NodeclBase child_statements, Nodecl::NodeclBase child_initializers, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_template_function_code(child_statements.get_internal_nodecl(), child_initializers.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
Verbatim Verbatim::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_verbatim(::uniquestr(text.c_str()), location);
}
FortranImpliedDo FortranImpliedDo::make(Nodecl::NodeclBase child_name, Nodecl::NodeclBase child_range, Nodecl::NodeclBase child_items, const locus_t* location)
{
    return ::nodecl_make_fortran_implied_do(child_name.get_internal_nodecl(), child_range.get_internal_nodecl(), child_items.get_internal_nodecl(), location);
}
OmpSs::Alloca OmpSs::Alloca::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_alloca(child_exprs.get_internal_nodecl(), location);
}
OmpSs::SharedAndAlloca OmpSs::SharedAndAlloca::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_omp_ss_shared_and_alloca(child_exprs.get_internal_nodecl(), location);
}
OmpSs::WeakReduction OmpSs::WeakReduction::make(Nodecl::NodeclBase child_reductions, const locus_t* location)
{
    return ::nodecl_make_omp_ss_weak_reduction(child_reductions.get_internal_nodecl(), location);
}
OmpSs::Cost OmpSs::Cost::make(Nodecl::NodeclBase child_cost, const locus_t* location)
{
    return ::nodecl_make_omp_ss_cost(child_cost.get_internal_nodecl(), location);
}
OmpSs::TaskLabel OmpSs::TaskLabel::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_omp_ss_task_label(::uniquestr(text.c_str()), location);
}
TryBlock TryBlock::make(Nodecl::NodeclBase child_statement, Nodecl::NodeclBase child_catch_handlers, Nodecl::NodeclBase child_any, const locus_t* location)
{
    return ::nodecl_make_try_block(child_statement.get_internal_nodecl(), child_catch_handlers.get_internal_nodecl(), child_any.get_internal_nodecl(), location);
}
CxxForRanged CxxForRanged::make(Nodecl::NodeclBase child_range, Nodecl::NodeclBase child_statement, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_for_ranged(child_range.get_internal_nodecl(), child_statement.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CatchHandler CatchHandler::make(Nodecl::NodeclBase child_name, Nodecl::NodeclBase child_statement, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_catch_handler(child_name.get_internal_nodecl(), child_statement.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxStaticAssert CxxStaticAssert::make(Nodecl::NodeclBase child_predicate, Nodecl::NodeclBase child_message, const locus_t* location)
{
    return ::nodecl_make_cxx_static_assert(child_predicate.get_internal_nodecl(), child_message.get_internal_nodecl(), location);
}
OpenMP::Aligned OpenMP::Aligned::make(Nodecl::NodeclBase child_aligned_expressions, Nodecl::NodeclBase child_alignment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_aligned(child_aligned_expressions.get_internal_nodecl(), child_alignment.get_internal_nodecl(), location);
}
OpenMP::VectorLength OpenMP::VectorLength::make(Nodecl::NodeclBase child_vector_length, const locus_t* location)
{
    return ::nodecl_make_open_m_p_vector_length(child_vector_length.get_internal_nodecl(), location);
}
OpenMP::VectorLengthFor OpenMP::VectorLengthFor::make(TL::Type type, const locus_t* location)
{
    return ::nodecl_make_open_m_p_vector_length_for(type.get_internal_type(), location);
}
OpenMP::Uniform OpenMP::Uniform::make(Nodecl::NodeclBase child_uniform_expressions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_uniform(child_uniform_expressions.get_internal_nodecl(), location);
}
OpenMP::Linear OpenMP::Linear::make(Nodecl::NodeclBase child_linear_expressions, Nodecl::NodeclBase child_step, const locus_t* location)
{
    return ::nodecl_make_open_m_p_linear(child_linear_expressions.get_internal_nodecl(), child_step.get_internal_nodecl(), location);
}
OpenMP::Suitable OpenMP::Suitable::make(Nodecl::NodeclBase child_suitable_expressions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_suitable(child_suitable_expressions.get_internal_nodecl(), location);
}
OpenMP::Overlap OpenMP::Overlap::make(Nodecl::NodeclBase child_overlap_expressions, Nodecl::NodeclBase child_min_group_loads, Nodecl::NodeclBase child_max_group_registers, Nodecl::NodeclBase child_max_groups, const locus_t* location)
{
    return ::nodecl_make_open_m_p_overlap(child_overlap_expressions.get_internal_nodecl(), child_min_group_loads.get_internal_nodecl(), child_max_group_registers.get_internal_nodecl(), child_max_groups.get_internal_nodecl(), location);
}
OpenMP::Unroll OpenMP::Unroll::make(Nodecl::NodeclBase child_unroll_factor, const locus_t* location)
{
    return ::nodecl_make_open_m_p_unroll(child_unroll_factor.get_internal_nodecl(), location);
}
OpenMP::UnrollAndJam OpenMP::UnrollAndJam::make(Nodecl::NodeclBase child_unroll_factor, const locus_t* location)
{
    return ::nodecl_make_open_m_p_unroll_and_jam(child_unroll_factor.get_internal_nodecl(), location);
}
OpenMP::Nontemporal OpenMP::Nontemporal::make(Nodecl::NodeclBase child_nontemporal_expressions, Nodecl::NodeclBase child_flags, const locus_t* location)
{
    return ::nodecl_make_open_m_p_nontemporal(child_nontemporal_expressions.get_internal_nodecl(), child_flags.get_internal_nodecl(), location);
}
OpenMP::Prefetch OpenMP::Prefetch::make(Nodecl::NodeclBase child_distances, Nodecl::NodeclBase child_strategy, const locus_t* location)
{
    return ::nodecl_make_open_m_p_prefetch(child_distances.get_internal_nodecl(), child_strategy.get_internal_nodecl(), location);
}
OpenMP::NoPrefetch OpenMP::NoPrefetch::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_no_prefetch(location);
}
OpenMP::Mask OpenMP::Mask::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_mask(location);
}
OpenMP::NoMask OpenMP::NoMask::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_no_mask(location);
}
OpenMP::SimdReduction OpenMP::SimdReduction::make(Nodecl::NodeclBase child_reductions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_simd_reduction(child_reductions.get_internal_nodecl(), location);
}
Analysis::AssertDecl Analysis::AssertDecl::make(Nodecl::NodeclBase child_environment, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_analysis_assert_decl(child_environment.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxCaptureCopy CxxCaptureCopy::make(Nodecl::NodeclBase child_init, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_capture_copy(child_init.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxCaptureReference CxxCaptureReference::make(Nodecl::NodeclBase child_init, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_cxx_capture_reference(child_init.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
CxxFunctionFormTemplateId CxxFunctionFormTemplateId::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_template_id(location);
}
CxxFunctionFormImplicit CxxFunctionFormImplicit::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_implicit(location);
}
CxxFunctionFormBinaryInfix CxxFunctionFormBinaryInfix::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_binary_infix(location);
}
CxxFunctionFormUnaryPrefix CxxFunctionFormUnaryPrefix::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_unary_prefix(location);
}
CxxFunctionFormUnaryPostfix CxxFunctionFormUnaryPostfix::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_unary_postfix(location);
}
CxxFunctionFormDefaultInit CxxFunctionFormDefaultInit::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_default_init(location);
}
CxxFunctionFormDefaultInitBraced CxxFunctionFormDefaultInitBraced::make(const locus_t* location)
{
    return ::nodecl_make_cxx_function_form_default_init_braced(location);
}
OpenMP::For OpenMP::For::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_loop, const locus_t* location)
{
    return ::nodecl_make_open_m_p_for(child_environment.get_internal_nodecl(), child_loop.get_internal_nodecl(), location);
}
OpenMP::ForAppendix OpenMP::ForAppendix::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_loop, Nodecl::NodeclBase child_prependix, Nodecl::NodeclBase child_appendix, const locus_t* location)
{
    return ::nodecl_make_open_m_p_for_appendix(child_environment.get_internal_nodecl(), child_loop.get_internal_nodecl(), child_prependix.get_internal_nodecl(), child_appendix.get_internal_nodecl(), location);
}
AsmDefinition AsmDefinition::make(Nodecl::NodeclBase child_asm_text, const locus_t* location)
{
    return ::nodecl_make_asm_definition(child_asm_text.get_internal_nodecl(), location);
}
OpenMP::DeclareTarget OpenMP::DeclareTarget::make(Nodecl::NodeclBase child_declarations, const locus_t* location)
{
    return ::nodecl_make_open_m_p_declare_target(child_declarations.get_internal_nodecl(), location);
}
OpenMP::Taskloop OpenMP::Taskloop::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_loop, const locus_t* location)
{
    return ::nodecl_make_open_m_p_taskloop(child_environment.get_internal_nodecl(), child_loop.get_internal_nodecl(), location);
}
OmpSs::Release OmpSs::Release::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_omp_ss_release(child_environment.get_internal_nodecl(), location);
}
OpenMP::TaskIsTaskwait OpenMP::TaskIsTaskwait::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_task_is_taskwait(location);
}
OmpSs::TaskIsLoop OmpSs::TaskIsLoop::make(const locus_t* location)
{
    return ::nodecl_make_omp_ss_task_is_loop(location);
}
OmpSs::TaskIsTaskCall OmpSs::TaskIsTaskCall::make(const locus_t* location)
{
    return ::nodecl_make_omp_ss_task_is_task_call(location);
}
OpenMP::Task OpenMP::Task::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_task(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
Analysis::ReachDefExpr Analysis::ReachDefExpr::make(Nodecl::NodeclBase child_expression, Nodecl::NodeclBase child_value, const locus_t* location)
{
    return ::nodecl_make_analysis_reach_def_expr(child_expression.get_internal_nodecl(), child_value.get_internal_nodecl(), location);
}
OpenMP::BarrierAtEnd OpenMP::BarrierAtEnd::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_barrier_at_end(location);
}
OpenMP::Device OpenMP::Device::make(Nodecl::NodeclBase child_device_id, const locus_t* location)
{
    return ::nodecl_make_open_m_p_device(child_device_id.get_internal_nodecl(), location);
}
OpenMP::MapTo OpenMP::MapTo::make(Nodecl::NodeclBase child_map_to, const locus_t* location)
{
    return ::nodecl_make_open_m_p_map_to(child_map_to.get_internal_nodecl(), location);
}
OpenMP::MapFrom OpenMP::MapFrom::make(Nodecl::NodeclBase child_map_from, const locus_t* location)
{
    return ::nodecl_make_open_m_p_map_from(child_map_from.get_internal_nodecl(), location);
}
OpenMP::MapToFrom OpenMP::MapToFrom::make(Nodecl::NodeclBase child_map_tofrom, const locus_t* location)
{
    return ::nodecl_make_open_m_p_map_to_from(child_map_tofrom.get_internal_nodecl(), location);
}
OpenMP::MapAlloc OpenMP::MapAlloc::make(Nodecl::NodeclBase child_map_alloc, const locus_t* location)
{
    return ::nodecl_make_open_m_p_map_alloc(child_map_alloc.get_internal_nodecl(), location);
}
OpenMP::MotionTo OpenMP::MotionTo::make(Nodecl::NodeclBase child_map_to, const locus_t* location)
{
    return ::nodecl_make_open_m_p_motion_to(child_map_to.get_internal_nodecl(), location);
}
OpenMP::MotionFrom OpenMP::MotionFrom::make(Nodecl::NodeclBase child_map_from, const locus_t* location)
{
    return ::nodecl_make_open_m_p_motion_from(child_map_from.get_internal_nodecl(), location);
}
OpenMP::NumTeams OpenMP::NumTeams::make(Nodecl::NodeclBase child_num_teams, const locus_t* location)
{
    return ::nodecl_make_open_m_p_num_teams(child_num_teams.get_internal_nodecl(), location);
}
OpenMP::ThreadLimit OpenMP::ThreadLimit::make(Nodecl::NodeclBase child_thread_limit, const locus_t* location)
{
    return ::nodecl_make_open_m_p_thread_limit(child_thread_limit.get_internal_nodecl(), location);
}
OpenMP::TargetTaskUndeferred OpenMP::TargetTaskUndeferred::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_target_task_undeferred(location);
}
OpenMP::Firstprivate OpenMP::Firstprivate::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_firstprivate(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Lastprivate OpenMP::Lastprivate::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_lastprivate(child_symbols.get_internal_nodecl(), location);
}
OpenMP::FirstLastprivate OpenMP::FirstLastprivate::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_first_lastprivate(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Shared OpenMP::Shared::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_shared(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Threadprivate OpenMP::Threadprivate::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_threadprivate(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Private OpenMP::Private::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_private(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Auto OpenMP::Auto::make(Nodecl::NodeclBase child_symbols, const locus_t* location)
{
    return ::nodecl_make_open_m_p_auto(child_symbols.get_internal_nodecl(), location);
}
OpenMP::Reduction OpenMP::Reduction::make(Nodecl::NodeclBase child_reductions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_reduction(child_reductions.get_internal_nodecl(), location);
}
OpenMP::TaskReduction OpenMP::TaskReduction::make(Nodecl::NodeclBase child_reductions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_task_reduction(child_reductions.get_internal_nodecl(), location);
}
OpenMP::InReduction OpenMP::InReduction::make(Nodecl::NodeclBase child_reductions, const locus_t* location)
{
    return ::nodecl_make_open_m_p_in_reduction(child_reductions.get_internal_nodecl(), location);
}
OpenMP::PrivateInit OpenMP::PrivateInit::make(Nodecl::NodeclBase child_value, TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_open_m_p_private_init(child_value.get_internal_nodecl(), symbol.get_internal_symbol(), location);
}
FortranAllocateStatement FortranAllocateStatement::make(Nodecl::NodeclBase child_items, Nodecl::NodeclBase child_options, Nodecl::NodeclBase child_allocate_type, const locus_t* location)
{
    return ::nodecl_make_fortran_allocate_statement(child_items.get_internal_nodecl(), child_options.get_internal_nodecl(), child_allocate_type.get_internal_nodecl(), location);
}
FortranArithmeticIfStatement FortranArithmeticIfStatement::make(Nodecl::NodeclBase child_expr, Nodecl::NodeclBase child_lower, Nodecl::NodeclBase child_equal, Nodecl::NodeclBase child_upper, const locus_t* location)
{
    return ::nodecl_make_fortran_arithmetic_if_statement(child_expr.get_internal_nodecl(), child_lower.get_internal_nodecl(), child_equal.get_internal_nodecl(), child_upper.get_internal_nodecl(), location);
}
FortranAssignedGotoStatement FortranAssignedGotoStatement::make(Nodecl::NodeclBase child_index, Nodecl::NodeclBase child_label_seq, const locus_t* location)
{
    return ::nodecl_make_fortran_assigned_goto_statement(child_index.get_internal_nodecl(), child_label_seq.get_internal_nodecl(), location);
}
FortranOpenStatement FortranOpenStatement::make(Nodecl::NodeclBase child_io_items, const locus_t* location)
{
    return ::nodecl_make_fortran_open_statement(child_io_items.get_internal_nodecl(), location);
}
FortranCloseStatement FortranCloseStatement::make(Nodecl::NodeclBase child_io_items, const locus_t* location)
{
    return ::nodecl_make_fortran_close_statement(child_io_items.get_internal_nodecl(), location);
}
FortranComputedGotoStatement FortranComputedGotoStatement::make(Nodecl::NodeclBase child_label_seq, Nodecl::NodeclBase child_index, const locus_t* location)
{
    return ::nodecl_make_fortran_computed_goto_statement(child_label_seq.get_internal_nodecl(), child_index.get_internal_nodecl(), location);
}
FortranAlternateReturnStatement FortranAlternateReturnStatement::make(Nodecl::NodeclBase child_index, const locus_t* location)
{
    return ::nodecl_make_fortran_alternate_return_statement(child_index.get_internal_nodecl(), location);
}
FortranDeallocateStatement FortranDeallocateStatement::make(Nodecl::NodeclBase child_items, Nodecl::NodeclBase child_options, const locus_t* location)
{
    return ::nodecl_make_fortran_deallocate_statement(child_items.get_internal_nodecl(), child_options.get_internal_nodecl(), location);
}
FortranIoStatement FortranIoStatement::make(Nodecl::NodeclBase child_io_spec_list, Nodecl::NodeclBase child_io_items, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_fortran_io_statement(child_io_spec_list.get_internal_nodecl(), child_io_items.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
FortranLabelAssignStatement FortranLabelAssignStatement::make(Nodecl::NodeclBase child_value, Nodecl::NodeclBase child_label_var, const locus_t* location)
{
    return ::nodecl_make_fortran_label_assign_statement(child_value.get_internal_nodecl(), child_label_var.get_internal_nodecl(), location);
}
FortranNullifyStatement FortranNullifyStatement::make(Nodecl::NodeclBase child_items, const locus_t* location)
{
    return ::nodecl_make_fortran_nullify_statement(child_items.get_internal_nodecl(), location);
}
FortranPrintStatement FortranPrintStatement::make(Nodecl::NodeclBase child_format, Nodecl::NodeclBase child_io_items, const locus_t* location)
{
    return ::nodecl_make_fortran_print_statement(child_format.get_internal_nodecl(), child_io_items.get_internal_nodecl(), location);
}
FortranReadStatement FortranReadStatement::make(Nodecl::NodeclBase child_io_spec_list, Nodecl::NodeclBase child_io_items, const locus_t* location)
{
    return ::nodecl_make_fortran_read_statement(child_io_spec_list.get_internal_nodecl(), child_io_items.get_internal_nodecl(), location);
}
FortranWriteStatement FortranWriteStatement::make(Nodecl::NodeclBase child_io_spec_list, Nodecl::NodeclBase child_io_items, const locus_t* location)
{
    return ::nodecl_make_fortran_write_statement(child_io_spec_list.get_internal_nodecl(), child_io_items.get_internal_nodecl(), location);
}
FortranStopStatement FortranStopStatement::make(Nodecl::NodeclBase child_stop_code, const locus_t* location)
{
    return ::nodecl_make_fortran_stop_statement(child_stop_code.get_internal_nodecl(), location);
}
FortranPauseStatement FortranPauseStatement::make(Nodecl::NodeclBase child_pause_code, const locus_t* location)
{
    return ::nodecl_make_fortran_pause_statement(child_pause_code.get_internal_nodecl(), location);
}
FortranEntryStatement FortranEntryStatement::make(TL::Symbol symbol, const locus_t* location)
{
    return ::nodecl_make_fortran_entry_statement(symbol.get_internal_symbol(), location);
}
FortranWhere FortranWhere::make(Nodecl::NodeclBase child_where_set, const locus_t* location)
{
    return ::nodecl_make_fortran_where(child_where_set.get_internal_nodecl(), location);
}
FortranForall FortranForall::make(Nodecl::NodeclBase child_loop_control, Nodecl::NodeclBase child_mask, Nodecl::NodeclBase child_statement, const locus_t* location)
{
    return ::nodecl_make_fortran_forall(child_loop_control.get_internal_nodecl(), child_mask.get_internal_nodecl(), child_statement.get_internal_nodecl(), location);
}
OpenMP::TargetData OpenMP::TargetData::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_target_data(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
OpenMP::Target OpenMP::Target::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_target(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
OpenMP::TargetUpdate OpenMP::TargetUpdate::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_open_m_p_target_update(child_environment.get_internal_nodecl(), location);
}
OpenMP::Teams OpenMP::Teams::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_statements, const locus_t* location)
{
    return ::nodecl_make_open_m_p_teams(child_environment.get_internal_nodecl(), child_statements.get_internal_nodecl(), location);
}
OpenMP::Distribute OpenMP::Distribute::make(Nodecl::NodeclBase child_environment, Nodecl::NodeclBase child_loop, const locus_t* location)
{
    return ::nodecl_make_open_m_p_distribute(child_environment.get_internal_nodecl(), child_loop.get_internal_nodecl(), location);
}
MaskLiteral MaskLiteral::make(TL::Type type, const_value_t* cval, const locus_t* location)
{
    return ::nodecl_make_mask_literal(type.get_internal_type(), cval, location);
}
Checkpoint::Store Checkpoint::Store::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_checkpoint_store(child_environment.get_internal_nodecl(), location);
}
Checkpoint::Load Checkpoint::Load::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_checkpoint_load(child_environment.get_internal_nodecl(), location);
}
Checkpoint::Init Checkpoint::Init::make(Nodecl::NodeclBase child_environment, const locus_t* location)
{
    return ::nodecl_make_checkpoint_init(child_environment.get_internal_nodecl(), location);
}
Checkpoint::Shutdown Checkpoint::Shutdown::make(const locus_t* location)
{
    return ::nodecl_make_checkpoint_shutdown(location);
}
Checkpoint::Data Checkpoint::Data::make(Nodecl::NodeclBase child_exprs, const locus_t* location)
{
    return ::nodecl_make_checkpoint_data(child_exprs.get_internal_nodecl(), location);
}
Checkpoint::Level Checkpoint::Level::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_checkpoint_level(child_expr.get_internal_nodecl(), location);
}
Checkpoint::Id Checkpoint::Id::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_checkpoint_id(child_expr.get_internal_nodecl(), location);
}
Checkpoint::Comm Checkpoint::Comm::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_checkpoint_comm(child_expr.get_internal_nodecl(), location);
}
Checkpoint::If Checkpoint::If::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_checkpoint_if(child_expr.get_internal_nodecl(), location);
}
Checkpoint::Kind Checkpoint::Kind::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_checkpoint_kind(child_expr.get_internal_nodecl(), location);
}
SourceComment SourceComment::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_source_comment(::uniquestr(text.c_str()), location);
}
OmpSs::Target OmpSs::Target::make(Nodecl::NodeclBase child_devices, Nodecl::NodeclBase child_items, const locus_t* location)
{
    return ::nodecl_make_omp_ss_target(child_devices.get_internal_nodecl(), child_items.get_internal_nodecl(), location);
}
RangeLoopControl RangeLoopControl::make(Nodecl::NodeclBase child_induction_variable, Nodecl::NodeclBase child_lower, Nodecl::NodeclBase child_upper, Nodecl::NodeclBase child_step, const locus_t* location)
{
    return ::nodecl_make_range_loop_control(child_induction_variable.get_internal_nodecl(), child_lower.get_internal_nodecl(), child_upper.get_internal_nodecl(), child_step.get_internal_nodecl(), location);
}
IteratorLoopControl IteratorLoopControl::make(Nodecl::NodeclBase child_range_iterator, Nodecl::NodeclBase child_initializer, const locus_t* location)
{
    return ::nodecl_make_iterator_loop_control(child_range_iterator.get_internal_nodecl(), child_initializer.get_internal_nodecl(), location);
}
OpenMP::CriticalName OpenMP::CriticalName::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_open_m_p_critical_name(::uniquestr(text.c_str()), location);
}
CxxDepNameSimple CxxDepNameSimple::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_name_simple(::uniquestr(text.c_str()), location);
}
Analysis::UpperExposed Analysis::UpperExposed::make(Nodecl::NodeclBase child_upper_exposed_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_upper_exposed(child_upper_exposed_exprs.get_internal_nodecl(), location);
}
Analysis::Defined Analysis::Defined::make(Nodecl::NodeclBase child_defined_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_defined(child_defined_exprs.get_internal_nodecl(), location);
}
Analysis::Undefined Analysis::Undefined::make(Nodecl::NodeclBase child_undefined_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_undefined(child_undefined_exprs.get_internal_nodecl(), location);
}
Analysis::LiveIn Analysis::LiveIn::make(Nodecl::NodeclBase child_live_in_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_live_in(child_live_in_exprs.get_internal_nodecl(), location);
}
Analysis::LiveOut Analysis::LiveOut::make(Nodecl::NodeclBase child_live_out_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_live_out(child_live_out_exprs.get_internal_nodecl(), location);
}
Analysis::Dead Analysis::Dead::make(Nodecl::NodeclBase child_dead_exprs, const locus_t* location)
{
    return ::nodecl_make_analysis_dead(child_dead_exprs.get_internal_nodecl(), location);
}
Analysis::ReachingDefinitionIn Analysis::ReachingDefinitionIn::make(Nodecl::NodeclBase child_reaching_definitions_in, const locus_t* location)
{
    return ::nodecl_make_analysis_reaching_definition_in(child_reaching_definitions_in.get_internal_nodecl(), location);
}
Analysis::ReachingDefinitionOut Analysis::ReachingDefinitionOut::make(Nodecl::NodeclBase child_reaching_definitions_out, const locus_t* location)
{
    return ::nodecl_make_analysis_reaching_definition_out(child_reaching_definitions_out.get_internal_nodecl(), location);
}
Analysis::InductionVariable Analysis::InductionVariable::make(Nodecl::NodeclBase child_induction_variables, const locus_t* location)
{
    return ::nodecl_make_analysis_induction_variable(child_induction_variables.get_internal_nodecl(), location);
}
Analysis::AutoScope::Firstprivate Analysis::AutoScope::Firstprivate::make(Nodecl::NodeclBase child_scoped_variables, const locus_t* location)
{
    return ::nodecl_make_analysis_auto_scope_firstprivate(child_scoped_variables.get_internal_nodecl(), location);
}
Analysis::AutoScope::Private Analysis::AutoScope::Private::make(Nodecl::NodeclBase child_scoped_variables, const locus_t* location)
{
    return ::nodecl_make_analysis_auto_scope_private(child_scoped_variables.get_internal_nodecl(), location);
}
Analysis::AutoScope::Shared Analysis::AutoScope::Shared::make(Nodecl::NodeclBase child_scoped_variables, const locus_t* location)
{
    return ::nodecl_make_analysis_auto_scope_shared(child_scoped_variables.get_internal_nodecl(), location);
}
Analysis::Range Analysis::Range::make(Nodecl::NodeclBase child_range_variables, const locus_t* location)
{
    return ::nodecl_make_analysis_range(child_range_variables.get_internal_nodecl(), location);
}
Analysis::Correctness::AutoStorage Analysis::Correctness::AutoStorage::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_auto_storage(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::Dead Analysis::Correctness::Dead::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_dead(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentFp Analysis::Correctness::IncoherentFp::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_fp(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentP Analysis::Correctness::IncoherentP::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_p(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentIn Analysis::Correctness::IncoherentIn::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_in(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentOut Analysis::Correctness::IncoherentOut::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_out(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentInPointed Analysis::Correctness::IncoherentInPointed::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_in_pointed(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::IncoherentOutPointed Analysis::Correctness::IncoherentOutPointed::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_incoherent_out_pointed(child_correctness_vars.get_internal_nodecl(), location);
}
Analysis::Correctness::Race Analysis::Correctness::Race::make(Nodecl::NodeclBase child_correctness_vars, const locus_t* location)
{
    return ::nodecl_make_analysis_correctness_race(child_correctness_vars.get_internal_nodecl(), location);
}
VectorFunctionCode VectorFunctionCode::make(Nodecl::NodeclBase child_function_code, const locus_t* location)
{
    return ::nodecl_make_vector_function_code(child_function_code.get_internal_nodecl(), location);
}
UpcSyncStatement UpcSyncStatement::make(Nodecl::NodeclBase child_expr, const std::string& text, const locus_t* location)
{
    return ::nodecl_make_upc_sync_statement(child_expr.get_internal_nodecl(), ::uniquestr(text.c_str()), location);
}
CxxDepGlobalNameNested CxxDepGlobalNameNested::make(Nodecl::NodeclBase child_items, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_global_name_nested(child_items.get_internal_nodecl(), location);
}
CxxDepNameNested CxxDepNameNested::make(Nodecl::NodeclBase child_items, const locus_t* location)
{
    return ::nodecl_make_cxx_dep_name_nested(child_items.get_internal_nodecl(), location);
}
UnknownPragma UnknownPragma::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_unknown_pragma(::uniquestr(text.c_str()), location);
}
FieldDesignator FieldDesignator::make(Nodecl::NodeclBase child_field, Nodecl::NodeclBase child_next, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_field_designator(child_field.get_internal_nodecl(), child_next.get_internal_nodecl(), type.get_internal_type(), location);
}
IndexDesignator IndexDesignator::make(Nodecl::NodeclBase child_index, Nodecl::NodeclBase child_next, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_index_designator(child_index.get_internal_nodecl(), child_next.get_internal_nodecl(), type.get_internal_type(), location);
}
PreprocessorLine PreprocessorLine::make(const std::string& text, const locus_t* location)
{
    return ::nodecl_make_preprocessor_line(::uniquestr(text.c_str()), location);
}
CxxInitializer CxxInitializer::make(Nodecl::NodeclBase child_init, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_initializer(child_init.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxBracedInitializer CxxBracedInitializer::make(Nodecl::NodeclBase child_init, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_braced_initializer(child_init.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxEqualInitializer CxxEqualInitializer::make(Nodecl::NodeclBase child_init, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_equal_initializer(child_init.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxParenthesizedInitializer CxxParenthesizedInitializer::make(Nodecl::NodeclBase child_init, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_parenthesized_initializer(child_init.get_internal_nodecl(), type.get_internal_type(), location);
}
C99DesignatedInitializer C99DesignatedInitializer::make(Nodecl::NodeclBase child_designation, Nodecl::NodeclBase child_init, const locus_t* location)
{
    return ::nodecl_make_c99_designated_initializer(child_designation.get_internal_nodecl(), child_init.get_internal_nodecl(), location);
}
C99FieldDesignator C99FieldDesignator::make(Nodecl::NodeclBase child_name, const locus_t* location)
{
    return ::nodecl_make_c99_field_designator(child_name.get_internal_nodecl(), location);
}
C99IndexDesignator C99IndexDesignator::make(Nodecl::NodeclBase child_expr, const locus_t* location)
{
    return ::nodecl_make_c99_index_designator(child_expr.get_internal_nodecl(), location);
}
CxxValuePack CxxValuePack::make(Nodecl::NodeclBase child_pack, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_value_pack(child_pack.get_internal_nodecl(), type.get_internal_type(), location);
}
CxxValuePackExpanded CxxValuePackExpanded::make(Nodecl::NodeclBase child_values, TL::Type type, const locus_t* location)
{
    return ::nodecl_make_cxx_value_pack_expanded(child_values.get_internal_nodecl(), type.get_internal_type(), location);
}
OpenMP::If OpenMP::If::make(Nodecl::NodeclBase child_condition, const locus_t* location)
{
    return ::nodecl_make_open_m_p_if(child_condition.get_internal_nodecl(), location);
}
OpenMP::Final OpenMP::Final::make(Nodecl::NodeclBase child_condition, const locus_t* location)
{
    return ::nodecl_make_open_m_p_final(child_condition.get_internal_nodecl(), location);
}
OpenMP::Priority OpenMP::Priority::make(Nodecl::NodeclBase child_priority, const locus_t* location)
{
    return ::nodecl_make_open_m_p_priority(child_priority.get_internal_nodecl(), location);
}
OpenMP::Mergeable OpenMP::Mergeable::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_mergeable(location);
}
OpenMP::Untied OpenMP::Untied::make(const locus_t* location)
{
    return ::nodecl_make_open_m_p_untied(location);
}
OmpSs::Wait OmpSs::Wait::make(const locus_t* location)
{
    return ::nodecl_make_omp_ss_wait(location);
}
OpenMP::ReductionItem OpenMP::ReductionItem::make(Nodecl::NodeclBase child_reductor, Nodecl::NodeclBase child_reduced_symbol, Nodecl::NodeclBase child_reduction_type, const locus_t* location)
{
    return ::nodecl_make_open_m_p_reduction_item(child_reductor.get_internal_nodecl(), child_reduced_symbol.get_internal_nodecl(), child_reduction_type.get_internal_nodecl(), location);
}
OmpSs::CopyIn OmpSs::CopyIn::make(Nodecl::NodeclBase child_input_copies, const locus_t* location)
{
    return ::nodecl_make_omp_ss_copy_in(child_input_copies.get_internal_nodecl(), location);
}
OmpSs::CopyOut OmpSs::CopyOut::make(Nodecl::NodeclBase child_output_copies, const locus_t* location)
{
    return ::nodecl_make_omp_ss_copy_out(child_output_copies.get_internal_nodecl(), location);
}
OmpSs::CopyInout OmpSs::CopyInout::make(Nodecl::NodeclBase child_inout_copies, const locus_t* location)
{
    return ::nodecl_make_omp_ss_copy_inout(child_inout_copies.get_internal_nodecl(), location);
}
OmpSs::NDRange OmpSs::NDRange::make(Nodecl::NodeclBase child_ndrange_expressions, const locus_t* location)
{
    return ::nodecl_make_omp_ss_n_d_range(child_ndrange_expressions.get_internal_nodecl(), location);
}
OmpSs::ShMem OmpSs::ShMem::make(Nodecl::NodeclBase child_shmem_expressions, const locus_t* location)
{
    return ::nodecl_make_omp_ss_sh_mem(child_shmem_expressions.get_internal_nodecl(), location);
}
OmpSs::File OmpSs::File::make(Nodecl::NodeclBase child_filename, const locus_t* location)
{
    return ::nodecl_make_omp_ss_file(child_filename.get_internal_nodecl(), location);
}
OmpSs::Name OmpSs::Name::make(Nodecl::NodeclBase child_name, const locus_t* location)
{
    return ::nodecl_make_omp_ss_name(child_name.get_internal_nodecl(), location);
}
OmpSs::Onto OmpSs::Onto::make(Nodecl::NodeclBase child_onto_expressions, const locus_t* location)
{
    return ::nodecl_make_omp_ss_onto(child_onto_expressions.get_internal_nodecl(), location);
}
OmpSs::Implements OmpSs::Implements::make(Nodecl::NodeclBase child_device, Nodecl::NodeclBase child_function_name, const locus_t* location)
{
    return ::nodecl_make_omp_ss_implements(child_device.get_internal_nodecl(), child_function_name.get_internal_nodecl(), location);
}
} /* namespace Nodecl */
