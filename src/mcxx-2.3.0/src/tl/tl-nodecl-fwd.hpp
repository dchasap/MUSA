/* Autogenerated file. DO NOT MODIFY. */
/* Changes in nodecl-generator.py or cxx-nodecl.def will overwrite this file */
#ifndef TL_NODECL_FWD_HPP
#define TL_NODECL_FWD_HPP

#include "tl-nodecl-base-fwd.hpp"
#include "mem.h"

namespace Nodecl {
class CxxNoexcept;
class CxxEqualInitializer;
class Preincrement;
class ClassMemberAccess;
namespace OpenMP { 
class DepInout;
}
class CxxFunctionFormUnaryPrefix;
class CxxDef;
namespace Analysis { 
class InductionVarExpr;
}
class FunctionCode;
class VectorLogicalAnd;
class VectorGreaterThan;
class VectorFmadd;
namespace Analysis { 
class Phi;
}
namespace OpenMP { 
class TaskIsTaskwait;
}
class StructuredValueParenthesized;
class StructuredValueCompoundLiteral;
namespace OpenMP { 
class Nontemporal;
}
class RangeLoopControl;
class VectorDifferent;
class GxxTrait;
class VectorMaskAnd2Not;
class CxxArrowPtrMember;
namespace OpenMP { 
class Overlap;
}
class ContinueStatement;
class CxxDepFunctionCall;
class VectorBitwiseShr;
namespace OmpSs { 
class DepInPrivate;
}
class FortranReadStatement;
namespace OpenMP { 
class Distribute;
}
class IfElseStatement;
namespace OpenMP { 
class ParallelSimdFor;
}
namespace OpenMP { 
class For;
}
class CompoundExpression;
class Power;
class NoexceptImplicitTrue;
class VectorMaskOr;
namespace OpenMP { 
class FlushAtExit;
}
namespace OpenMP { 
class MotionFrom;
}
namespace OmpSs { 
class SharedAndAlloca;
}
class MemberInit;
class VectorLogicalNot;
class PragmaClauseArg;
class GccAsmOperand;
class CaseStatement;
class PragmaCustomDirective;
class VectorFmminus;
class CxxInitializer;
namespace Analysis { 
class PlusInfinity;
}
namespace OpenMP { 
class Private;
}
class LowerThan;
class CxxMemberInit;
class IntelAssume;
namespace OpenMP { 
class Sections;
}
class GccBuiltinVaArg;
class FortranForall;
class CxxExplicitInstantiationDef;
namespace OmpSs { 
class Implements;
}
namespace OmpSs { 
class DepWeakOut;
}
namespace Checkpoint { 
class Id;
}
namespace Analysis { 
namespace Correctness { 
class Dead;
}
}
class CxxDepNameConversion;
class VectorPrefetch;
namespace OpenMP { 
class SimdFunction;
}
class VectorFunctionCode;
class PseudoDestructorName;
class PointerToMember;
class VectorSincos;
class FieldDesignator;
namespace OmpSs { 
class Alloca;
}
class FortranNotPresent;
class Conversion;
class VectorReductionMinus;
namespace OpenMP { 
class MotionTo;
}
class Div;
class Minus;
class CxxLambda;
namespace Checkpoint { 
class Shutdown;
}
class ForStatement;
namespace Analysis { 
class RangeUnion;
}
namespace Analysis { 
namespace AutoScope { 
class Private;
}
}
namespace OpenMP { 
class Unroll;
}
namespace Analysis { 
class LiveOut;
}
namespace OpenMP { 
class BarrierWait;
}
class Symbol;
class VectorReductionMul;
class Verbatim;
class VectorLoop;
class DoStatement;
namespace OpenMP { 
class FlushAtEntry;
}
namespace OpenMP { 
class If;
}
class ParenthesizedExpression;
class ErrStatement;
namespace OmpSs { 
class TaskIsLoop;
}
class Dummy;
class InPlaceFlag;
class CxxCaptureReference;
class AlignedFlag;
class CxxDepDecltype;
class BitwiseOr;
namespace OpenMP { 
class ForAppendix;
}
class PragmaCustomLine;
class BitwiseNot;
class BooleanLiteral;
namespace OpenMP { 
class MapAlloc;
}
class MulAssignment;
namespace OpenMP { 
class TargetTaskUndeferred;
}
class Neg;
class CxxCaptureCopy;
class PreprocessorLine;
class FortranNullifyStatement;
class CxxDepNameNested;
namespace OpenMP { 
class TaskReduction;
}
namespace Analysis { 
namespace Correctness { 
class Race;
}
}
namespace OpenMP { 
class Master;
}
namespace OmpSs { 
class Unregister;
}
class VectorSqrt;
class FortranAlternateReturnStatement;
class AddAssignment;
namespace Analysis { 
class LiveIn;
}
namespace Analysis { 
namespace AutoScope { 
class Shared;
}
}
class VectorFunctionCall;
namespace Checkpoint { 
class If;
}
namespace OmpSs { 
class Wait;
}
namespace Analysis { 
class MinusInfinity;
}
namespace OpenMP { 
class Simd;
}
namespace OpenMP { 
class Taskwait;
}
class LogicalNot;
class CxxDepNew;
namespace OpenMP { 
class VectorLength;
}
class PragmaCustomClause;
namespace OpenMP { 
class Teams;
}
namespace Analysis { 
class Defined;
}
namespace OmpSs { 
class ShMem;
}
class CxxFunctionFormImplicit;
namespace OpenMP { 
class Atomic;
}
namespace Analysis { 
class AssertDecl;
}
class FortranHollerith;
namespace OpenMP { 
class PrivateInit;
}
namespace OpenMP { 
class Linear;
}
namespace OmpSs { 
class DepConcurrent;
}
class FortranOpenStatement;
namespace OpenMP { 
class MapFrom;
}
namespace OmpSs { 
class Chunksize;
}
namespace OpenMP { 
class InReduction;
}
namespace OpenMP { 
class Untied;
}
class FortranBindC;
class CxxExplicitTypeCast;
class VectorSubscript;
class ArithmeticShrAssignment;
class Context;
class VectorAdd;
class GccAsmSpec;
class VectorBitwiseAnd;
namespace OmpSs { 
class CopyOut;
}
namespace Analysis { 
namespace Correctness { 
class IncoherentFp;
}
}
namespace OmpSs { 
class DepCommutative;
}
namespace OpenMP { 
class ThreadLimit;
}
class PragmaContext;
class VectorMaskXor;
class EvictFlag;
class FunctionCall;
class ArraySubscript;
class DeleteArray;
class VectorBitwiseShl;
class VectorBitwiseOr;
class CxxUsingDecl;
class MultiExpressionIterator;
namespace OpenMP { 
class Threadprivate;
}
class Plus;
class RelaxedFlag;
namespace OpenMP { 
class SimdFor;
}
class ReturnStatement;
class CxxFunctionFormDefaultInitBraced;
namespace Analysis { 
class Minimum;
}
class CxxUsingNamespace;
class CxxAlignas;
class GreaterOrEqualThan;
class FortranData;
class VectorRsqrt;
namespace OmpSs { 
class TaskExpression;
}
class VectorRcp;
namespace OpenMP { 
class CombinedWithParallel;
}
class VectorMinus;
class RangeDiscrete;
class FortranComputedGotoStatement;
namespace Analysis { 
namespace Correctness { 
class IncoherentOutPointed;
}
}
class UnboundedLoopControl;
class TryBlock;
class VectorDiv;
namespace OpenMP { 
class Device;
}
namespace OmpSs { 
class TaskIsTaskCall;
}
namespace Checkpoint { 
class Level;
}
class New;
namespace OpenMP { 
class NoMask;
}
namespace OpenMP { 
class DepIn;
}
namespace OpenMP { 
class Single;
}
class FortranActualArgument;
class CxxDepTemplateId;
class BitwiseOrAssignment;
class VectorPromotion;
namespace Analysis { 
class RangeIntersection;
}
class VlaWildcard;
class VectorLaneId;
class Concat;
namespace Checkpoint { 
class Init;
}
class CxxClassMemberAccess;
namespace OpenMP { 
class Prefetch;
}
class ArithmeticShr;
namespace OmpSs { 
class Loop;
}
class CxxFunctionFormTemplateId;
class StructuredValueBracedImplicit;
class Comma;
class Typeid;
namespace OpenMP { 
class Firstprivate;
}
class VectorMaskAnd;
class Shaping;
class ObjectInit;
class ModAssignment;
class Equal;
class Offsetof;
class Delete;
namespace OpenMP { 
class VectorLengthFor;
}
class CxxPostfixInitializer;
namespace OmpSs { 
class DepWeakInout;
}
class Mod;
class FortranAlternateReturnArgument;
class VectorCast;
namespace OpenMP { 
class CriticalName;
}
namespace Analysis { 
class UpperExposed;
}
class CxxDepGlobalNameNested;
namespace Checkpoint { 
class Kind;
}
class BitwiseAndAssignment;
class Offset;
class CxxCast;
namespace Analysis { 
class Undefined;
}
namespace OmpSs { 
class NDRange;
}
class IntegerLiteral;
namespace OmpSs { 
class DepWeakCommutative;
}
namespace Analysis { 
class ReachingDefinitionOut;
}
class VectorMaskAssignment;
class VectorBitwiseXor;
class StructuredValueFortranTypespecArrayConstructor;
class GreaterThan;
class GccAsmDefinition;
class C99FieldDesignator;
class FortranDeallocateStatement;
namespace OpenMP { 
class Auto;
}
class BitwiseAnd;
class IntelAssumeAligned;
namespace OpenMP { 
class Shared;
}
class VectorBitwiseNot;
namespace OpenMP { 
class NumTasks;
}
class Assignment;
namespace OpenMP { 
class Workshare;
}
class VectorConditionalExpression;
class SwitchStatement;
class VectorReductionAdd;
class FortranUse;
class FloatingLiteral;
namespace OpenMP { 
class Reduction;
}
namespace OmpSs { 
class Release;
}
namespace OpenMP { 
class DeclareTarget;
}
namespace Analysis { 
class InductionVariable;
}
class VectorNeg;
class StringLiteral;
class StructuredValueBracedTypecast;
class FortranStopStatement;
namespace Checkpoint { 
class Comm;
}
class CxxSizeof;
namespace OmpSs { 
class Name;
}
namespace OpenMP { 
class Mergeable;
}
namespace Analysis { 
namespace AutoScope { 
class Firstprivate;
}
}
class VectorLoad;
class LoopControl;
class LogicalAnd;
namespace OpenMP { 
class Section;
}
class CxxAlignof;
class VectorFabs;
class GotoStatement;
class Postdecrement;
class VectorLogicalOr;
class FortranBozLiteral;
class CudaKernelCall;
namespace Analysis { 
class EmptyRange;
}
class DefaultArgument;
class FortranWriteStatement;
class VectorMul;
class CxxArrow;
class VectorLowerThan;
class VectorConversion;
class VectorAssignment;
namespace OpenMP { 
class FunctionTaskParsingContext;
}
class VectorMod;
class VectorAlignRight;
namespace OpenMP { 
class Schedule;
}
namespace OmpSs { 
class Register;
}
class VectorMaskAnd1Not;
class DefaultStatement;
namespace OpenMP { 
class ReductionItem;
}
namespace Analysis { 
class RangeSub;
}
class FortranLabelAssignStatement;
namespace OpenMP { 
class BarrierFull;
}
class CxxFunctionFormDefaultInit;
namespace OpenMP { 
class Priority;
}
namespace OmpSs { 
class TargetDeclaration;
}
class AlignmentInfo;
namespace OpenMP { 
class SimdReduction;
}
namespace OpenMP { 
class Taskgroup;
}
class FortranCloseStatement;
class IteratorLoopControl;
namespace Analysis { 
namespace Correctness { 
class IncoherentP;
}
}
class Sizeof;
class UpcSyncStatement;
namespace OpenMP { 
class Grainsize;
}
class PragmaCustomStatement;
namespace OpenMP { 
class MapTo;
}
class VectorEqual;
class UnknownPragma;
class C99IndexDesignator;
namespace Checkpoint { 
class Data;
}
namespace OpenMP { 
class TargetUpdate;
}
class CxxValuePack;
class ComplexLiteral;
class LabeledStatement;
class FortranImpliedDo;
namespace OmpSs { 
class DepWeakReduction;
}
namespace OpenMP { 
class NumTeams;
}
namespace Analysis { 
class Range;
}
class Alignof;
class VectorLowerOrEqualThan;
namespace OpenMP { 
class Final;
}
class Add;
class VectorArithmeticShr;
class FortranIoStatement;
namespace Analysis { 
namespace Correctness { 
class IncoherentOut;
}
}
class RealPart;
namespace OmpSs { 
class File;
}
class ExpressionStatement;
class CxxForRanged;
class Different;
class NontemporalFlag;
class FortranArithmeticIfStatement;
class GxxBuiltinAddressof;
namespace OmpSs { 
class Cost;
}
class CxxParseLater;
namespace OpenMP { 
class BarrierAtEnd;
}
namespace OpenMP { 
class FirstLastprivate;
}
class Unknown;
class VectorGreaterOrEqualThan;
namespace OmpSs { 
class CopyIn;
}
namespace OpenMP { 
class Critical;
}
class VirtualFunctionCall;
class FortranEntryStatement;
namespace OmpSs { 
class TaskCall;
}
class Text;
class Throw;
class CxxExplicitInstantiationDecl;
namespace Analysis { 
class Assert;
}
class FortranAllocateStatement;
class OnTopFlag;
class BitwiseXor;
class FortranAssignedGotoStatement;
class PragmaCustomDeclaration;
class CxxSizeofPack;
namespace OpenMP { 
class DepOut;
}
namespace Analysis { 
class ReachDefExpr;
}
namespace OpenMP { 
class MapToFrom;
}
class Predecrement;
class VectorLiteral;
class FortranPrintStatement;
class CxxFunctionFormUnaryPostfix;
namespace Checkpoint { 
class Store;
}
class BitwiseShr;
class Type;
class VectorMaskConversion;
class CatchHandler;
class CxxParenthesizedInitializer;
class Postincrement;
class ConditionalExpression;
namespace OmpSs { 
class WeakReduction;
}
class CxxValuePackExpanded;
class Reference;
class LowerOrEqualThan;
namespace OmpSs { 
class DepWeakIn;
}
class CxxDotPtrMember;
namespace OpenMP { 
class Taskloop;
}
namespace Analysis { 
class Maximum;
}
class CxxDepNameSimple;
class CompoundStatement;
class FortranPauseStatement;
class FortranUseOnly;
namespace OpenMP { 
class Aligned;
}
namespace OpenMP { 
class Mask;
}
class BreakStatement;
namespace OpenMP { 
class BarrierSignal;
}
namespace OpenMP { 
class NoPrefetch;
}
class CxxBracedInitializer;
namespace OpenMP { 
class TargetData;
}
namespace OpenMP { 
class Suitable;
}
namespace OpenMP { 
class Uniform;
}
class FortranEquivalence;
namespace OmpSs { 
class Onto;
}
class AsmDefinition;
namespace OpenMP { 
class Target;
}
namespace Analysis { 
class Dead;
}
class CxxDecl;
class ImagPart;
class ImplicitMemberInit;
class FortranIoSpec;
class VectorMaskNot;
class MultiExpression;
class LogicalOr;
class TopLevel;
namespace Analysis { 
namespace Correctness { 
class IncoherentIn;
}
}
class BitwiseShl;
class TemplateFunctionCode;
class FortranWhere;
class CxxStaticAssert;
namespace OpenMP { 
class Lastprivate;
}
namespace OpenMP { 
class UnrollAndJam;
}
namespace OmpSs { 
class TaskLabel;
}
class VectorGather;
class FortranWherePair;
namespace Analysis { 
namespace Correctness { 
class IncoherentInPointed;
}
}
class Dereference;
class VectorScatter;
namespace OpenMP { 
class DistSchedule;
}
class WhileStatement;
class BitwiseShrAssignment;
class CxxFunctionFormBinaryInfix;
class ErrExpr;
class Range;
namespace OpenMP { 
class Parallel;
}
class Mul;
class CxxImplicitInstantiation;
namespace Analysis { 
class ReachingDefinitionIn;
}
class C99DesignatedInitializer;
class SourceComment;
class BitwiseShlAssignment;
namespace OpenMP { 
class Taskyield;
}
namespace OmpSs { 
class DepReduction;
}
namespace OmpSs { 
class CopyInout;
}
namespace Analysis { 
namespace Correctness { 
class AutoStorage;
}
}
class HasBeenDefinedFlag;
class EmptyStatement;
class StructuredValue;
class VectorStore;
class MaskLiteral;
namespace Checkpoint { 
class Load;
}
class BitwiseXorAssignment;
namespace OpenMP { 
class NoFlush;
}
namespace OmpSs { 
class Target;
}
namespace OpenMP { 
class FlushMemory;
}
namespace OpenMP { 
class Task;
}
class DivAssignment;
class MinusAssignment;
class IndexDesignator;

} // Nodecl
#endif // TL_NODECL_FWD_HPP
